<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>80386寄存器概览</title>
    <url>/post/48769/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>占坑～～</p>
<p>学习计算机系统，感觉老师汇编部分讲的不多，寄存器那里主要介绍那几个通用寄存器，段地址寄存器没有讲到，产生了一些疑惑，所以我决定在这里给它整明白了。</p>
<a id="more"></a>
<p>当前疑惑的主要是段地址的区别，8086和80386的段地址寄存器都是16位的，二者的寻址方式也不一样了，8086是 <code>段地址×16 + 偏移地址</code> （结果是逻辑地址），80386段寄存器里装的不是段偏移地址，而是一个段描述符，根据描述符取得物理地址基址，加上偏移算出物理地址描述符表定义所有段的物理地址基址。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<p><a href="https://linux.cn/blog-11720-5749.html">80386常用内部寄存器</a></p>
<p><a href="https://www.cnblogs.com/l0nmar/p/12553872.html">80386汇编</a></p>
<p><a href="https://programtip.com/en/art-48102">重新认识intel段机制寻址方式</a></p>
]]></content>
      <tags>
        <tag>计算机系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian-Ubuntu定时重启</title>
    <url>/post/39331/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>注意，要在root用户下，设置crontab，并且指定执行指令的绝对路径<code>/sbin/reboot</code>，而不是简单的写<code>reboot</code>，否则无效，因为只写reboot不会以root身份执行，权限不够的。</p>
<p>参考：</p>
<p><a href="https://www.moerats.com/archives/623/">https://www.moerats.com/archives/623/</a></p>
<p><a href="https://sb.sb/blog/debian-9-rc-local/">https://sb.sb/blog/debian-9-rc-local/</a></p>
<p><a href="https://blog.csdn.net/kk3909/article/details/105025144">https://blog.csdn.net/kk3909/article/details/105025144</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian&amp;Ubuntu服务器初始化配置</title>
    <url>/post/19842/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文以Debian 10为例，介绍如何对服务器进行初步配置，本文同样完全适用于 Ubuntu20.04系统。</p>
<a id="more"></a>
<h2 id="基础设置"><a class="header-anchor" href="#基础设置"></a>基础设置</h2>
<p>更改密码:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure>
<p>更新系统:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt full-upgrade -y &amp;&amp; apt autoremove -y</span><br></pre></td></tr></table></figure>
<p>安装常用软件：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">apt</span> install sudo wget curl htop vim git ffmpeg aria<span class="number">2</span> zsh zip unzip man npm nodejs speedtest-cli python<span class="number">3</span> python<span class="number">3</span>-pip ufw fail<span class="number">2</span>ban certbot nginx -y</span><br></pre></td></tr></table></figure>
<p>安装python3常用库：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pip3</span> install requests bs<span class="number">4</span> lxml python-telegram-bot you-get youtube-dl gdown m<span class="number">3</span>u<span class="number">8</span>downloader fake_useragent faker pyexecjs</span><br></pre></td></tr></table></figure>
<p>添加新用户：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adduser chan</span></span><br></pre></td></tr></table></figure>
<p>将新用户添加至sudo组：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">usermod -aG sudo chan</span></span><br></pre></td></tr></table></figure>
<h2 id="安全设置"><a class="header-anchor" href="#安全设置"></a>安全设置</h2>
<h3 id="ssh设置"><a class="header-anchor" href="#ssh设置"></a>ssh设置</h3>
<p>修改ssh配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>修改ssh端口：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Port <span class="number">2333</span></span><br></pre></td></tr></table></figure>
<p>禁止root远程登录：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PermitRootLogin</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure>
<p>安装fail2ban防ssh爆破：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> /etc/fail2ban</span><br><span class="line">cp jail.<span class="keyword">conf</span> jail.<span class="keyword">local</span></span><br><span class="line">nano jail.<span class="keyword">local</span></span><br></pre></td></tr></table></figure>
<p>sshd处加上 enabled = true，并将所有默认ssh端口为2333</p>
<h3 id="防火墙设置"><a class="header-anchor" href="#防火墙设置"></a>防火墙设置</h3>
<p>开启防火墙，仅放行ssh端口</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ufw</span> <span class="literal">allow</span> <span class="number">2333</span></span><br><span class="line"><span class="attribute">ufw</span> enable</span><br></pre></td></tr></table></figure>
<h2 id="性能优化"><a class="header-anchor" href="#性能优化"></a>性能优化</h2>
<h3 id="TCP传输优化"><a class="header-anchor" href="#TCP传输优化"></a>TCP传输优化</h3>
<p>查看是否已开启BBR：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">sysctl</span> <span class="selector-tag">net</span><span class="selector-class">.ipv4</span><span class="selector-class">.tcp_available_congestion_control</span></span><br></pre></td></tr></table></figure>
<p>如果没有则开启BBR：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">echo <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>sysctl.conf</span><br><span class="line">echo <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<h3 id="调整swap大小"><a class="header-anchor" href="#调整swap大小"></a>调整swap大小</h3>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//www.moerats.<span class="keyword">com</span>/usr/<span class="keyword">shell</span>/swap.<span class="keyword">sh</span> &amp;&amp; bash swap.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<h2 id="个性化配置"><a class="header-anchor" href="#个性化配置"></a>个性化配置</h2>
<h3 id="配置shell"><a class="header-anchor" href="#配置shell"></a>配置shell</h3>
<p>安装oh-my-zsh</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>ohmyzsh<span class="regexp">/ohmyzsh/</span>tools/install.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure>
<p>添加自动补全插件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com.cnpmjs.org<span class="regexp">/zsh-users/</span>zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span><span class="regexp">/plugins/</span>zsh-autosuggestions</span><br></pre></td></tr></table></figure>
<p>添加语法高亮插件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com.cnpmjs.org<span class="regexp">/zsh-users/</span>zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span><span class="regexp">/plugins/</span>zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>
<p>修改配置文件<code>~/.zshrc</code>,修改主题及插件：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ZSH_THEME</span>=<span class="string">&quot;ys&quot;</span></span><br><span class="line"><span class="attr">plugins</span>=(git zsh-autosuggestions zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure>
<h3 id="配置vim"><a class="header-anchor" href="#配置vim"></a>配置vim</h3>
<h4 id="安装spf13-vim"><a class="header-anchor" href="#安装spf13-vim"></a>安装spf13-vim</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh &lt;(curl https://j.mp/spf13-vim3 -L)</span><br></pre></td></tr></table></figure>
<h4 id="启用鼠标复制粘贴"><a class="header-anchor" href="#启用鼠标复制粘贴"></a>启用鼠标复制粘贴</h4>
<p>编辑<code>/etc/vim/vimrc.local</code>，添加如下内容</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> /usr/share/<span class="keyword">vim</span>/vim81/defaults.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">let</span> skip_defaults_vim = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">&#x27;mouse&#x27;</span>)</span><br><span class="line">    <span class="keyword">set</span> mouse-=<span class="keyword">a</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>
<h4 id="F5执行脚本"><a class="header-anchor" href="#F5执行脚本"></a>F5执行脚本</h4>
<p>将下面的配置放到.vimrc文件即可：</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;Quickly Run</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">map &lt;F5&gt; :call CompileRunGcc()&lt;CR&gt;</span></span><br><span class="line"><span class="string">func! CompileRunGcc()</span></span><br><span class="line"><span class="string">	exec &quot;</span>w<span class="string">&quot;</span></span><br><span class="line"><span class="string">	if &amp;filetype == &#x27;c&#x27;</span></span><br><span class="line"><span class="string">		exec &quot;</span>!g++ % -o %&lt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">		exec &quot;</span>!time ./%&lt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">	elseif &amp;filetype == &#x27;cpp&#x27;</span></span><br><span class="line"><span class="string">		exec &quot;</span>!g++ % -o %&lt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">		exec &quot;</span>!time ./%&lt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">	elseif &amp;filetype == &#x27;java&#x27;</span></span><br><span class="line"><span class="string">		exec &quot;</span>!javac %<span class="string">&quot;</span></span><br><span class="line"><span class="string">		exec &quot;</span>!time java %&lt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">	elseif &amp;filetype == &#x27;sh&#x27;</span></span><br><span class="line"><span class="string">		:!time bash %</span></span><br><span class="line"><span class="string">	elseif &amp;filetype == &#x27;python&#x27;</span></span><br><span class="line"><span class="string">		exec &quot;</span>!time python<span class="number">2.7</span> %<span class="string">&quot;</span></span><br><span class="line"><span class="string">	elseif &amp;filetype == &#x27;html&#x27;</span></span><br><span class="line"><span class="string">		exec &quot;</span>!firefox % &amp;<span class="string">&quot;</span></span><br><span class="line"><span class="string">	elseif &amp;filetype == &#x27;go&#x27;</span></span><br><span class="line"><span class="string">        exec &quot;</span>!go build %&lt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">		exec &quot;</span>!time go run %<span class="string">&quot;</span></span><br><span class="line"><span class="string">	elseif &amp;filetype == &#x27;mkd&#x27;</span></span><br><span class="line"><span class="string">		exec &quot;</span>!~/.vim/markdown.pl % &gt; %.html &amp;<span class="string">&quot;</span></span><br><span class="line"><span class="string">		exec &quot;</span>!firefox %.html &amp;<span class="string">&quot;</span></span><br><span class="line"><span class="string">	endif</span></span><br><span class="line"><span class="string">endfunc</span></span><br></pre></td></tr></table></figure>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<p><a href="https://blog.chaos.run/dreams/ubuntu-server-starting-settings">https://blog.chaos.run/dreams/ubuntu-server-starting-settings</a></p>
<p><a href="https://github.com/fail2ban/fail2ban/wiki/Proper-fail2ban-configuration">https://github.com/fail2ban/fail2ban/wiki/Proper-fail2ban-configuration</a></p>
<p><a href="https://xirikm.net/2019/504-1">https://xirikm.net/2019/504-1</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian10上安装LEMP建站教程</title>
    <url>/post/25397/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>记一次建站过程。宝塔建站是不可能的，lnmp一键脚本又得编译，小机器顶不住哇，所以选择了手动安装Nginx、MariaDB以及PHP的二进制文件来建站，记录如下。</p>
<a id="more"></a>
<p>下面的过程中，我们使用有sudo权限的用户进行操作。建站前先更新软件源，sudo apt update。</p>
<h2 id="安装三大组件"><a class="header-anchor" href="#安装三大组件"></a>安装三大组件</h2>
<p>下面开始安装建站中最常见的三大组件Nginx，MariaDB，PHP，它们分别起提供web服务，存储数据和处理内容的作用。</p>
<h3 id="安装Nginx"><a class="header-anchor" href="#安装Nginx"></a>安装Nginx</h3>
<p>安装web服务器，Nginx。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure>
<p>安装完后，可在浏览器直接输入ip地址访问，查看效果</p>
<h3 id="安装MariaDB"><a class="header-anchor" href="#安装MariaDB"></a>安装MariaDB</h3>
<p>安装sql数据库，MariaDB。MariaDB兼容MySQL，是MySQL的开源替代。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install mariadb-server</span><br></pre></td></tr></table></figure>
<p>安装完后进行安全检查：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>首先，它会提示你输入数据库的root密码（注意，不是linux系统root密码），因为是刚刚安装还没设置有密码，所以直接回车即可。</p>
<p>紧接着，它会提示你要不要设置数据库root密码，选择N，因为MariaDB使用的是一种特别的验证方式，通过判断当前linux用户的权限来验证，比设置密码的方式更为安全。</p>
<p>接下来的几项，选Y，最后按回车接受所有默认的子选项即可。这个操作会移除匿名用户和、test database以及禁止root远程登录，并加载刚才你设置的更改规则。</p>
<p>安装完成后，测试一下数据库。登录数据库服务器 MariaDB Server：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mariadb</span><br></pre></td></tr></table></figure>
<p>连接成功后会看到类似如下的输出：</p>
<blockquote>
<p>Welcome to the MariaDB monitor.  Commands end with ; or \g.<br>
Your MariaDB connection id is 74<br>
Server version: 10.3.15-MariaDB-1 Debian 10</p>
<p>Copyright © 2000, 2018, Oracle, MariaDB Corporation Ab and others.</p>
<p>Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the current input statement.</p>
<p>MariaDB [(none)]&gt;</p>
</blockquote>
<h3 id="安装PHP"><a class="header-anchor" href="#安装PHP"></a>安装PHP</h3>
<p>先是安装基本的php插件php-fpm 和php-mysql，其中php-fpm是负责处理由Nginx传来的PHP请求，而php-mysql则负责与mysql类数据库进行交互。在安装php-fpm、php-mysql时，php会作为依赖安装，所以不必再加入php。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install php-fpm php-mysql</span><br></pre></td></tr></table></figure>
<p>然后，告诉PHP只接受服务器上实际存在的文件的URI。 这减轻了一个安全漏洞，即如果文件系统中不存在请求的.php文件，则PHP解释器可能会被诱使允许执行任意代码。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g&#x27;</span> /etc/php/7.4/fpm/php.ini</span><br></pre></td></tr></table></figure>
<h2 id="配置数据库"><a class="header-anchor" href="#配置数据库"></a>配置数据库</h2>
<p>首先，连接到数据库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mariadb</span><br></pre></td></tr></table></figure>
<p>然后，开始创建一个名为userdb的数据库</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE userdb<span class="built_in"> DEFAULT </span>CHARACTER <span class="builtin-name">SET</span> utf8 COLLATE utf8_unicode_ci;</span><br></pre></td></tr></table></figure>
<p>接着，把这个数据的权限授予一个用户管理，这里设置用户名wordpress_user,对应密码设置为password</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> userdb.* <span class="keyword">TO</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>最后，刷新权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure>
<p>退出MariaDB：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">EXIT<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="安装Typecho"><a class="header-anchor" href="#安装Typecho"></a>安装Typecho</h2>
<h3 id="下载Typecho"><a class="header-anchor" href="#下载Typecho"></a>下载Typecho</h3>
<p>到官网http://typecho.org/download下载最新版，解压并放到/var/www/your_domain文件夹，并更改所有者：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">chown</span> -<span class="type">R</span> www-<span class="class"><span class="keyword">data</span>:www-<span class="keyword">data</span> /var/www/your_domain</span></span><br></pre></td></tr></table></figure>
<h2 id="安装php插件"><a class="header-anchor" href="#安装php插件"></a>安装php插件</h2>
<p>不同的模板要求不同的PHP插件，具体看文档要求</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> php-curl php-mbstring php-xmlrpc</span><br></pre></td></tr></table></figure>
<h3 id="配置Nginx"><a class="header-anchor" href="#配置Nginx"></a>配置Nginx</h3>
<p>建议直接到https://www.digitalocean.com/community/tools/nginx, 在线生配置文件(建议选有wordpress优化的配置)并按提示覆盖到/etc/nginx目录下。</p>
<p>然后，测试配置文件是否有误：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure>
<p>最后，重载Nginx配置文件使之生效：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure>
<h3 id="登录Typecho"><a class="header-anchor" href="#登录Typecho"></a>登录Typecho</h3>
<p>直接登录网站，进行Typecho在线安装配置，过程中需要输入在上面配置的数据库信息。</p>
<h2 id="安装Wordpress"><a class="header-anchor" href="#安装Wordpress"></a>安装Wordpress</h2>
<h3 id="安装额外PHP插件"><a class="header-anchor" href="#安装额外PHP插件"></a>安装额外PHP插件</h3>
<p>不同的模板要求不同的PHP插件，具体看文档要求，Wordpress要安装如下的PHP插件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install php-curl php-gd php-intl php-mbstring php-soap php-xml php-xmlrpc php-zip</span><br></pre></td></tr></table></figure>
<p>安装完后，重启php-fpm使上述插件生效：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart php7.4-fpm.service</span><br></pre></td></tr></table></figure>
<p>注意，php-fpm有不同的版本，我这里是7.4，所以写的是php7.4-fpm.service，若是版本不同自行更改版本号。可以通过如下命令确定php的版本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl status php* | grep fpm.service</span><br></pre></td></tr></table></figure>
<h3 id="下载WordPress"><a class="header-anchor" href="#下载WordPress"></a>下载WordPress</h3>
<p>下载最新版WordPress并复制到/var/www/your_domain下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">curl -LO https://wordpress.org/latest.tar.gz</span><br><span class="line">tar xzvf latest.tar.gz</span><br></pre></td></tr></table></figure>
<p>在复制全部文件到/var/www/your_domain前，先从wordpress给出示例配置文件中复制一份配置文件模板:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php</span><br></pre></td></tr></table></figure>
<p>最后复制全部文件(保留文件权限属性)到/var/www/your_domain：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo cp -a /tmp/wordpress/. /var/www/your_domain</span><br><span class="line">sudo chown -R www-data:www-data /var/www/your_domain</span><br></pre></td></tr></table></figure>
<h3 id="配置Nginx-v2"><a class="header-anchor" href="#配置Nginx-v2"></a>配置Nginx</h3>
<p>建议直接到https://www.digitalocean.com/community/tools/nginx, 在线生配置文件(建议选有wordpress优化的配置)并按提示覆盖到/etc/nginx目录下。</p>
<p>然后，测试配置文件是否有误：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure>
<p>最后，重载Nginx配置文件使之生效：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure>
<h3 id="配置WordPress"><a class="header-anchor" href="#配置WordPress"></a>配置WordPress</h3>
<p>首先，从wordpress秘钥生成接口处获取wordpress安全值：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -s https://api.wordpress.org/secret-key/1.1/salt/</span><br></pre></td></tr></table></figure>
<p>输出内容大概如下：</p>
<blockquote>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;AUTH_KEY&#x27;</span>,         <span class="string">&#x27;1jl/vqfs&lt;XhdXoAPz9 DO NOT COPY THESE VALUES c_j&#123;iwqD^&lt;+c9.k&lt;J@4H&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;SECURE_AUTH_KEY&#x27;</span>,  <span class="string">&#x27;E2N-h2]Dcvp+aS/p7X DO NOT COPY THESE VALUES &#123;Ka(f;rv?Pxf&#125;)CgLi-3&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;LOGGED_IN_KEY&#x27;</span>,    <span class="string">&#x27;W(50,&#123;W^,OPB%PB&lt;JF DO NOT COPY THESE VALUES 2;y&amp;,2m%3]R6DUth[;88&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;NONCE_KEY&#x27;</span>,        <span class="string">&#x27;ll,4UC)7ua+8&lt;!4VM+ DO NOT COPY THESE VALUES #`DXF+[$atzM7 o^-C7g&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;AUTH_SALT&#x27;</span>,        <span class="string">&#x27;koMrurzOA+|L_lG&#125;kf DO NOT COPY THESE VALUES  07VC*Lj*lD&amp;?3w!BT#-&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;SECURE_AUTH_SALT&#x27;</span>, <span class="string">&#x27;p32*p,]z%LZ+pAu:VY DO NOT COPY THESE VALUES C-?y+K0DK_+F|0h&#123;!_xY&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;LOGGED_IN_SALT&#x27;</span>,   <span class="string">&#x27;i^/G2W7!-1H2OQ+t$3 DO NOT COPY THESE VALUES t6**bRVFSD[Hi])-qS`|&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;NONCE_SALT&#x27;</span>,       <span class="string">&#x27;Q6]U:K?j4L%Z]&#125;h^q7 DO NOT COPY THESE VALUES 1% ^qUswWgn+6&amp;xqHN&amp;%&#x27;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>注意，每个人获取到的内容都不同。</p>
<p>然后，开始配置wordpress的配置文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nano /var/www/your_domain/wp-config.php</span><br></pre></td></tr></table></figure>
<p>找到如下内容并用刚才执行curl获取到的内容替换：</p>
<blockquote>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;AUTH_KEY&#x27;</span>,         <span class="string">&#x27;put your unique phrase here&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;SECURE_AUTH_KEY&#x27;</span>,  <span class="string">&#x27;put your unique phrase here&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;LOGGED_IN_KEY&#x27;</span>,    <span class="string">&#x27;put your unique phrase here&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;NONCE_KEY&#x27;</span>,        <span class="string">&#x27;put your unique phrase here&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;AUTH_SALT&#x27;</span>,        <span class="string">&#x27;put your unique phrase here&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;SECURE_AUTH_SALT&#x27;</span>, <span class="string">&#x27;put your unique phrase here&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;LOGGED_IN_SALT&#x27;</span>,   <span class="string">&#x27;put your unique phrase here&#x27;</span>);</span><br><span class="line">&gt;<span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;NONCE_SALT&#x27;</span>,       <span class="string">&#x27;put your unique phrase here&#x27;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>继续查找，修改数据名称，密码：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wordpress&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL database username */</span></span><br><span class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;wordpress_user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL database password */</span></span><br><span class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>此外，还要在这个文件加上两行说明，指定wordpress对文件系统操作方式，禁用连接脚本（不加这个参数的话，使用在digitalocean生成wordpress的nginx配置文件，会使得wordpress后台无法操作），这两行参数可加在任意处。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;FS_METHOD&#x27;</span>, <span class="string">&#x27;direct&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;CONCATENATE_SCRIPTS&#x27;</span>, <span class="literal">false</span> );</span><br></pre></td></tr></table></figure>
<p>最后，保存并退出。</p>
<h3 id="登录WordPress"><a class="header-anchor" href="#登录WordPress"></a>登录WordPress</h3>
<p>到这里，wordpress基本部署完毕，剩下的就是到wordpress的登录页面进行初始化设置了。直接到http://server_domain_or_IP处按提示操作即可。</p>
<p>参考：</p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mariadb-php-lemp-stack-on-debian-10">https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mariadb-php-lemp-stack-on-debian-10</a></p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-lemp-nginx-mariadb-and-php-on-debian-10">https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-lemp-nginx-mariadb-and-php-on-debian-10</a></p>
<p><a href="https://www.linode.com/docs/web-servers/lemp/how-to-install-the-lemp-stack-on-debian-10/">https://www.linode.com/docs/web-servers/lemp/how-to-install-the-lemp-stack-on-debian-10/</a></p>
<p><a href="https://www.tecmint.com/install-lemp-on-debian-10-server/">https://www.tecmint.com/install-lemp-on-debian-10-server/</a></p>
<p><a href="https://www.hostloc.com/thread-750277-1-1.html">https://www.hostloc.com/thread-750277-1-1.html</a></p>
<p><a href="https://gist.github.com/moneal/9859180">https://gist.github.com/moneal/9859180</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>GPG使用教程</title>
    <url>/post/11262/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>GNU Privacy Guard</strong>（<strong>GnuPG</strong>或<strong>GPG</strong>）是一个密码学软件，用于加密、签名通信内容及管理非对称密码学的密钥。其主要特点是非对称加密，即公钥加密，私钥解密；其主要应用于不安全的环境下加密通讯。</p>
<a id="more"></a>
<h3 id="背景知识"><a class="header-anchor" href="#背景知识"></a>背景知识</h3>
<p><a href="https://zh.wikipedia.org/wiki/PGP">PGP - 维基百科</a></p>
<p><a href="https://zh.wikipedia.org/wiki/GnuPG">GnuPG - 维基百科</a></p>
<p><a href="https://www.goanywhere.com/blog/2013/07/18/openpgp-pgp-gpg-difference">OpenPGP, PGP, and GPG: What is the difference?</a></p>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<p>不太熟悉命令行操作的可以使用<code>seahorse</code>作为GUI管理工具，Linux Mint自带该工具，方便平时管理。但它有个缺点导入密钥貌似有bug，导入不了，得出命令行下导入。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update &amp;&amp; sudo apt install gpg seahorse -y</span></span><br></pre></td></tr></table></figure>
<p>如果你用的是Linux Mint的话，可以添加个文件管理插件nemo-seahorse，可以很方便的进行加解密，签名等操作；如果你用的是Ubuntu的话，可以安装seahorse-nautilus，一样的功能。</p>
<h3 id="生成密钥对"><a class="header-anchor" href="#生成密钥对"></a>生成密钥对</h3>
<p>这一步可以在seahorse提供的GUI界面进行，很方便的。打开界面，点击<code>+</code>号，选择添加GPG密钥，填写名称和邮箱，加密方式选RSA，密钥长度设置为4096，过期时间设置为永不过期，点击生成。</p>
<h3 id="校验文件"><a class="header-anchor" href="#校验文件"></a>校验文件</h3>
<p>网站一般会提供源文件和证书文件(.asc)，下面假设文件为file.ext，签名证书为file.ext.asc，文件发布者公钥为signing-key.asc，key id 为3DBDC284</p>
<p>首先，下载文件拥有者的公钥，然后使用 gpg 命令导入公钥到keyring 中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpg --import signing-key.asc</span><br></pre></td></tr></table></figure>
<p>如果，没下载有拥有者的公钥，那么，先执行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">gpg</span> <span class="selector-tag">--verify</span> <span class="selector-tag">file</span><span class="selector-class">.ext</span><span class="selector-class">.asc</span></span><br></pre></td></tr></table></figure>
<p>这时候会得到一个key id，搜索并导入这个key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpg --search-keys 3DBDC284</span><br></pre></td></tr></table></figure>
<p>其次，验证公钥</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gpg</span> --fingerprint <span class="number">3</span>DBDC<span class="number">284</span></span><br></pre></td></tr></table></figure>
<p>3DBDC284是导入公钥时得到的Key ID，每个Key都不同。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpg --verify file.ext.asc file.ext</span><br></pre></td></tr></table></figure>
<h3 id="数据备份"><a class="header-anchor" href="#数据备份"></a>数据备份</h3>
<p>查看当前私钥，并决定备份那一个</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-secret-keys --keyid-format LONG</span></span><br><span class="line">/home/chan/.gnupg/pubring.kbx</span><br><span class="line">-----------------------------</span><br><span class="line">sec   rsa4096/22D0F3ED7D6E2D2D 2021-01-28 [SC]</span><br><span class="line">      7363D87748565E3109B2DEDF22D0F3ED7D6E2D2D</span><br><span class="line">uid                 [ 绝对 ] yulinchan &lt;chenyulin775@gmail.com&gt;</span><br><span class="line">ssb   rsa4096/46314546EE607336 2021-01-28 [E]</span><br></pre></td></tr></table></figure>
<p>导出GPG私钥（私钥已经包含公钥）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg -o private.gpg --export-options backup --export-secret-keys chenyulin775@gmail.com</span></span><br></pre></td></tr></table></figure>
<p>执行该命令后，在当前目录下生成private.gpg备份私钥。该命令中的<code>--export-options backup</code>参数，可以确保导出恢复GPG密钥所需的所有数据。</p>
<p>如果你还设置有口令保护私钥的话，还会弹出一个提示窗口让你输入口令，才能完成导出。导出完成后，即可把private.gpg放到一个安全的地方保存起来。</p>
<h3 id="数据恢复"><a class="header-anchor" href="#数据恢复"></a>数据恢复</h3>
<p>导入私钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --import-options restore --import private.gpg</span></span><br></pre></td></tr></table></figure>
<p>执行该命令后，GPG将从当前目录下的private.gpg导入密钥（这里的私钥已经包含公钥）。参数<code>--import-options restore</code>确保GPG完整恢复密钥。</p>
<p>同样的，如果私钥设置有保护口令的话，还会弹出一个提示窗口让你输入口令，才能完成导入。导入密钥后还要设置密钥的信任状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --edit-key chris@seagul.co.uk trust quit</span></span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="https://www.ruanyifeng.com/blog/2013/07/gpg.html">https://www.ruanyifeng.com/blog/2013/07/gpg.html</a></p>
<p><a href="https://blog.chaos.run/dreams/using-gpg">https://blog.chaos.run/dreams/using-gpg</a></p>
<p><a href="https://gist.github.com/chrisroos/1205934">https://gist.github.com/chrisroos/1205934</a></p>
<p><a href="https://www.jwillikers.com/backup-and-restore-a-gpg-key">https://www.jwillikers.com/backup-and-restore-a-gpg-key</a></p>
<p><a href="https://serverfault.com/questions/86048/gpg-what-do-i-need-to-backup">https://serverfault.com/questions/86048/gpg-what-do-i-need-to-backup</a></p>
<p><a href="https://blog.chaos.run/dreams/gpg-verify/">https://blog.chaos.run/dreams/gpg-verify/</a></p>
<p><a href="https://www.cnblogs.com/shenfeng/p/gpgverify.html">https://www.cnblogs.com/shenfeng/p/gpgverify.html</a></p>
]]></content>
      <tags>
        <tag>GPG</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用教程</title>
    <url>/post/8579/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Git是一个分布式版本控制系统，可以记录仓库中所有文件的改动，每一个提交的改动成为一个版本（commit），可以据此进行版本的切换（通过移动HEAD指向不同的commit实现）等操作。</p>
<a id="more"></a>
<h2 id="本地仓库"><a class="header-anchor" href="#本地仓库"></a>本地仓库</h2>
<h3 id="设置基本信息"><a class="header-anchor" href="#设置基本信息"></a>设置基本信息</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">&quot;&lt;用户名&gt;&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">&quot;&lt;电子邮件&gt;&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global color.ui auto</span></span><br></pre></td></tr></table></figure>
<h3 id="初始化Git仓库"><a class="header-anchor" href="#初始化Git仓库"></a>初始化Git仓库</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure>
<p>可以初始化一个空文件夹作为Git仓库，也可以初始化一个已经存在文件的文件夹作为Git仓库。执行完<code>git init</code> 后，当前文件夹下会出现一个<code>.git</code>文件夹（版本库），<code>.git</code> 文件夹里存储这个Git仓库的所有信息，包括版本变更等信息。</p>
<h3 id="查看Git仓库的状态"><a class="header-anchor" href="#查看Git仓库的状态"></a>查看Git仓库的状态</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br></pre></td></tr></table></figure>
<h3 id="提交文件"><a class="header-anchor" href="#提交文件"></a>提交文件</h3>
<p>提交文件前，先要要把文件添加到暂存区（stage）。可以通过<code>add</code> 指令将文件添加至暂存区，<code>add</code> 指令可一次添加多个文件，文件名用空格分隔。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add &lt;file&gt;..</span></span><br></pre></td></tr></table></figure>
<p>还可以通过指定<code>.</code>参数，一次添加所有文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br></pre></td></tr></table></figure>
<p><img src="https://www.liaoxuefeng.com/files/attachments/919020037470528/0" alt="工作区和版本库"></p>
<p>文件添加到暂存区后，可以通过<code>commit</code>指令将文件提交到当前分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;first commit&quot;</span></span></span><br></pre></td></tr></table></figure>
<p>其中，<code>-m</code>表示提交说明，即本例中的 “first commit”。</p>
<h3 id="创建分支"><a class="header-anchor" href="#创建分支"></a>创建分支</h3>
<p>创建一个新分支并切换到该分支</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">branch </span><span class="keyword">bugfix</span></span><br><span class="line"><span class="keyword">git </span>checkout <span class="keyword">bugfix</span></span><br></pre></td></tr></table></figure>
<p>还可以直接合并简化成一条命令</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b</span> bugfix</span><br></pre></td></tr></table></figure>
<h3 id="合并分支"><a class="header-anchor" href="#合并分支"></a>合并分支</h3>
<h4 id="merge"><a class="header-anchor" href="#merge"></a>merge</h4>
<p>将HEAD切换回master(HEAD就是指向commit的指针，可通过checkout更改它指向的位置)，然后执行合并分支，将会在master之后产生一个同时指向bugfix和master的commit，然后master移动至该commit，合并完成。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge bugfix</span><br></pre></td></tr></table></figure>
<h4 id="rebase"><a class="header-anchor" href="#rebase"></a>rebase</h4>
<p>rebase可将两分支合并表示为一条时间线，比较直观。将HEAD切换到bugfix，然后执行合并分支，这将会</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout bugfix</span><br></pre></td></tr></table></figure>
<p><img src="http://p.ananas.chaoxing.com/star3/origin/b644568a48e37c6c63dac789e0715c55.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase main</span><br></pre></td></tr></table></figure>
<p><img src="http://p.ananas.chaoxing.com/star3/origin/4e4432d35a0cb263a1371420e73ede78.png" alt=""></p>
<h3 id="查看日志"><a class="header-anchor" href="#查看日志"></a>查看日志</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br></pre></td></tr></table></figure>
<h3 id="版本回退"><a class="header-anchor" href="#版本回退"></a>版本回退</h3>
<p>版本回退可以先通过git log 参看commit的时间线，确定回退到那个commit，确定后执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard 360dcc9 #此为commit id 可不必写全</span><br></pre></td></tr></table></figure>
<p>要是平时commit时没有写有关键的说明，可能你不知道要回退到哪个版本合适（所以说平时提交commit时一定要注意这一点），这时候可以一个个commit往后找，先签出源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout 360dcc9</span><br></pre></td></tr></table></figure>
<p>查看代码是不是符合你想回退的版本，如果不是，则继续签出下一个；如果是的话，先签出回当前分支代码，假设当前分支为master</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>
<p>再进行回退</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard 360dcc9</span><br></pre></td></tr></table></figure>
<h2 id="远程仓库"><a class="header-anchor" href="#远程仓库"></a>远程仓库</h2>
<h3 id="关联远程仓库"><a class="header-anchor" href="#关联远程仓库"></a>关联远程仓库</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add &lt;name&gt; &lt;url&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中，<code>&lt;name&gt;</code> 是我个远程仓库设置的别名，用来替代较长的仓库地址<code>url</code>，<code>&lt;name&gt;</code>一般设置为<code>origin</code>。执行推送或者拉取的时候，如果省略了远程数据库的名称，则默认使用名为”origin“的远程数据库。因此一般都会把远程数据库命名为origin。</p>
<h3 id="推送到远程仓库"><a class="header-anchor" href="#推送到远程仓库"></a>推送到远程仓库</h3>
<p>使用push命令向数据库推送更改内容。<code>&lt;repository&gt;</code>处输入目标地址，如果只有一个追踪分支，<code>&lt;repository&gt;</code>缺省；<code>&lt;refspec&gt;</code>处指定推送的分支，缺省则默认等前分支。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push &lt;repository&gt; &lt;refspec&gt;...</span></span><br></pre></td></tr></table></figure>
<p>如果当前分支与多个主机存在追踪关系，那么这个时候**-u选项（–set-upstream）**会指定一个默认主机，这样后面就可以不加任何参数使用git push。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></table></figure>
<p>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。</p>
<h3 id="从远程仓库拉取更新"><a class="header-anchor" href="#从远程仓库拉取更新"></a>从远程仓库拉取更新</h3>
<p>使用pull指令进行拉取操作。省略数据库名称的话，会在名为origin的数据库进行pull。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull &lt;repository&gt; &lt;refspec&gt;...</span></span><br></pre></td></tr></table></figure>
<h3 id="整合修改记录"><a class="header-anchor" href="#整合修改记录"></a>整合修改记录</h3>
<p>在执行pull之后，进行下一次push之前，如果其他人进行了推送内容到远程数据库的话，那么你的push将被拒绝。这种情况下，在读取别人push的变更并进行合并操作之前，你的push都将被拒绝。这是因为，如果不进行合并就试图覆盖已有的变更记录的话，其他人push的变更就会丢失。</p>
<p>执行合并即可自动合并Git修改的部分。但是，也存在无法自动合并的情况。</p>
<p>如果远程数据库和本地数据库的同一个地方都发生了修改的情况下，因为无法自动判断要选用哪一个修改，所以就会发生冲突。</p>
<p><img src="https://backlog.com/git-tutorial/cn/img/post/intro/capture_intro5_1_3.png" alt="冲突"></p>
<p>==分割线上方是本地数据库的内容, 下方是远程数据库的内容。</p>
<p>这时候，有冲突的文件会被插入如上图的标注，需要手动修正冲突，即修改本地文件的冲突部分，然后 <code>git add --all &amp;&amp; git commit</code></p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<p><a href="https://git-scm.com/docs/gittutorial">https://git-scm.com/docs/gittutorial</a></p>
<p><a href="https://try.github.io/">https://try.github.io/</a></p>
<p><a href="https://guides.github.com/introduction/git-handbook/">https://guides.github.com/introduction/git-handbook/</a></p>
<p><a href="https://training.github.com/downloads/zh_CN/github-git-cheat-sheet/">https://training.github.com/downloads/zh_CN/github-git-cheat-sheet/</a></p>
<p><a href="https://backlog.com/git-tutorial">https://backlog.com/git-tutorial</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰-Git教程</a></p>
<p><a href="https://www.zhihu.com/question/20019419">git push 的 -u 参数具体适合含义？</a></p>
<p><a href="https://gist.github.com/zxhfighter/62847a087a2a8031fbdf">如何给开源项目贡献代码</a></p>
<p><a href="https://mvthanoshan.medium.com/ubuntu-a-beginners-guide-to-git-github-44a2d2fda0b8">ubuntu-a-beginners-guide-to-git-github</a></p>
<p><a href="https://mvthanoshan.medium.com/how-to-make-your-first-pull-request-on-github-9aefca5cc837">How to make your first pull request on GitHub</a></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Google搜索技巧</title>
    <url>/post/55364/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>Google搜索</strong>是由Google公司推出的一个互联网搜索引擎，它是互联网上最大、影响最广泛的搜索引擎。Google每日透过不同的服务，处理来自世界各地超过30亿次的查询。能熟练掌握一些相关的搜索技巧，会让你事半功倍。</p>
<a id="more"></a>
<p>经常使用VPN的朋友，可能会被Google重定向至不同的地区，要享受原汁原味的Google Search可以点击  <a href="https://www.google.com/ncr">https://www.google.com/ncr</a> 以禁止国别转跳。</p>
<h2 id="使用“与或非”逻辑词"><a class="header-anchor" href="#使用“与或非”逻辑词"></a>使用“与或非”逻辑词</h2>
<ol>
<li>与，使用空格隔开多个关键词。比如<code>linux debian</code>，返回包含这两个关键词的搜索结果。</li>
<li>或，使用<code>OR</code>连接多个关键词。比如<code>linux OR redhat</code>，返回仅包含linux或者仅包含redhat或者二者都包含的搜索结果，即返回的结果为兼或。</li>
<li>非，使用<code>-</code>连接指定关键词。比如`linux -redhat，返回包含linux关键词但排除redhat关键词的搜索结果。</li>
</ol>
<p>这些以上这三种用法还可以组合使用，已达到更精确的限制范围。</p>
<h2 id="精确搜索和近似搜索"><a class="header-anchor" href="#精确搜索和近似搜索"></a>精确搜索和近似搜索</h2>
<ol>
<li>使用<code>&quot;&quot;</code>英文双引号可实现精确搜索，即搜索结果必需完整包含英文双引号内的关键词。比如<code>&quot;install youtube-dl&quot;</code>,返回结果都是完整包含这词组，包括空格。值得注意的是，搜索结果是忽略大小写的。</li>
<li>使用<code>~</code>符号修饰关键词可实现近义词搜索，即搜索结果包含关键词本身及其近义词。比如<code>linux mint ~great</code>,返回结果包含<code>linux mint great</code>和<code>linux mint good</code>等。</li>
<li>可使用<code>*</code>通配符来代替关键词中不确定的部分。比如<code>promgram thin*</code>，会有<code>promgram think</code>的搜索结果返回。</li>
<li>使用<code>..</code>连接两个数字，表示位于两个数字之间的范围。比如<code>British prime minister 1920..1950</code>，返回结果中包含<code>1940</code>，<code>1927</code>等关键词。</li>
</ol>
<h2 id="使用操作算符"><a class="header-anchor" href="#使用操作算符"></a>使用操作算符</h2>
<p>所有的这些输入的操作算符都是以相同的方式工作的，将这些算符作为你搜索请求的一部分输入，再将变量紧接在这些输入的操作算符之后的冒号之后（而不是空格），就像这样：<code>操作算符:变量</code></p>
<table>
<thead>
<tr>
<th><strong>算符</strong></th>
<th><strong>用途</strong></th>
<th>用法</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>filetype:</strong></td>
<td>限制所搜索的文件一个特定的格式</td>
<td><strong>filetype:extension</strong></td>
</tr>
<tr>
<td><strong>inanchor:</strong></td>
<td>限制搜索的词语是网页中链接内包含的关键词</td>
<td><strong>inanchor:keyword</strong></td>
</tr>
<tr>
<td><strong>intext:</strong></td>
<td>限制搜索的词语是网页内文包含的关键词</td>
<td><strong>intext:keyword</strong></td>
</tr>
<tr>
<td><strong>intitle:</strong></td>
<td>限制搜索的词语是网页标题中包含的关键词</td>
<td><strong>intitle:keyword</strong></td>
</tr>
<tr>
<td><strong>inurl:</strong></td>
<td>限制搜索的网页的地址</td>
<td><strong>inurl:keyword</strong></td>
</tr>
<tr>
<td><strong>site:</strong></td>
<td>限制所进行的搜索在指定的域名或网站内</td>
<td><strong>site:domain</strong></td>
</tr>
<tr>
<td><strong>related:</strong></td>
<td>限制所进行的搜索在与指定的网站相似的网站</td>
<td><strong>related:domain/url</strong></td>
</tr>
<tr>
<td><strong>link:</strong></td>
<td>返回所有链接到某个URL地址的网页</td>
<td><strong>link:url</strong></td>
</tr>
<tr>
<td><strong>cache:</strong></td>
<td>返回GOOGLE服务器上某页面的快照</td>
<td><strong>cache:url</strong></td>
</tr>
<tr>
<td><strong>info:</strong></td>
<td>显示与某链接相关的一系列搜寻，提供cache 、link 、related和完全包含该链接的网页的功能。</td>
<td><strong>info:url</strong></td>
</tr>
</tbody>
</table>
<h2 id="其他用法"><a class="header-anchor" href="#其他用法"></a>其他用法</h2>
<ol>
<li>用作词典。<code>define:某单词</code></li>
<li>用作计算器。<code>((1+2)*3)^2</code></li>
</ol>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<p><a href="https://www.williamlong.info/archives/728.html">https://www.williamlong.info/archives/728.html</a></p>
<p><a href="https://www.imooc.com/article/4071">https://www.imooc.com/article/4071</a></p>
<p><a href="http://ecaaser3.ecaa.ntu.edu.tw/weifang/cea/%E5%96%84%E7%94%A8GOOGLE.htm">http://ecaaser3.ecaa.ntu.edu.tw/weifang/cea/善用GOOGLE.htm</a></p>
<p><a href="https://www.pcmag.com/how-to/23-google-search-tips-youll-want-to-learn">https://www.pcmag.com/how-to/23-google-search-tips-youll-want-to-learn</a></p>
]]></content>
      <tags>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客折腾小记</title>
    <url>/post/52996/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Hexo迁移到Linux"><a class="header-anchor" href="#Hexo迁移到Linux"></a>Hexo迁移到Linux</h2>
<p>首先，要在Github上设置有本地Linux的SSH公钥。具体设置过程见Github官方教程，大体操作如下,先生成SSH密钥对</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ssh-add ~/.ssh/id_ed25519</span></span><br></pre></td></tr></table></figure>
<p>并将生成的公钥复制保存到Github的SSH密钥设置里</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install xclip</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Downloads and installs xclip. If you don<span class="string">&#x27;t have `apt-get`, you might need to use another installer (like `yum`)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> xclip -selection clipboard &lt; ~/.ssh/id_ed25519.pub</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Copies the contents of the id_ed25519.pub file to your clipboard</span></span><br></pre></td></tr></table></figure>
<p>其次，还要在Linux上安装nodejs, npm和hexo-cli。用apt默认安装的nodejs版本较低，并不能满足Hexo-cli的依赖包，所以要添加额外源进行安装（注意，要安装12.x的，14.x部署到github会报错）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo bash -</span><br></pre></td></tr></table></figure>
<p>安装完nodejs后还要安装npm和hexo-cli</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install npm -y</span><br><span class="line">sudo npm install hexo-cli</span><br></pre></td></tr></table></figure>
<p>最后，将Hexo文件夹复制（或移动）到Linux操作系统可访问的文件夹下，并在该文件夹下执行如下命令即可</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<h2 id="主题升级-更换"><a class="header-anchor" href="#主题升级-更换"></a>主题升级/更换</h2>
<ol>
<li>下载最新的主题：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>修改主题文件夹下的配置文件：<br>
利用文本比对工具，比对新旧主题文件夹下的_config.yml配置文件，并按需修改。<br>
复制旧主题文件夹的source/images下的图像到新主题对应的文件夹下。<br>
修改新主题文件夹的languages下的翻译文件zh-CN.yml: 添加对应的中文翻译。</p>
</li>
<li>
<p>修改Hexo的_config.yml配置文件，切换主题为新下载的主题</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">theme</span>: next<span class="number">8</span>.<span class="number">0</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>本地调试</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">hexo g <span class="meta">&amp;&amp; hexo s</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="DIY主题布局与样式"><a class="header-anchor" href="#DIY主题布局与样式"></a>DIY主题布局与样式</h2>
<p>主题的布局结构文件放在layout文件夹下；而主题的样式文件放在source/css下，其中的_variables里存放着各中css样式的参数设定，主要修改这里即可。</p>
<p>一般要配合开发者调试工具进行样式修改，可先定位css的类名，再在主题文件夹下查找目标类名字符串</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -rn &quot;class_name&quot; *</span><br></pre></td></tr></table></figure>
<h2 id="参考："><a class="header-anchor" href="#参考："></a>参考：</h2>
<p><a href="https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Generating a new SSH key and adding it to the ssh-agent</a></p>
<p><a href="https://whjkm.github.io/2018/07/17/Hexo%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E5%92%8CNext%E4%B8%BB%E9%A2%98%E5%8D%87%E7%BA%A7%E4%B9%8B%E5%9D%91/">Hexo版本升级和Next主题升级之坑</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA学习笔记</title>
    <url>/post/48651/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>java俺也只是略有了解，不常用，做个笔记备忘，说不定以后要用到。</p>
<a id="more"></a>
<h1 id="JAVA基本语法"><a class="header-anchor" href="#JAVA基本语法"></a>JAVA基本语法</h1>
<h2 id="输入输出"><a class="header-anchor" href="#输入输出"></a>输入输出</h2>
<ul>
<li>输入：</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Practice</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Scanner i = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">         a = i.nextInt();/小数的话f = i.nextFloat();双精度则i.nextDouble()</span><br><span class="line">        <span class="keyword">int</span> b = i.nextInt();</span><br><span class="line">        System.out.<span class="built_in">println</span>(a*b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若要输入字符串则直接用i.next() or i.nxetLine()</p>
  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">  next():</span><br><span class="line"><span class="number">1.</span>一定要读取到有效字符后才可以结束输入。</span><br><span class="line"><span class="number">2.</span>对输入有效字符之前遇到的空白，next()方法会自动将其去掉。</span><br><span class="line"><span class="number">3.</span>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</span><br><span class="line"><span class="number">4.</span>next()不能得到带有空格的字符串。</span><br><span class="line"></span><br><span class="line">nextLine()：</span><br><span class="line"><span class="number">1.</span>以Enter为结束符,nextLine()方法返回的是输入回车之前的所有字符。  </span><br><span class="line"><span class="number">2.</span>可以获得空白。</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>输出:<br>
(1) print将它的参数显示在命令窗口，并将输出光标定位在所显示的最后一个字符之后。<br>
(2) println 将它的参数显示在命令窗口，并在结尾加上换行符，将输出光标定位在下一行的开始。<br>
(3)printf 是格式化输出的形式。(和python，matlab的%格式化输出差不多)<br>
<code>System.out.println(&quot;Hello World&quot;) </code><br>
(4)输出个量，用+号相连。字符串必须用“ ”</p>
<hr>
<h2 id="基本运算"><a class="header-anchor" href="#基本运算"></a>基本运算</h2>
</li>
<li>
<p>算术运算符：+ - * / %（求余）<em><strong>操作数是都是整数时，相除结果也为整数</strong></em></p>
</li>
<li>
<p>数学函数：Math,使用时加上<code>Math.</code>即可，如<code>Math.sin(Math.PI)</code></p>
<table>
<thead>
<tr>
<th>常用函数</th>
<th>三角函数</th>
<th>指数函数</th>
<th>取整函数</th>
</tr>
</thead>
<tbody>
<tr>
<td>min(x)</td>
<td>sin®、asin®</td>
<td>exp(x) e的x次方</td>
<td>ceil(x)</td>
</tr>
<tr>
<td>max(x)</td>
<td>cos®、acos®</td>
<td>log(x)自然对数、log10(x)以10为底的对数</td>
<td>floor(x)</td>
</tr>
<tr>
<td>abs(x)</td>
<td>tan®、atan®</td>
<td>pow(x,y)</td>
<td>rint(x)</td>
</tr>
<tr>
<td>random(x)</td>
<td>toDegree®、toRadians(d)</td>
<td>sqrt(x)</td>
<td>round(x)</td>
</tr>
</tbody>
</table>
<p>另外，<code>PI,E</code>分别表示π，e。</p>
</li>
<li>
<p>关系运算符:==,!=,&lt;,&gt;,&lt;=,&gt;=</p>
</li>
<li>
<p>逻辑运算符:&amp;&amp;,| |,！ (与，或，非)</p>
</li>
<li>
<p>赋值运算符:</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>简单的赋值运算符，将右操作数的值赋给左侧操作数</td>
<td>C = A + B将把A + B得到的值赋给C</td>
</tr>
<tr>
<td>+ =</td>
<td>加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>
<td>C + = A等价于C</td>
</tr>
<tr>
<td>- =</td>
<td>减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>
<td>C - = A等价于C = C -A</td>
</tr>
<tr>
<td>* =</td>
<td>乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>
<td>C * = A等价于C = C * A</td>
</tr>
<tr>
<td>/=</td>
<td>除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>
<td>C / = A等价于C = C / A</td>
</tr>
<tr>
<td>（％）=</td>
<td>取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>
<td>C％= A等价于C = C％A</td>
</tr>
<tr>
<td>&lt;&lt; =</td>
<td>左移位赋值运算符</td>
<td>C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td>
</tr>
<tr>
<td>&gt;&gt; =</td>
<td>右移位赋值运算符</td>
<td>C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td>
</tr>
<tr>
<td>＆=</td>
<td>按位与赋值运算符</td>
<td>C＆= 2等价于C = C＆2</td>
</tr>
<tr>
<td>^ =</td>
<td>按位异或赋值操作符</td>
<td>C ^ = 2等价于C = C ^ 2</td>
</tr>
<tr>
<td>|=</td>
<td>按位或赋值操作符</td>
<td>C \</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>自增：<br>
(1) 前缀自增自减法(<ins>a,–a): 先进行自增或者自减运算，再进行表达式运算。<br>
(2) 后缀自增自减法(a</ins>,a–): 先进行表达式运算，再进行自增或者自减运算</p>
<hr>
</li>
</ul>
<h2 id="基本语句"><a class="header-anchor" href="#基本语句"></a>基本语句</h2>
<h3 id="循环语句"><a class="header-anchor" href="#循环语句"></a>循环语句</h3>
<ul>
<li>while 循环<br>
<code>while( 布尔表达式 ) &#123; //循环内容 &#125;</code></li>
<li>do…while 循环<br>
<code>do &#123;      //代码语句 &#125;while(布尔表达式);</code></li>
<li>for循环<br>
<code>for(初始化; 布尔表达式; 更新) &#123;   //代码语句 &#125;</code></li>
<li>增强 for 循环(迭代循环)<br>
<code>for(声明语句 : 表达式) &#123;  //代码句子 &#125;</code></li>
<li>break 关键字:终止该循环语句</li>
<li>continue 关键字：跳过本次迭代，转跳至下一次迭代</li>
</ul>
<h3 id="判断语句"><a class="header-anchor" href="#判断语句"></a>判断语句</h3>
<ul>
<li>
<p><code>if(布尔表达式) &#123;  //如果布尔表达式为true将执行的语句 &#125;</code></p>
</li>
<li>
<p><code>f(布尔表达式)&#123;  //如果布尔表达式的值为true &#125;else&#123;  //如果布尔表达式的值为false &#125;</code></p>
</li>
<li>
  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;<span class="regexp">//</span>如果布尔表达式 <span class="number">1</span>的值为true执行代码&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>)&#123;<span class="regexp">//</span>如果布尔表达式 <span class="number">2</span>的值为true执行代码&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">3</span>)&#123;<span class="regexp">//</span>如果布尔表达式 <span class="number">3</span>的值为true执行代码&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="regexp">//</span>如果以上布尔表达式都不为true执行代码&#125; </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>嵌套的 if…else 语句</p>
</li>
</ul>
<p>当为判断条件后只有一句执行语句时，可不加{ }</p>
<h3 id="switch-case-语句"><a class="header-anchor" href="#switch-case-语句"></a>switch case 语句</h3>
 <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"> switch(expression)&#123;</span><br><span class="line">    case value :</span><br><span class="line">       <span class="regexp">//</span>语句</span><br><span class="line">       <span class="keyword">break</span>; <span class="regexp">//</span>可选</span><br><span class="line">    case value :</span><br><span class="line">       <span class="regexp">//</span>语句</span><br><span class="line">       <span class="keyword">break</span>; <span class="regexp">//</span>可选</span><br><span class="line">    <span class="regexp">//</span>你可以有任意数量的case语句</span><br><span class="line">    default : <span class="regexp">//</span>可选， 无case匹配时默认执行</span><br><span class="line">       <span class="regexp">//</span>语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(1) switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。<br>
(2) 当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</p>
<h2 id="数据类型"><a class="header-anchor" href="#数据类型"></a>数据类型</h2>
<h4 id="整数"><a class="header-anchor" href="#整数"></a>整数</h4>
<ul>
<li>byte (8位)</li>
<li>short (16位)</li>
<li>int (32位)</li>
<li>long (64位)</li>
</ul>
<h4 id="浮点数"><a class="header-anchor" href="#浮点数"></a>浮点数</h4>
<ul>
<li>float 单精度（32位）</li>
<li>double 双精度（64位）
<ul>
<li>科学计数法110.23=1.1023e4，0.2234=2.234e-1</li>
</ul>
</li>
</ul>
<p><em><strong>括号里的位数代表它占存储的大小</strong></em></p>
<h4 id="字符、字符串-char-String"><a class="header-anchor" href="#字符、字符串-char-String"></a>字符、字符串(char/String)</h4>
<table>
<thead>
<tr>
<th>字符串方法</th>
<th>字符串比较</th>
<th style="text-align:left">字符串、数值互转</th>
</tr>
</thead>
<tbody>
<tr>
<td>length()</td>
<td>equals(s1)/equalsIgnoreCase(s1)</td>
<td style="text-align:left">Double.parseDouble(s1)</td>
</tr>
<tr>
<td>trim() 去掉两边空白字符</td>
<td>compareTo(s1)/compareIgnoreCase(s1)</td>
<td style="text-align:left">Integer.parseInt(s1)</td>
</tr>
<tr>
<td>concat(s1) 连接字符串，相当于‘+’</td>
<td>startsWith(s1)/endsWith(s1)</td>
<td style="text-align:left">String s = num + “” 转字符串</td>
</tr>
<tr>
<td>charAt(index) 索引指定位置的字符</td>
<td>contains(s1)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>toUpperCase()、toLowerCase()</td>
<td>substring(start-index,stop-index)切片</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p>索引字符串所在位置<code>indexOf(ch,form-index)</code></p>
<h4 id="一维数组"><a class="header-anchor" href="#一维数组"></a>一维数组</h4>
<p><strong>一个储存着相同类型数据的变量的列表</strong>所以声明变量类型时在其后加<code>[]</code>，如<code>double[]</code></p>
<ul>
<li>
<p>声明变量数组：<code>double[] mylist</code></p>
</li>
<li>
<p>创建数组：<code>double[] mylist = new double[10]</code>创建具有10个双精度数据的空数组，当然声明和创建可以一块做，就像变量一样<code>double[] mylist = new double[10] </code></p>
</li>
<li>
<p>数组赋值（初始化）:<code>mylist[0]=1;mylist[1]=2;...;mylist[9]=10</code></p>
</li>
<li>
<p>数组初始化语法：<code>double[] mylist = &#123;1,2,3,4,5,6,7,8,9&#125;</code>更简洁，不用加个new</p>
</li>
<li>
<p>数组长度：<code>mylist.length</code></p>
</li>
<li>
<p>foreach循环：<code>for (double e: mylist)&#123;System.out.println(e);&#125;</code>步长只能为1，即历遍数组</p>
</li>
</ul>
<h4 id="二维数组"><a class="header-anchor" href="#二维数组"></a>二维数组</h4>
<ul>
<li>
<p>​	声明，创建，初始化,赋值，索引以及处理和一维数组一样，把<code>[]</code>改为<code>[][]</code>即可</p>
</li>
<li>
<p>初始化语法:</p>
<pre><code>  ```double[][] matrix = &#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;&#125;```
</code></pre>
</li>
</ul>
<h4 id="多维数组"><a class="header-anchor" href="#多维数组"></a>多维数组</h4>
<ul>
<li></li>
</ul>
<h2 id="方法"><a class="header-anchor" href="#方法"></a>方法</h2>
<ol>
<li>
<p>定义方法：</p>
<p>修饰符  返回值类型   方法名(参数列表){ 方法体 }</p>
<p><code>public static int max(int num1,int num2)&#123;//执行语句&#125;</code></p>
</li>
<li>
<p>调用方法</p>
<p>方法名(参数列表)</p>
<p><code>max(2,3)</code></p>
</li>
<li>
<p>注意点</p>
<ul>
<li>void表示无返回值类型</li>
<li>形参与实参</li>
</ul>
</li>
</ol>
<h2 id="其他注意事项"><a class="header-anchor" href="#其他注意事项"></a>其他注意事项</h2>
<ul>
<li>
<p>使用变量要先声明变量类型<br>
<code>type identifier [ = value][, identifier [= value] ...] ;</code><br>
格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。</p>
</li>
<li>
<p>声明常量:<code> final datatype name</code></p>
</li>
<li>
<p>Java大小写敏感，方法名第一个单词小写往后的单词首字母大写；常量名全大写；类名首字母大写</p>
</li>
<li>
<p>特殊字符</p>
<table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>{ }</td>
<td style="text-align:center">语句块</td>
<td>循环体中，若执行语句只有一句，可省略{ }</td>
</tr>
<tr>
<td>（）</td>
<td style="text-align:center">和方法一起用</td>
<td>{ }do while();      for( ){}         while( ){ }   注意do while后的 ‘ ; ’</td>
</tr>
<tr>
<td>[ ]</td>
<td style="text-align:center">数组</td>
<td>声明变量类型在类型后加[ ],初始化赋值用{1,23,3,4}的形式，表示大小用[10]</td>
</tr>
<tr>
<td>‘ ’</td>
<td style="text-align:center">字符</td>
<td>char</td>
</tr>
<tr>
<td>“ ”</td>
<td style="text-align:center">字符串</td>
<td>String 变量类型中唯一一个大写开头的(其实他是java的一个内置类)</td>
</tr>
<tr>
<td>//</td>
<td style="text-align:center">行注释</td>
<td>/ 转义字符，\n表示换行，//表示注释行，/*  block */表示注释块</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>| ；   | 标识语句结束 | 每一句结束后都要有，import也不例外                           |</p>
]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下启用命令行代理</title>
    <url>/post/46285/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>首先是配置一个科学上网的环境，可以通过安装目前比较流行的V2ray或ShadowsocksR来实现。其次，需要让命令行中执行的程序的流量走代理通道，这个可以通过安装proxychains来实现。最后，开始享受你的愉快探索之旅吧！</p>
<a id="more"></a>
<h1 id="科学上网"><a class="header-anchor" href="#科学上网"></a>科学上网</h1>
<h2 id="V2ray"><a class="header-anchor" href="#V2ray"></a>V2ray</h2>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<p>v2ray是不区分客户端和服务端版本的，安装v2ray后，我们通过修改配置文件的inbounds和outbounds规则，让它既可以做服务端也可以做客户端。</p>
<p>安装方法多种多样，这里介绍通过官方提供的脚本一键式安装的方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://install.direct/go.sh</span><br><span class="line">sudo bash go.sh</span><br></pre></td></tr></table></figure>
<p>如果你的操作系统是debian/ubuntu的话，这个脚本默认还会设置开机自启v2ray服务。</p>
<p>开启和关闭v2ray的简单指令如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">service v2ray start</span><br><span class="line">service v2ray stop</span><br><span class="line">service v2ray restart</span><br><span class="line">service v2ray reload</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a class="header-anchor" href="#配置"></a>配置</h3>
<p>v2ray的配置文件是 <code>/etc/v2ray/config.json</code> , 可以参照网上的教程来修改这个配置文件，当然也有那种自动生成配置文件的在线工具，如果你不想那么麻烦的话，把自己在windows下用v2rayN图形化客户端生成的配置文件拿过去直接用也是没有问题的。</p>
<h2 id="ShadowsocksR"><a class="header-anchor" href="#ShadowsocksR"></a>ShadowsocksR</h2>
<h3 id="安装-v2"><a class="header-anchor" href="#安装-v2"></a>安装</h3>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/shadowsocksr/</span>shadowsocksr.git</span><br></pre></td></tr></table></figure>
<p>或者<a href="https://github.com/shadowsocksrr/shadowsocksr/releases">点击这里</a> 下载打包好的文件,然后解压。</p>
<p>最后，初始化配置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">bash</span> <span class="selector-tag">initcfg</span><span class="selector-class">.sh</span></span><br></pre></td></tr></table></figure>
<h3 id="配置并启动"><a class="header-anchor" href="#配置并启动"></a>配置并启动</h3>
<p>找到<code>user-config.json</code> 并修改配置，主要修改以下内容</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;server&quot;: &quot;ssr.xxx.com&quot;,</span><br><span class="line">&quot;server_port&quot;: 443,</span><br><span class="line">&quot;local_address&quot;: &quot;127.0.0.1&quot;, </span><br><span class="line">&quot;local_port&quot;: 1081, </span><br><span class="line">&quot;password&quot;: &quot;xxxx&quot;,</span><br><span class="line">&quot;method&quot;: &quot;chacha20-ietf&quot;,</span><br><span class="line">&quot;protocol&quot;: &quot;auth_aes128_md5&quot;,</span><br><span class="line">&quot;protocol_param&quot;: &quot;145487:vlQz38&quot;,</span><br><span class="line">&quot;obfs&quot;: &quot;tls1.2_ticket_auth&quot;,</span><br><span class="line">&quot;obfs_param&quot;: &quot;update.microsoft.com&quot;,</span><br></pre></td></tr></table></figure>
<p>然后，切换到shadowsocks目录，会发现一个local.py文件，在这个目录下执行:</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">python <span class="built_in">local</span>.py -d <span class="built_in">start</span></span><br></pre></td></tr></table></figure>
<p>验证一下，是否已经成功了：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">curl</span> <span class="selector-tag">--socks5-hostname</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:1081</span> <span class="selector-tag">www</span><span class="selector-class">.google</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure>
<p>返回网页数据则说明成功了。</p>
<h1 id="命令行代理"><a class="header-anchor" href="#命令行代理"></a>命令行代理</h1>
<h2 id="proxychains"><a class="header-anchor" href="#proxychains"></a>proxychains</h2>
<p>ubuntu下直接安装即可:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> proxychains</span><br></pre></td></tr></table></figure>
<p>它的配置文件路径为 <code>/etc/proxychains.conf</code> ，需要修改的内容在文件内容的最后面，默认是设置tor的配置，把它注释掉，并添加我们的本地代理地址,如：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">socks5 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span></span><br></pre></td></tr></table></figure>
<p>使用起来很简单，只需要在需要执行的命令前加上<code>proxychains</code> 即可，如：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">proxychains wget https:<span class="regexp">//</span>www.google.com</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>对抗封锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Manjaro_deepin安装教程</title>
    <url>/post/45740/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Linux作为一款开源的操作系统，对比于闭源的Windows或MacOS，它更加安全也更注重用户隐私，更重要的是它可以免费使用。但是呢，Linux系统的操作界面对新用户来说可不是那么的友好，也正是是因为这点，许多新用户望而却步。今天，推荐一款用户友好型Linux，操作简单，快速上手，包管理功能强大，自带驱动，省心省力，没错它就是manjaro_deepin!</p>
<a id="more"></a>
<h2 id="一、安装部分"><a class="header-anchor" href="#一、安装部分"></a>一、安装部分</h2>
<ol>
<li>用rufus（或类似的镜像刻录工具）将安装镜像刻录到u盘中。</li>
<li>重启电脑进入WinPE环境（推荐WEPE，纯净），用傲梅分区助手划分一块分区给要安装的Linux（建议100G），然后擦除该分区，即使该分区处于空闲状态。</li>
<li>重启电脑并不断地按F12（联想是按F12,其他机型自己上网查）进入引导启动选择界面，选择U盘引导启动。</li>
<li>进入manjaro引导设置界面，按Enter键默认English语言进入，（不要更换中文，以防出现乱码），点击Manjaro Installer，时区选Shanghai，其他默认，到安装分区这一步时选择你刚擦除好的那块硬盘的对应的分区，选择Erase disk选项，下一步，设置好用户名、登录密码、root密码，等待安装进度条跑完，重启。</li>
</ol>
<h2 id="二、-配置部分"><a class="header-anchor" href="#二、-配置部分"></a>二、 配置部分</h2>
<ol>
<li>
<p>先删除用不到或不想用的软件，比如hexchat、manjaro-hello等。<code>sudo pacman -Rs hexchat manjaro-hello firefox</code></p>
</li>
<li>
<p>更换国内镜像源。可选多个，建议选用清华源<code>sudo pacman-mirrors -i -c China -m rank</code></p>
</li>
<li>
<p>添加archlinuxcn源。用编辑器打开/etc/pacman.conf <code>sudo nano /etc/pacman.conf </code>,在文末添加</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>
<p>然后按Ctrl+s保存，按Ctrl+x离开。</p>
</li>
<li>
<p>更新镜像源<code>sudo pacman -Sy</code>,安装密archlinuxcn密钥验证<code>sudo pacman -S archlinuxcn-keyring</code>,全面升级系统<code>sudo pacman -Syu</code></p>
</li>
<li>
<p>安装常用软件。如<code>sudo pacman -S chrome tor-browser vlc wps-office typora vim ark yay aria2 uget electron-ssr bookworm deepin.com.qq.office deepin.com.wechat2</code></p>
</li>
<li>
<p>配置中文环境。安装输入法和中文字体</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">##安装输入法</span></span><br><span class="line">yay -S fcitx fcitx.im fcitx-configtool fcitx-googlepinyin</span><br><span class="line"><span class="comment">##配置输入法</span></span><br><span class="line">vim .xprofile </span><br><span class="line"><span class="comment">##按 i ，然后在里面加入下面的三行，按Esc，输入 :wq</span></span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">&quot;@im=fcitx&quot;</span></span><br><span class="line"><span class="comment">##安装中文字体</span></span><br><span class="line">sudo pacman -S ttf-roboto noto-fonts ttf-dejavu</span><br><span class="line">sudo pacman -S wqy-bitmapfont wqy-microhei wqy-microhei-lite wqy-zenhei</span><br><span class="line">sudo pacman -S noto-fonts-cjk adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts</span><br><span class="line"><span class="comment">##配置字体</span></span><br><span class="line">vim .config/fontconfig/fonts.conf </span><br><span class="line"><span class="comment">##添加下面的内容，保存退出（i，Esc，：wq）</span></span><br><span class="line">&lt;fontconfig&gt;</span><br><span class="line"></span><br><span class="line">    &lt;its:rules xmlns:its=<span class="string">&quot;http://www.w3.org/2005/11/its&quot;</span> version=<span class="string">&quot;1.0&quot;</span>&gt;</span><br><span class="line">        &lt;its:translateRule translate=<span class="string">&quot;no&quot;</span> selector=<span class="string">&quot;/fontconfig/*[not(self::description)]&quot;</span>/&gt;</span><br><span class="line">    &lt;/its:rules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;description&gt;Manjaro Font Config&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Font directory list --&gt;</span><br><span class="line">    &lt;dir&gt;/usr/share/fonts&lt;/dir&gt;</span><br><span class="line">    &lt;dir&gt;/usr/<span class="built_in">local</span>/share/fonts&lt;/dir&gt;</span><br><span class="line">    &lt;dir prefix=<span class="string">&quot;xdg&quot;</span>&gt;fonts&lt;/dir&gt;</span><br><span class="line">    &lt;dir&gt;~/.fonts&lt;/dir&gt; &lt;!-- this line will be removed <span class="keyword">in</span> the future --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 自动微调 微调 抗锯齿 内嵌点阵字体 --&gt;</span><br><span class="line">    &lt;match target=<span class="string">&quot;font&quot;</span>&gt;</span><br><span class="line">        &lt;edit name=<span class="string">&quot;autohint&quot;</span>&gt; &lt;bool&gt;<span class="literal">false</span>&lt;/bool&gt; &lt;/edit&gt;</span><br><span class="line">        &lt;edit name=<span class="string">&quot;hinting&quot;</span>&gt; &lt;bool&gt;<span class="literal">true</span>&lt;/bool&gt; &lt;/edit&gt;</span><br><span class="line">        &lt;edit name=<span class="string">&quot;antialias&quot;</span>&gt; &lt;bool&gt;<span class="literal">true</span>&lt;/bool&gt; &lt;/edit&gt;</span><br><span class="line">        &lt;edit name=<span class="string">&quot;embeddedbitmap&quot;</span> mode=<span class="string">&quot;assign&quot;</span>&gt; &lt;bool&gt;<span class="literal">false</span>&lt;/bool&gt; &lt;/edit&gt;</span><br><span class="line">    &lt;/match&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 英文默认字体使用 Roboto 和 Noto Serif ,终端使用 DejaVu Sans Mono. --&gt;</span><br><span class="line">    &lt;match&gt;</span><br><span class="line">        &lt;<span class="built_in">test</span> qual=<span class="string">&quot;any&quot;</span> name=<span class="string">&quot;family&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;serif&lt;/string&gt;</span><br><span class="line">        &lt;/<span class="built_in">test</span>&gt;</span><br><span class="line">        &lt;edit name=<span class="string">&quot;family&quot;</span> mode=<span class="string">&quot;prepend&quot;</span> binding=<span class="string">&quot;strong&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;Noto Serif&lt;/string&gt;</span><br><span class="line">        &lt;/edit&gt;</span><br><span class="line">    &lt;/match&gt;</span><br><span class="line">    &lt;match target=<span class="string">&quot;pattern&quot;</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">test</span> qual=<span class="string">&quot;any&quot;</span> name=<span class="string">&quot;family&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;sans-serif&lt;/string&gt;</span><br><span class="line">        &lt;/<span class="built_in">test</span>&gt;</span><br><span class="line">        &lt;edit name=<span class="string">&quot;family&quot;</span> mode=<span class="string">&quot;prepend&quot;</span> binding=<span class="string">&quot;strong&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;Roboto&lt;/string&gt;</span><br><span class="line">        &lt;/edit&gt;</span><br><span class="line">    &lt;/match&gt;</span><br><span class="line">    &lt;match target=<span class="string">&quot;pattern&quot;</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">test</span> qual=<span class="string">&quot;any&quot;</span> name=<span class="string">&quot;family&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;monospace&lt;/string&gt;</span><br><span class="line">        &lt;/<span class="built_in">test</span>&gt;</span><br><span class="line">        &lt;edit name=<span class="string">&quot;family&quot;</span> mode=<span class="string">&quot;prepend&quot;</span> binding=<span class="string">&quot;strong&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;DejaVu Sans Mono&lt;/string&gt;</span><br><span class="line">        &lt;/edit&gt;</span><br><span class="line">    &lt;/match&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 中文默认字体使用思源宋体,不使用 Noto Sans CJK SC 是因为这个字体会在特定情况下显示片假字. --&gt;</span><br><span class="line">    &lt;match&gt;</span><br><span class="line">        &lt;<span class="built_in">test</span> name=<span class="string">&quot;lang&quot;</span> compare=<span class="string">&quot;contains&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;zh&lt;/string&gt;</span><br><span class="line">        &lt;/<span class="built_in">test</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">test</span> name=<span class="string">&quot;family&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;serif&lt;/string&gt;</span><br><span class="line">        &lt;/<span class="built_in">test</span>&gt;</span><br><span class="line">        &lt;edit name=<span class="string">&quot;family&quot;</span> mode=<span class="string">&quot;prepend&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;Source Han Serif CN&lt;/string&gt;</span><br><span class="line">        &lt;/edit&gt;</span><br><span class="line">    &lt;/match&gt;</span><br><span class="line">    &lt;match&gt;</span><br><span class="line">        &lt;<span class="built_in">test</span> name=<span class="string">&quot;lang&quot;</span> compare=<span class="string">&quot;contains&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;zh&lt;/string&gt;</span><br><span class="line">        &lt;/<span class="built_in">test</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">test</span> name=<span class="string">&quot;family&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;sans-serif&lt;/string&gt;</span><br><span class="line">        &lt;/<span class="built_in">test</span>&gt;</span><br><span class="line">        &lt;edit name=<span class="string">&quot;family&quot;</span> mode=<span class="string">&quot;prepend&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;Source Han Sans CN&lt;/string&gt;</span><br><span class="line">        &lt;/edit&gt;</span><br><span class="line">    &lt;/match&gt;</span><br><span class="line">    &lt;match&gt;</span><br><span class="line">        &lt;<span class="built_in">test</span> name=<span class="string">&quot;lang&quot;</span> compare=<span class="string">&quot;contains&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;zh&lt;/string&gt;</span><br><span class="line">        &lt;/<span class="built_in">test</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">test</span> name=<span class="string">&quot;family&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;monospace&lt;/string&gt;</span><br><span class="line">        &lt;/<span class="built_in">test</span>&gt;</span><br><span class="line">        &lt;edit name=<span class="string">&quot;family&quot;</span> mode=<span class="string">&quot;prepend&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;Noto Sans Mono CJK SC&lt;/string&gt;</span><br><span class="line">        &lt;/edit&gt;</span><br><span class="line">    &lt;/match&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 把Linux没有的中文字体映射到已有字体，这样当这些字体未安装时会有替代字体 --&gt;</span><br><span class="line">    &lt;match target=<span class="string">&quot;pattern&quot;</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">test</span> qual=<span class="string">&quot;any&quot;</span> name=<span class="string">&quot;family&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;SimHei&lt;/string&gt;</span><br><span class="line">        &lt;/<span class="built_in">test</span>&gt;</span><br><span class="line">        &lt;edit name=<span class="string">&quot;family&quot;</span> mode=<span class="string">&quot;assign&quot;</span> binding=<span class="string">&quot;same&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;Source Han Sans CN&lt;/string&gt;</span><br><span class="line">        &lt;/edit&gt;</span><br><span class="line">    &lt;/match&gt;</span><br><span class="line">    &lt;match target=<span class="string">&quot;pattern&quot;</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">test</span> qual=<span class="string">&quot;any&quot;</span> name=<span class="string">&quot;family&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;SimSun&lt;/string&gt;</span><br><span class="line">        &lt;/<span class="built_in">test</span>&gt;</span><br><span class="line">        &lt;edit name=<span class="string">&quot;family&quot;</span> mode=<span class="string">&quot;assign&quot;</span> binding=<span class="string">&quot;same&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;Source Han Serif CN&lt;/string&gt;</span><br><span class="line">        &lt;/edit&gt;</span><br><span class="line">    &lt;/match&gt;</span><br><span class="line">    &lt;match target=<span class="string">&quot;pattern&quot;</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">test</span> qual=<span class="string">&quot;any&quot;</span> name=<span class="string">&quot;family&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;SimSun-18030&lt;/string&gt;</span><br><span class="line">        &lt;/<span class="built_in">test</span>&gt;</span><br><span class="line">        &lt;edit name=<span class="string">&quot;family&quot;</span> mode=<span class="string">&quot;assign&quot;</span> binding=<span class="string">&quot;same&quot;</span>&gt;</span><br><span class="line">            &lt;string&gt;Source Han Serif CN&lt;/string&gt;</span><br><span class="line">        &lt;/edit&gt;</span><br><span class="line">    &lt;/match&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- Load <span class="built_in">local</span> system customization file --&gt;</span><br><span class="line">    &lt;include ignore_missing=<span class="string">&quot;yes&quot;</span>&gt;conf.d&lt;/include&gt;</span><br><span class="line">    &lt;!-- Font cache directory list --&gt;</span><br><span class="line">    &lt;cachedir&gt;/var/cache/fontconfig&lt;/cachedir&gt;</span><br><span class="line">    &lt;cachedir prefix=<span class="string">&quot;xdg&quot;</span>&gt;fontconfig&lt;/cachedir&gt;</span><br><span class="line">    &lt;!-- will be removed <span class="keyword">in</span> the future --&gt;</span><br><span class="line">    &lt;cachedir&gt;~/.fontconfig&lt;/cachedir&gt;</span><br><span class="line"></span><br><span class="line">    &lt;config&gt;</span><br><span class="line">        &lt;!-- Rescan <span class="keyword">in</span> every 30s when FcFontSetList is called --&gt;</span><br><span class="line">        &lt;rescan&gt; &lt;int&gt;30&lt;/int&gt; &lt;/rescan&gt;</span><br><span class="line">    &lt;/config&gt;</span><br><span class="line"></span><br><span class="line">&lt;/fontconfig&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在deepin控制器中将语言改为中文，标准字体改为思源黑体CN，等宽字体改为DejaVu Sans Mono，再到manjaro setting manager中下载对应语言包。</p>
</li>
</ol>
<h2 id="三、美化部分"><a class="header-anchor" href="#三、美化部分"></a>三、美化部分</h2>
<ol>
<li>
<p>安装mac风格图标。</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">yay -S la-capitaine-icon-theme ##然后在deepin控制器的主题项选中它</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装oh-my-zsh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(aria2c -x16 https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置zsh主题、语法高亮、自动补全</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line">vim .zshrc </span><br><span class="line"></span><br><span class="line"><span class="comment">##修改如下：</span></span><br><span class="line"><span class="comment">##ZSH_THEME=&quot;ys&quot;</span></span><br><span class="line"><span class="comment">##plugins=(git zsh-autosuggestions zsh-syntax-highlighting)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="四、常见问题"><a class="header-anchor" href="#四、常见问题"></a>四、常见问题</h2>
<ol>
<li><code>sudo pacman -Qqdt</code>可以查询无用依赖以便清除，但是呢俺清除掉后窗口特效就出问题了，会有边框出现。</li>
<li>启动或关机时间较长，一直在那里显示代码，启动界面出现<code>failed to start load kernel module</code>,可通过重新安装deepin-anything解决，<code>yay -S deepin-anything</code>安装所有community的，然后重启。</li>
<li>每次开机后都会在登录界面卡一会儿才能输入帐号密码，初步判断是keyboard模块还没有加载完成，目前俺还没有找到解决办法。</li>
</ol>
<p>参考：</p>
<p><a href="http://panqiincs.me/2019/06/05/after-installing-manjaro/">http://panqiincs.me/2019/06/05/after-installing-manjaro/</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本用法</title>
    <url>/post/45104/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，其语法简洁，易学易用，功能强大，颇受青睐。Markdown写作软件推荐Typora，界面简洁，功能强大，挺不错。</p>
<a id="more"></a>
<h2 id="标题"><a class="header-anchor" href="#标题"></a>标题</h2>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure>
<p>注意 最后一个# 后要有空格隔开，列表也是一样。字体的加粗、倾斜、高亮、删除线、上下标则不要加空格。</p>
<h2 id="字体"><a class="header-anchor" href="#字体"></a>字体</h2>
<h3 id="倾斜"><a class="header-anchor" href="#倾斜"></a>倾斜</h3>
<p><code> *text*</code><br>
<em>text</em></p>
<h3 id="加粗"><a class="header-anchor" href="#加粗"></a>加粗</h3>
<p><code>**text**</code><br>
<strong>text</strong></p>
<h3 id="倾斜加粗"><a class="header-anchor" href="#倾斜加粗"></a>倾斜加粗</h3>
<p><code>***text***</code><br>
<em><strong>text</strong></em></p>
<h3 id="字体高亮"><a class="header-anchor" href="#字体高亮"></a>字体高亮</h3>
<p>注意等号后面不要接空格。markdown语法下的高亮以及上下标功能在这个博客上没有显示出来，实际上本地Markdown软件是可以显示出来的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">markdown语法：</span><br><span class="line">==字体高亮==</span><br><span class="line"></span><br><span class="line">html标签：</span><br><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>字体高亮<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><mark>字体高亮</mark></p>
<p><mark>字体高亮</mark></p>
<h3 id="上标下标"><a class="header-anchor" href="#上标下标"></a>上标下标</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">markdown语法：</span><br><span class="line">上标用^ ^包围</span><br><span class="line"><span class="number">2</span>^<span class="number">2</span>^</span><br><span class="line">下标用~ ~包围</span><br><span class="line">H~<span class="number">2</span>~O</span><br><span class="line"></span><br><span class="line">html标签：</span><br><span class="line"><span class="number">2</span>&lt;sup&gt;<span class="number">3</span>&lt;/sup&gt;</span><br><span class="line">H&lt;sub&gt;<span class="number">2</span>&lt;/sub&gt;O</span><br></pre></td></tr></table></figure>
<p>2<sup>2</sup></p>
<p>H<sub>2</sub>O</p>
<p>2<sup>3</sup><br>
H<sub>2</sub>O</p>
<h3 id="字体删除线"><a class="header-anchor" href="#字体删除线"></a>字体删除线</h3>
<p><code>~~text~~</code><br>
<s>text</s></p>
<h2 id="段落"><a class="header-anchor" href="#段落"></a>段落</h2>
<h3 id="引用"><a class="header-anchor" href="#引用"></a>引用</h3>
<p><code> 一级引用&gt;,二级引用&gt;&gt;,...</code>  必须在行首用才行</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; text</span></span><br><span class="line"><span class="quote">&gt; &gt; sub<span class="emphasis">_text</span></span></span><br><span class="line"><span class="quote"><span class="emphasis">&gt; &gt; &gt; more_</span>text</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>text</p>
<blockquote>
<p>sub_text</p>
<blockquote>
<p>more_text</p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="分割线"><a class="header-anchor" href="#分割线"></a>分割线</h3>
<p><code> ---三个以上</code>且要在行首</p>
<hr>
<p>上下各一条分割线</p>
<hr>
<h3 id="插入图片"><a class="header-anchor" href="#插入图片"></a>插入图片</h3>
<p><code> ![图片底部要显示的文本](link &quot;图片标题&quot;)</code>  其中的link可以是超链接也可以是本地文件路径，绝对路径相、对路径都可以。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">![Markdown基本语法](https:<span class="regexp">//u</span>pload-images.jianshu.io<span class="regexp">/upload_images/</span><span class="number">643065</span>-<span class="number">907</span>bae9afdec50d7.png?imageMogr2<span class="regexp">/auto-orient/</span>strip%<span class="number">7</span>CimageView2<span class="regexp">/2/</span>w<span class="regexp">/640/</span>format/webp <span class="string">&quot;markdown语法表&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/643065-907bae9afdec50d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp" alt="Markdown基本语法" title="markdown语法表"></p>
<h3 id="插入链接"><a class="header-anchor" href="#插入链接"></a>插入链接</h3>
<p><code> [text](link)</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">🔗简书markdown语法</span>](<span class="link">https://www.jianshu.com/p/191d1e21f7ed</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com/p/191d1e21f7ed">🔗简书markdown语法</a></p>
<h3 id="插入代码"><a class="header-anchor" href="#插入代码"></a>插入代码</h3>
<p>代码块下面复制粘贴的话还是当作代码块处理</p>
<h3 id="插入表格"><a class="header-anchor" href="#插入表格"></a>插入表格</h3>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line"><span class="bullet">-</span> 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 |包起来。此处省略</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>表头</th>
<th style="text-align:center">表头</th>
<th style="text-align:right">表头</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容</td>
<td style="text-align:center">内容</td>
<td style="text-align:right">内容</td>
</tr>
<tr>
<td>内容</td>
<td style="text-align:center">内容</td>
<td style="text-align:right">内容</td>
</tr>
</tbody>
</table>
<h3 id="插入列表"><a class="header-anchor" href="#插入列表"></a>插入列表</h3>
<p>无序列表用 - + * 任何一种都可以<br>
有序列表用数字加点</p>
<h3 id="数学公式"><a class="header-anchor" href="#数学公式"></a>数学公式</h3>
<h4 id="行内嵌"><a class="header-anchor" href="#行内嵌"></a>行内嵌</h4>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">内嵌数学公式 $\sum<span class="emphasis">_&#123;i=1&#125;^&#123;10&#125;f(i)\,\,\text&#123;thanks&#125;$</span></span><br></pre></td></tr></table></figure>
<p>效果： $\sum_{i=1}^{10}f(i),,\text{thanks}$</p>
<h4 id="块状"><a class="header-anchor" href="#块状"></a>块状</h4>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">块状数学公式</span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br><span class="line">∑i=<span class="number">110</span>f(i)</span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure>
<p>$$<br>
∑i=110f(i)<br>
$$</p>
<p>更多数学公式的使用参见https://www.zybuluo.com/codeep/note/163962</p>
<h3 id="待办事项"><a class="header-anchor" href="#待办事项"></a>待办事项</h3>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>[x] 支持以 PDF 格式导出文稿</span><br><span class="line"><span class="bullet">- </span>[x] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</span><br><span class="line"><span class="bullet">- </span>[x] 新增 Todo 列表功能</span><br><span class="line"><span class="bullet">- </span>[ ] 修复 LaTex 公式渲染问题</span><br><span class="line"><span class="bullet">- </span>[ ] 新增 LaTex 公式编号功能</span><br></pre></td></tr></table></figure>
<ul class="task-list">
<li class="task-list-item"><input type="checkbox" id="cbx_0" checked="true" disabled="true"><label for="cbx_0"> 支持以 PDF 格式导出文稿</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true"><label for="cbx_1"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_2" checked="true" disabled="true"><label for="cbx_2"> 新增 Todo 列表功能</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_3" disabled="true"><label for="cbx_3"> 修复 LaTex 公式渲染问题</label></li>
<li class="task-list-item"><input type="checkbox" id="cbx_4" disabled="true"><label for="cbx_4"> 新增 LaTex 公式编号功能</label></li>
</ul>
<h2 id="进阶"><a class="header-anchor" href="#进阶"></a>进阶</h2>
<h3 id="HTML标签"><a class="header-anchor" href="#HTML标签"></a>HTML标签</h3>
<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。目前支持的 HTML 元素有：<code>&lt;mark&gt; &lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">使用 <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Alt<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Del<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> 重启电脑</span><br></pre></td></tr></table></figure>
<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>
<h3 id="各类图表"><a class="header-anchor" href="#各类图表"></a>各类图表</h3>
<p>流程图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start</span><br><span class="line">op&#x3D;&gt;operation: Your Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>
<p>序列图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>
<p>甘特图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm使用技巧</title>
    <url>/post/33736/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Pycharm作为python编程的idle</p>
<h2 id="代码块缩进"><a class="header-anchor" href="#代码块缩进"></a>代码块缩进</h2>
<p>Tab 右缩进</p>
<p>Tab + Shift 左缩进</p>
<h2 id="代码块注释"><a class="header-anchor" href="#代码块注释"></a>代码块注释</h2>
<p>注释和反注释都是一样 Ctrl + /</p>
<h2 id="格式化代码"><a class="header-anchor" href="#格式化代码"></a>格式化代码</h2>
<p>Ctrl + Alt + L</p>
<h2 id="多行编辑"><a class="header-anchor" href="#多行编辑"></a>多行编辑</h2>
<p>按住ALT，点击鼠标左键，就可以进行多行编辑了</p>
<h2 id="自动补全"><a class="header-anchor" href="#自动补全"></a>自动补全</h2>
<p>和命令行一样 Tab 键补全</p>
<h2 id="查看源码"><a class="header-anchor" href="#查看源码"></a>查看源码</h2>
<p>Ctrl + click</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>QQ群文件加速下载</title>
    <url>/post/23723/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>有时候在QQ群文件中下载较大文件时下载速度会比较慢，这时候我们可以通过转发到个人账号下载（比如你的小号）或者到网页版QQ群空间获取下载链接配合IDM等多线程下载器下载进行提速。</p>
<a id="more"></a>
<h2 id="方法一：转发至个人账户后下载"><a class="header-anchor" href="#方法一：转发至个人账户后下载"></a>方法一：转发至个人账户后下载</h2>
<p>很简单，右键转发给好友，转发后再点击下载，速度就会快很多，如果你用的是办公版QQ（TIM），TIM还有专属加速通道，一般可以跑满带宽。效果如下图：<br>
<img src="../images/QQ%E7%BE%A4%E6%96%87%E4%BB%B6%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD/2.png" alt=""><br>
我们校园网做了限速处理，最快只有这么快了。</p>
<h2 id="方法二：网页QQ群空间-IDM"><a class="header-anchor" href="#方法二：网页QQ群空间-IDM"></a>方法二：网页QQ群空间+IDM</h2>
<p>打开 <a href="http://qun.qzone.qq.com/">http://qun.qzone.qq.com/</a> 并登录，然后找到你要下载的文件，右键选择使用IDM下载，妥妥的满速。</p>
<p>不过最近，网页版的QQ群空间登录不上了，说什么服务器维护中，不知道以后还能不能用。</p>
]]></content>
      <tags>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Telegram-cli自动化</title>
    <url>/post/47969/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><a id="more"></a>
<h2 id="安装Telegram-cli"><a class="header-anchor" href="#安装Telegram-cli"></a>安装Telegram-cli</h2>
<p>先把仓库源码clone下来（更换为kenorb-contrib，源仓库无法build）:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/kenorb-contrib/tg.git &amp;&amp; <span class="built_in">cd</span> tg</span><br></pre></td></tr></table></figure>
<p>再安装相关依赖 (ubuntu/debian)：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libreadline-dev libconfig-dev libssl-dev lua5.2 liblua5.2-dev libevent-dev libjansson-dev libpython-dev libpython3-dev libgcrypt-dev zlib1g-dev lua-lgi make -y</span><br></pre></td></tr></table></figure>
<p>然后，开始编译:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p><mark>换源后不会出现以下依赖问题，可忽略</mark></p>
<p>这一步可能会出问题，如果在执行<code>./configure</code> 时报错<code>zlib error</code>, 则应通过安装zlib依赖来解决:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> apt install zlib<span class="number">1</span>g-dev</span><br></pre></td></tr></table></figure>
<p>如果是报<code>openssl error</code>, 则是因为openssl的api升级了，可通过安装如下指定版本号的libssl来解决：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install libssl1.0-dev</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a class="header-anchor" href="#使用"></a>使用</h2>
<p>可通过执行如下代码启动Telegram-cli客户端，注意，要在科学上网环境下执行！</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">bin/telegram-<span class="keyword">cli</span> -k tg-server.pub</span><br></pre></td></tr></table></figure>
<p>如果没有配置好科学上网环境，启动之后是用不了的，可以通过<code>proxychains</code> 让命令行走代理(proxychains的配置之前有讲过，可以翻一下之前的文章)：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">proxychains bin/telegram-cli -k tg-server.pub</span><br></pre></td></tr></table></figure>
<p>第一次启动，会让你输入手机号，别忘了+86国际区号哦，然后一路验证。验证完成后就可以使用了，这里列出一些常用语法:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msg &lt;peer&gt; sometext <span class="comment">#例如:msg @somebody hello</span></span><br><span class="line">send_file &lt;peer&gt; file_path <span class="comment">#例如:send_file @somebody /root/tg.log</span></span><br><span class="line"><span class="built_in">help</span> <span class="comment"># 更多用法直接输入help</span></span><br></pre></td></tr></table></figure>
<h2 id="自动化"><a class="header-anchor" href="#自动化"></a>自动化</h2>
<p>利用Linux下的crontab设置如下定时任务，可完成定时发消息的任务</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">telegram-cli_PATH<span class="regexp">/bin/</span>telegram-cli -W -e <span class="string">&quot;msg &lt;peer&gt; sometext&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Tor使用教程</title>
    <url>/post/60639/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Tor是实现匿名通信的自由软件。其名源于“The Onion Router”（洋葱路由器）的英语缩写。用户可透过Tor接达由全球志愿者免费提供，包含7000+个中继的覆盖网络，从而达至隐藏用户真实地址、避免网络监控及流量分析的目的。Tor用户的互联网活动（包括浏览在线网站、帖子以及即时消息等通信形式）相对较难追踪。Tor的设计原意在于保障用户的个人隐私，以及不受监控地进行秘密通信的自由和能力。</p>
<a id="more"></a>
<p>使用Tor一般有两种方式，最常见的一种，是直接使用集成了Firefox浏览器的Tor Broswer，这种方法简单高效，不需要额外配置，直接下载安装即可使用。另一种，则稍显复杂，直接使用裸Tor。使用裸Tor可以更方便地搭配其他软件使用，而且占用资源少，更适合追求简洁的玩家。</p>
<p>下面就是介绍Windows/Linux下如何配置这种裸Tor来匿名上网。</p>
<h2 id="Windows下使用Tor"><a class="header-anchor" href="#Windows下使用Tor"></a>Windows下使用Tor</h2>
<h3 id="从Tor-Broswer中提取Tor"><a class="header-anchor" href="#从Tor-Broswer中提取Tor"></a>从Tor Broswer中提取Tor</h3>
<p>去到Tor官网下载Tor浏览器安装到任意目录，安装完成后把安装目录下的<code>Tor Browser\Browser\TorBrowser\Tor</code>文件夹复制一份出来，在这个<code>Tor</code>文件夹下新建一个<code>Data</code>文件夹,再把<code>\Tor Browser\Browser\TorBrowser\Data\Tor</code>下的<code>geoip</code>、<code>geoip6</code>这两个文件复制到<code>Data</code>文件夹中，这样就得到了裸Tor包含的所有文件了。</p>
<p>接下来就是编写Tor的配置文件了，在<code>Tor</code>文件下创建<code>torrc</code>文件，用编辑器打开，输入配置信息，这里给出把tor作为前置代理的配置和利用meek插件(新版的Tor中，所有插件都包含在obfs4proxy.exe中)直连tor的配置：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"># 把tor作为其他代理软件的前置代理</span></span><br><span class="line"><span class="xml">DataDirectory ./Data</span></span><br><span class="line"><span class="xml">GeoIPFile ./Data/geoip</span></span><br><span class="line"><span class="xml">GeoIPv6File ./Data/geoip6</span></span><br><span class="line"><span class="xml"># 设置前置socks5代理</span></span><br><span class="line"><span class="xml">Socks5Proxy 127.0.0.1:1080</span></span><br><span class="line"><span class="xml"># 排除有安全隐患的国家</span></span><br><span class="line"><span class="xml">ExcludeNodes </span><span class="template-variable">&#123;cn&#125;</span><span class="xml">,</span><span class="template-variable">&#123;hk&#125;</span><span class="xml">,</span><span class="template-variable">&#123;mo&#125;</span><span class="xml">,</span><span class="template-variable">&#123;kp&#125;</span><span class="xml">,</span><span class="template-variable">&#123;ir&#125;</span><span class="xml">,</span><span class="template-variable">&#123;sy&#125;</span><span class="xml">,</span><span class="template-variable">&#123;pk&#125;</span><span class="xml">,</span><span class="template-variable">&#123;cu&#125;</span><span class="xml">,</span><span class="template-variable">&#123;vn&#125;</span><span class="xml">,</span><span class="template-variable">&#123;ru&#125;</span></span><br><span class="line"><span class="xml">ExcludeExitNodes </span><span class="template-variable">&#123;cn&#125;</span><span class="xml">,</span><span class="template-variable">&#123;hk&#125;</span><span class="xml">,</span><span class="template-variable">&#123;mo&#125;</span><span class="xml">,</span><span class="template-variable">&#123;sg&#125;</span><span class="xml">,</span><span class="template-variable">&#123;th&#125;</span><span class="xml">,</span><span class="template-variable">&#123;pk&#125;</span><span class="xml">,</span><span class="template-variable">&#123;by&#125;</span><span class="xml">,</span><span class="template-variable">&#123;ru&#125;</span><span class="xml">,</span><span class="template-variable">&#123;ir&#125;</span><span class="xml">,</span><span class="template-variable">&#123;vn&#125;</span><span class="xml">,</span><span class="template-variable">&#123;ph&#125;</span><span class="xml">,</span><span class="template-variable">&#123;my&#125;</span><span class="xml">,</span><span class="template-variable">&#123;cu&#125;</span></span><br><span class="line"><span class="xml">StrictNodes 1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用meek插件直连tor的配置</span></span><br><span class="line"><span class="attribute">DataDirectory</span> ./Data</span><br><span class="line"><span class="attribute">GeoIPFile</span> ./Data/geoip</span><br><span class="line"><span class="attribute">GeoIPv6File</span> ./Data/geoip<span class="number">6</span></span><br><span class="line"><span class="comment"># 使用meek网桥</span></span><br><span class="line"><span class="attribute">ClientTransportPlugin</span> meek_lite exec ./PluggableTransports/obfs<span class="number">4</span>proxy.exe</span><br><span class="line"><span class="attribute">UseBridges</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">Bridge</span> meek_lite <span class="number">0.0.2.0:2</span> <span class="number">97700</span>DFE<span class="number">9</span>F<span class="number">483596</span>DDA<span class="number">6264</span>C<span class="number">4</span>D<span class="number">7</span>DF<span class="number">7641</span>E<span class="number">1</span>E<span class="number">39</span>CE url=https://meek.azureedge.net/ front=ajax.aspnetcdn.com</span><br><span class="line"><span class="comment"># 排除出口节点</span></span><br><span class="line"><span class="attribute">ExcludeExitNodes</span> &#123;cn&#125;,&#123;hk&#125;,&#123;mo&#125;,&#123;sg&#125;,&#123;th&#125;,&#123;pk&#125;,&#123;by&#125;,&#123;ru&#125;,&#123;ir&#125;,&#123;vn&#125;,&#123;ph&#125;,&#123;my&#125;,&#123;cu&#125;</span><br><span class="line"><span class="attribute">StrictNodes</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="直接下载Windows-Expert-Bundle"><a class="header-anchor" href="#直接下载Windows-Expert-Bundle"></a>直接下载Windows Expert Bundle</h3>
<p>除了下载Tor浏览器提取裸Tor的方法外，还可以在这里https://www.torproject.org/download/tor/直接下载<code>Windows Expert Bundle</code>，解压后即可得裸Tor，不过这里的裸Tor是真的裸，连meek插件（obfs4proxy.exe）都是没有的，那么它自然是不能直连的，只能作为其它代理软件的前置代理了，配置文件写法如上，不过注意<code>geoip</code>、<code>geoip6</code>文件路径，不能照搬上述配置信息了，自己在配置文件中改一下路径。</p>
<h3 id="在Windows下运行Tor"><a class="header-anchor" href="#在Windows下运行Tor"></a>在Windows下运行Tor</h3>
<p>通过上述两个步骤获得Tor后，即可开始运行Tor。运行Tor可以在Tor文件下调出命令行输入<code>tor -f torrc</code>,为了方便直接在<code>Tor</code>文件夹下创建一个名为<code>start.cmd</code>的脚本，脚本中填入<code>tor -f torrc</code>，以后启动Tor直接运行这个脚本就可以啦。</p>
<h2 id="Linux下使用Tor"><a class="header-anchor" href="#Linux下使用Tor"></a>Linux下使用Tor</h2>
<p>Debian/Ubuntu下，可直接安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install tor -y</span><br></pre></td></tr></table></figure>
<p>修改配置文件<code>/etc/tor/torrc</code>,在其末尾添加如下内容</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"># 设置前置socks5代理</span></span><br><span class="line"><span class="xml">Socks5Proxy 127.0.0.1:1080</span></span><br><span class="line"><span class="xml"># 排除有安全隐患的国家</span></span><br><span class="line"><span class="xml">ExcludeNodes </span><span class="template-variable">&#123;cn&#125;</span><span class="xml">,</span><span class="template-variable">&#123;hk&#125;</span><span class="xml">,</span><span class="template-variable">&#123;mo&#125;</span><span class="xml">,</span><span class="template-variable">&#123;kp&#125;</span><span class="xml">,</span><span class="template-variable">&#123;ir&#125;</span><span class="xml">,</span><span class="template-variable">&#123;sy&#125;</span><span class="xml">,</span><span class="template-variable">&#123;pk&#125;</span><span class="xml">,</span><span class="template-variable">&#123;cu&#125;</span><span class="xml">,</span><span class="template-variable">&#123;vn&#125;</span><span class="xml">,</span><span class="template-variable">&#123;ru&#125;</span></span><br><span class="line"><span class="xml">ExcludeExitNodes </span><span class="template-variable">&#123;cn&#125;</span><span class="xml">,</span><span class="template-variable">&#123;hk&#125;</span><span class="xml">,</span><span class="template-variable">&#123;mo&#125;</span><span class="xml">,</span><span class="template-variable">&#123;sg&#125;</span><span class="xml">,</span><span class="template-variable">&#123;th&#125;</span><span class="xml">,</span><span class="template-variable">&#123;pk&#125;</span><span class="xml">,</span><span class="template-variable">&#123;by&#125;</span><span class="xml">,</span><span class="template-variable">&#123;ru&#125;</span><span class="xml">,</span><span class="template-variable">&#123;ir&#125;</span><span class="xml">,</span><span class="template-variable">&#123;vn&#125;</span><span class="xml">,</span><span class="template-variable">&#123;ph&#125;</span><span class="xml">,</span><span class="template-variable">&#123;my&#125;</span><span class="xml">,</span><span class="template-variable">&#123;cu&#125;</span></span><br><span class="line"><span class="xml">StrictNodes 1</span></span><br></pre></td></tr></table></figure>
<p>启动Tor并设置开机自启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start tor</span><br><span class="line">systemctl <span class="built_in">enable</span> tor</span><br></pre></td></tr></table></figure>
<p>验证tor是否链接成功（安装tor的同时一般会默认附带安装了torsocks）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">torsocks</span> <span class="selector-tag">curl</span> <span class="selector-tag">myip</span><span class="selector-class">.ipip</span><span class="selector-class">.net</span></span><br></pre></td></tr></table></figure>
<p>如果返回tor节点ip或者被Cloudflare拦截返回一段验证html，则说明tor设置成功。</p>
<h2 id="Tor进阶玩法"><a class="header-anchor" href="#Tor进阶玩法"></a>Tor进阶玩法</h2>
<h3 id="三重代理"><a class="header-anchor" href="#三重代理"></a>三重代理</h3>
<p>直接使用Tor容易被ISP识别，因为Tor的流量特征太明显了，而加一层前置代理虽然可以解决这个问题，但是被访问的目标网站还是知道你在用Tor，而且有些目标网站对Tor不友好，这时候怎么办呢？我们可以用三重代理，这样一来，你的ISP不知道你在用Tor，你访问的目标网站也不知道你在用Tor。具体实现如下：</p>
<p>Web Browser --&gt; Proxy Client 1(1080) --&gt; Tor Client(9050) --&gt; Proxy Client 2(1081) --&gt; Proxy Server 2 --&gt; Tor Server --&gt; Proxy Server 1 --&gt; Internet</p>
<p>其中，Proxy Server 1为最后出口，即经由它直接访问目标网站，最为薄弱；Proxy Server 2作为连接国内到国外的通道，直接决定访问速度；而Tor Server作为中间层，对接Proxy Server 1的入口。那么，可以把网络上公开的免费的公共代理服务器作为Proxy Server 1，而自己的私人代理服务器作为Proxy Server 2，这样一来便可确保安全的同时保证访问速度。</p>
<p>值得注意的是，Proxy Client 2需要支持前置代理才行。</p>
]]></content>
      <tags>
        <tag>对抗封锁</tag>
        <tag>对抗审查</tag>
      </tags>
  </entry>
  <entry>
    <title>Trojan-go代理服务搭建</title>
    <url>/post/42498/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Trojan-Go可以说是集成了Trojan-gfw和V2ray的优点吧，简单如trojan-gfw却又强大如V2ray。</p>
<a id="more"></a>
<h2 id="获取Trojan-Go"><a class="header-anchor" href="#获取Trojan-Go"></a>获取Trojan-Go</h2>
<p>先到<a href="https://github.com/p4gefau1t/trojan-go/releases">Trojan-Go release页面</a> 下载最新的预编译包，然后解压：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir trojan-go</span><br><span class="line">cd trojan-go</span><br><span class="line">wget https://github.com/p4gefau1t/trojan-go/releases/download/v0.7.8/trojan-go-linux-amd64.zip</span><br><span class="line">unzip trojan-go-linux-amd64.zip</span><br></pre></td></tr></table></figure>
<p>如果解压那步出错，可能是没安装<code>unzip</code>,先安装，再操作</p>
<h2 id="获取TLS证书"><a class="header-anchor" href="#获取TLS证书"></a>获取TLS证书</h2>
<p>这一步的前提是，有一个域名并且解析到该VPS上。</p>
<p>这里我们用<code>certbot</code>来申请证书，首先安装<code>certbot</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install certbot</span><br></pre></td></tr></table></figure>
<p>然后，申请证书（注意，这一步要用到443端口，确认当前443端口没有被占用）：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">certbot certonly <span class="comment">--standalone -d yourDomain.com</span></span><br></pre></td></tr></table></figure>
<p>生成的证书文件保存在<code>/etc/letsencrypt/live/</code>文件夹下。</p>
<p>Let’s Encrypt 提供的证书只有90天的有效期，我们必须在证书到期之前，重新获取这些证书，证书更新命令是(同样的，执行证书更新是要用到443端口，请确保443端口没有被占用)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certbot renew --dry-run</span><br></pre></td></tr></table></figure>
<p>为了方便，可以利用linux下的crontab做一个定时任务，每两月自动更新一次证书：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 3 * */2 * certbot renew --pre-hook &quot;service nginx stop&quot; --post-hook &quot;service nginx start&quot;</span><br></pre></td></tr></table></figure>
<p><code>--pre-hook</code> 这个参数表示执行更新操作之前要做的事情，因为 <code>--standalone</code> 模式的证书申请或更新是用到443端口，所以需要先停止 <code>nginx</code> 服务，解除端口占用。 <code>--post-hook</code> 这个参数表示执行更新操作完成后要做的事情，这里就恢复 <code>nginx</code> 服务的启用。</p>
<h2 id="配置本地Web服务"><a class="header-anchor" href="#配置本地Web服务"></a>配置本地Web服务</h2>
<p>想省事的也可以不配置，直接反代别人做好的现成的网站，比如<code>1.1.1.1</code></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt install nginx</span><br><span class="line">service start nginx</span><br></pre></td></tr></table></figure>
<p>至于网站伪装，可以直接到网站搜索一些网站模板挂上去，当然，也可以不做这一步。</p>
<h2 id="配置Trojan-Go"><a class="header-anchor" href="#配置Trojan-Go"></a>配置Trojan-Go</h2>
<p>可以直接修改开发者给出的范例文件，把域名，密码改成自己想设置的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano ~/trojan-go/example/server.json</span><br><span class="line">nano ~/trojan-go/example/client.json</span><br></pre></td></tr></table></figure>
<p>如果想使用websocket的话，还要额外加上：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;websocket&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/ws_path&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;yourDomain.com&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>最好的成品是这样的，server端：</p>
<p><mark>没配置有本地web服务的可填在remote_addr处填<code>1.1.1.1</code>或其他现成网站网址</mark></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;run_type&quot;</span>: <span class="string">&quot;server&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;local_addr&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;local_port&quot;</span>: <span class="number">443</span>,</span><br><span class="line">    <span class="attr">&quot;remote_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;remote_port&quot;</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;passwd&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;ssl&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;cert&quot;</span>: <span class="string">&quot;/etc/letsencrypt/live/yourDomain.com/fullchain.pem&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;/etc/letsencrypt/live/yourDomain.com/privkey.pem&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;sni&quot;</span>: <span class="string">&quot;yourDomain.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;websocket&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/ws_path&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hostname&quot;</span>: <span class="string">&quot;yourDomain.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;router&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;block&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;geoip:private&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>client端：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;run_type&quot;</span>: <span class="string">&quot;client&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;local_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;local_port&quot;</span>: <span class="number">1081</span>,</span><br><span class="line">    <span class="attr">&quot;remote_addr&quot;</span>: <span class="string">&quot;yourDomain.com&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;remote_port&quot;</span>: <span class="number">443</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;passwd&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;ssl&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;sni&quot;</span>: <span class="string">&quot;yourDomain.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;mux&quot;</span> :&#123;</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;websocket&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/ws_path&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hostname&quot;</span>: <span class="string">&quot;yourDomain.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;router&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;bypass&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;geoip:cn&quot;</span>,</span><br><span class="line">            <span class="string">&quot;geoip:private&quot;</span>,</span><br><span class="line">            <span class="string">&quot;geosite:cn&quot;</span>,</span><br><span class="line">            <span class="string">&quot;geosite:geolocation-cn&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;block&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;geosite:category-ads&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;proxy&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;geosite:geolocation-!cn&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;default_policy&quot;</span>: <span class="string">&quot;proxy&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行Trojan-Go"><a class="header-anchor" href="#运行Trojan-Go"></a>运行Trojan-Go</h2>
<h3 id="server端："><a class="header-anchor" href="#server端："></a>server端：</h3>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/trojan-go</span></span><br><span class="line">nohup <span class="string">./trojan-go</span> -config <span class="string">./example/server.json</span> &amp;</span><br></pre></td></tr></table></figure>
<p>如果安装有joker 就更方便了，<code>joker ./trojan-go -config ./example/server.json</code></p>
<h3 id="client端："><a class="header-anchor" href="#client端："></a>client端：</h3>
<p>这里以Windows举例，先到<a href="https://github.com/p4gefau1t/trojan-go/releases">Trojan-Go release页面</a> 下载Windows下的客户端，解压，然后把刚才的client.json配置文件下载下来，放到里面，接着新建一个<code>start.cmd</code>批处理脚本，写入如下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">trojan-go</span><span class="selector-class">.exe</span> <span class="selector-tag">-config</span> <span class="selector-tag">client</span><span class="selector-class">.json</span></span><br></pre></td></tr></table></figure>
<p>保存退出，运行这个cmd脚本就开启代理了，浏览器配合代理插件，就可以使用愉快的上网了。</p>
]]></content>
      <tags>
        <tag>对抗封锁</tag>
        <tag>对抗审查</tag>
      </tags>
  </entry>
  <entry>
    <title>V2Ray代理服务器搭建</title>
    <url>/post/60125/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>记录一次在vps上安装并配置v2ray的过程。</p>
<a id="more"></a>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<p>v2ray是不区分客户端和服务端版本的，安装v2ray后，我们通过修改配置文件的inbounds和outbounds规则，让它既可以做服务端也可以做客户端。</p>
<p>安装方法多种多样，这里介绍通过官方提供的脚本一键式安装的方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh</span><br><span class="line">chmod +x ./install-release.sh</span><br><span class="line">./install-release.sh</span><br></pre></td></tr></table></figure>
<p>如果你的操作系统是debian/ubuntu的话，这个脚本默认还会设置开机自启v2ray服务。</p>
<p>开启和关闭v2ray的简单指令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service v2ray start</span><br><span class="line">service v2ray stop</span><br><span class="line">service v2ray restart</span><br><span class="line">service v2ray reload</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<h3 id="申请证书"><a class="header-anchor" href="#申请证书"></a>申请证书</h3>
<p>这一步的前提是，有一个域名并且解析到该VPS上。</p>
<p>这里我们用<code>certbot</code>来申请证书，首先安装<code>certbot</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install certbot</span><br></pre></td></tr></table></figure>
<p>然后，申请证书（注意，这一步要用到80和443端口，确认当前80和443端口没有被占用，且防火墙开放这两个端口）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">certbot certonly --standalone -d yourDomain.com</span><br></pre></td></tr></table></figure>
<p>生成的证书文件保存在<code>/etc/letsencrypt/live/</code>文件夹下。</p>
<p>Let’s Encrypt 提供的证书只有90天的有效期，我们必须在证书到期之前，重新获取这些证书，证书更新命令是(同样的，执行证书更新是要用到443端口，请确保443端口没有被占用)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certbot renew --dry-run</span><br></pre></td></tr></table></figure>
<p>为了方便，可以利用linux下的crontab做一个定时任务，每两月自动更新一次证书：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 3 * */2 * certbot renew --pre-hook &quot;service nginx stop&quot; --post-hook &quot;service nginx start&quot;</span><br></pre></td></tr></table></figure>
<p><code>--pre-hook</code> 这个参数表示执行更新操作之前要做的事情，因为 <code>--standalone</code> 模式的证书申请或更新是用到443端口，所以需要先停止 <code>nginx</code> 服务，解除端口占用。 <code>--post-hook</code> 这个参数表示执行更新操作完成后要做的事情，这里就恢复 <code>nginx</code> 服务的启用。</p>
<h3 id="V2ray配置"><a class="header-anchor" href="#V2ray配置"></a>V2ray配置</h3>
<p>v2ray服务端的配置文件是 <code>/usr/local/etc/v2ray/config.json</code> 。这里只给出服务端的配置，客户端的配置建议使用V2rayN直接填写就好, 其中alertId默认为0，填好了可以导出vmess_url或者配置文件。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;inbound&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;listen&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;port&quot;</span>: <span class="number">9000</span>,</span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: &#123;<span class="attr">&quot;id&quot;</span>: <span class="string">&quot;f8360bea-e83c-11eb-a90e-00fff1ff6342&quot;</span>&#125;,</span><br><span class="line">    <span class="attr">&quot;streamSettings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;network&quot;</span>: <span class="string">&quot;ws&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;wsSettings&quot;</span>: &#123;<span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/ws_path&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;outbound&quot;</span>: &#123;<span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;freedom&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Nginx配置"><a class="header-anchor" href="#Nginx配置"></a>Nginx配置</h3>
<h4 id="服务器尚未部署有网站"><a class="header-anchor" href="#服务器尚未部署有网站"></a>服务器尚未部署有网站</h4>
<p>在Nginx中配置文件以转发流量到V2ray上，在<code>etc/nginx/conf.d</code>下新建一个配置文件，比如<code>default.conf</code> ，写入如下内容(<a href="http://xn--yourDomain-3k1ul05arh2gvxsa.com">自行替换yourDomain.com</a>)：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">### 1:</span></span><br><span class="line">    <span class="attribute">server_name</span> yourDomain.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span> reuseport fastopen=<span class="number">10</span>;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://<span class="variable">$server_name</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span>  !<span class="regexp">~ ^(POST|GET)$)</span> &#123; <span class="attribute">return</span>  <span class="number">501</span>; &#125;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">### 2:</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/yourDomain.com/fullchain.pem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">### 3:</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/yourDomain.com/privkey.pem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">### 4:</span></span><br><span class="line">    <span class="attribute">location</span> /ws_path</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:9000;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">keepalive_requests</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="attribute">keepalive_timeout</span> <span class="number">2h</span>;</span><br><span class="line">        <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl reuseport fastopen=<span class="number">10</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="variable">$server_name</span>;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_requests</span> <span class="number">10000</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">2h</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-<span class="number">128</span>-GCM-SHA256:TLS13-AES-<span class="number">256</span>-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">    <span class="attribute">ssl_ecdh_curve</span> secp384r1;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">60m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">    <span class="attribute">ssl_session_tickets</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">8.8.8.8</span> <span class="number">8.8.4.4</span> valid=<span class="number">300s</span>;</span><br><span class="line">    <span class="attribute">resolver_timeout</span> <span class="number">10s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span>  !<span class="regexp">~ ^(POST|GET)$)</span> &#123; <span class="attribute">return</span> <span class="number">501</span>; &#125;</span><br><span class="line">    <span class="attribute">add_header</span> X-Frame-Options DENY;</span><br><span class="line">    <span class="attribute">add_header</span> X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> X-Content-Type-Options nosniff;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security max-age=<span class="number">31536000</span> always;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.html index.htm  index.php;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .*\.(js|jpg|JPG|jpeg|JPEG|css|bmp|gif|GIF|png)$</span> &#123; <span class="attribute">access_log</span> <span class="literal">off</span>; &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123; <span class="attribute">index</span> index.html; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面配置文件中，带有###号的是需要修改。第1,2,3处改为自己的域名，第4处改为自己想设置的path和端口，改完并保存配置文件后，检查nginx配置文件是否有误，并启动Nginx：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">service nginx start</span><br></pre></td></tr></table></figure>
<p>此外，为了进一步提高v2ray的隐蔽性，可以选择进行网站伪装，在网上找一个网站模板，解压到<code>/usr/share/nginx/html</code>目录下。</p>
<h4 id="服务器上已经部署有网站"><a class="header-anchor" href="#服务器上已经部署有网站"></a>服务器上已经部署有网站</h4>
<p>若是服务器上已经搭建有了一个网站，只需要在该网站的Nginx配置文件里添加一个如下location即可:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /ws_path &#123;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$http_upgrade</span> != <span class="string">&quot;websocket&quot;</span>) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:9000;</span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="开启CDN（可选）"><a class="header-anchor" href="#开启CDN（可选）"></a>开启CDN（可选）</h3>
<p>开启为域名开启CDN可以隐藏vps的真实ip，可以有效防止ip被墙或复活被墙ip，不过有点vps开启CDN后延迟会大大增加，但是对美西节点影响不大，如果是美西节点，比如洛杉矶，建议开启。</p>
<p>实现的方法很简单，把域名迁移到Cloudflare管理，并开启CDN加速代理。</p>
<h2 id="实用工具"><a class="header-anchor" href="#实用工具"></a>实用工具</h2>
<h3 id="配置生成"><a class="header-anchor" href="#配置生成"></a>配置生成</h3>
<p><a href="https://www.veekxt.com/utils/v2ray_gen">V2Ray配置在线生成</a></p>
<p><a href="https://www.digitalocean.com/community/tools/nginx">Nginx配置在线生成</a></p>
<h3 id="订阅转换"><a class="header-anchor" href="#订阅转换"></a>订阅转换</h3>
<p><a href="https://acl4ssr.netlify.app/">https://acl4ssr.netlify.app/</a></p>
<p><a href="https://bianyuan.xyz/">https://bianyuan.xyz/</a></p>
<h2 id="参考："><a class="header-anchor" href="#参考："></a>参考：</h2>
<p><a href="https://www.v2fly.org/">https://www.v2fly.org/</a></p>
<p><a href="https://guide.v2fly.org/">https://guide.v2fly.org/</a></p>
<p><a href="https://printempw.github.io/v2ray-ws-tls-cloudflare/">https://printempw.github.io/v2ray-ws-tls-cloudflare/</a></p>
]]></content>
      <tags>
        <tag>对抗封锁</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware安装并激活Windows7虚拟机</title>
    <url>/post/47189/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>虚拟机本身是一个软件，可以模拟出一个跟真实环境一模一样的虚拟环境，然后在这个虚拟环境中运行其它软件。 得益于其虚拟化特性，虚拟机广泛应用于软件开发和测试、保护隐私、安全防范等方面，比如可以用它来试用危险的软件、隐匿自己的ip、搭建开发环境。</p>
<p>下面是我用VMware安装并激活Widows7的经验分享！</p>
<a id="more"></a>
<h2 id="获取VMware"><a class="header-anchor" href="#获取VMware"></a>获取VMware</h2>
<p>直接到VMware的官网下载最新版的Vmware workstation pro安装，然后到网上找一个激活码激活即可。</p>
<h2 id="获取Windows7镜像"><a class="header-anchor" href="#获取Windows7镜像"></a>获取Windows7镜像</h2>
<p>到“MSDN，我告诉你”网站上下载Windows7原版镜像，这个网站的镜像是纯净原版镜像，安全放心，建议选择旗舰版。</p>
<h2 id="安装激活"><a class="header-anchor" href="#安装激活"></a>安装激活</h2>
<p>打开VMware选择刚才下载的镜像，开始安装，我的电脑是8G的内存，2G的独显，所以我分配给虚拟机的内存是4G,显存1G，硬盘是单文件60G（动态占用的，使用多少占用多少），当然啦，划分的硬盘是可以随时可以调整容量大小的，不过值得注意的是，当你扩容你的硬盘时，你还得在虚拟机中用分区工具把扩容部分空间合并到虚拟机的硬盘分区中。在显卡配置中启用3D图形加速，处理器配置中勾选上那三个虚拟化选项，声卡配置中勾选‘启用回声抵消’，不然会出现虚拟机没有声音的问题。</p>
<p>安装完Windows7后就开始激活它吧，将VMBIOS.ROM放到虚拟机文件目录下，注意文件名称大小写，然后在Windows 7 x64.vmx中增加一行：bios440.filename = “VMBIOS.ROM”，最后设置一个共享文件夹将oem_Vista_Win7.exe共享给虚拟机并开启虚拟机运行oem_Vista_Win7.exe，此时会跳出一个命令行窗口，选择厂商，选择序列号，我选的是联想，记得有两步。</p>
<h2 id="安装VM-tool"><a class="header-anchor" href="#安装VM-tool"></a>安装VM-tool</h2>
<p>vm-tool是vmware的配套增强工具，安装后可以直接拖拽文件到虚拟机中，共享粘贴板，虚拟机的窗口也可随意调整。不过Windows7直接安装vm-tool是不行的，它必须要Windows7安装有server package 1，那么只需在windows更新中等待sp1的更新，安装sp1后可安装vm-tool。</p>
<p>激活用到的文件我在这里贴出来啦<a href="https://yadi.sk/d/CsoPpF6tUP4lig"><strong>激活文件</strong></a></p>
]]></content>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>aplayer插件的使用</title>
    <url>/post/36683/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>以前网易云音乐可以直接在hexo博客上生成外链播放器，但版权保护了以后，好多音乐都不能生成外链播放了。</p>
<p>关于外链播放器，网上找了很久，好多解决方案都是把音乐放网盘，然后自己写一个播放插件加入到页面中，这个办法是不错，但它不适用于 hexo 这种依赖引擎自动渲染的网站。</p>
<p>是可以把 js 等放在模板中，渲染的时候调用，但不是所有的网页都要插入音乐，放在模板中无疑会拖慢渲染速度，而且为了这个小东西，自己去改模板，有点复杂了。</p>
<p>aplayer 提供了一个不错的解决办法，<a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a> 插件, 可以绕过版权问题</p>
<a id="more"></a>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-tag-aplayer</span></span><br></pre></td></tr></table></figure>
<h2 id="依赖"><a class="header-anchor" href="#依赖"></a>依赖</h2>
<ul>
<li>APlayer.js &gt; 1.8.0</li>
<li>Meting.js &gt; 1.1.1</li>
</ul>
<h2 id="使用"><a class="header-anchor" href="#使用"></a>使用</h2>
<h3 id="直接使用办法"><a class="header-anchor" href="#直接使用办法"></a>直接使用办法</h3>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>
<p>注：此方法不支持一键调用资源，需要手动获取链接后填写，或者开启 Hexo 的 <a href="https://hexo.io/zh-cn/docs/asset-folders.html#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9">文章资源文件夹</a> 功能，将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">&#123;<span class="meta">%</span> aplayer <span class="string">&quot;Caffeine&quot;</span> <span class="string">&quot;Jeff Williams&quot;</span> <span class="string">&quot;caffeine.mp3&quot;</span> <span class="string">&quot;picture.jpg&quot;</span> <span class="string">&quot;lrc:caffeine.txt&quot;</span> <span class="meta">%</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="MeingJS-支持"><a class="header-anchor" href="#MeingJS-支持"></a>MeingJS 支持</h3>
<p><a href="https://github.com/metowolf/MetingJS">MetingJS</a> 是基于 <a href="https://github.com/metowolf/Meting">Meting API</a> 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ 音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</p>
<p>（目前 QQ 音乐失效，因为 QQ 音乐屏蔽掉了歌曲 ID）</p>
<blockquote>
<p>虾米音乐部分失效，无法解析 （2018.8.10）</p>
</blockquote>
<p>如果使用 MetingJS，请在 Hexo 配置文件 <code>_config.yml</code> 中设置：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span>  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>接着就可以通过 <strong>{</strong>% meting …%<strong>}</strong> 在文章中使用 MetingJS 播放器了：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 简单示例 (id, server, type)  --&gt;</span></span><span class="template-tag">&#123;% <span class="name">meting</span> &quot;108138&quot; &quot;netease&quot; &quot;song&quot; %&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 进阶示例 --&gt;</span></span><span class="template-tag">&#123;% <span class="name">meting</span> &quot;11100236&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span></span><br></pre></td></tr></table></figure>
<p>有关 <strong>{</strong>% meting %<strong>}</strong> 的选项列表如下:<br>
注意填写选项的先后顺序，不然无法显示插件</p>
<table>
<thead>
<tr>
<th style="text-align:left">选项</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">id</td>
<td style="text-align:left"><strong>必须值</strong></td>
<td style="text-align:left">歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td>
</tr>
<tr>
<td style="text-align:left">server</td>
<td style="text-align:left"><strong>必须值</strong></td>
<td style="text-align:left">音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td>
</tr>
<tr>
<td style="text-align:left">type</td>
<td style="text-align:left"><strong>必须值</strong></td>
<td style="text-align:left"><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td>
</tr>
<tr>
<td style="text-align:left">mode</td>
<td style="text-align:left"><code>circulation</code></td>
<td style="text-align:left">列表播放模式, <code>circulation</code>, <code>random</code>, <code>single</code>, <code>order</code></td>
</tr>
<tr>
<td style="text-align:left">autoplay</td>
<td style="text-align:left"><code>true</code></td>
<td style="text-align:left">自动播放，移动端浏览器暂时不支持此功能</td>
</tr>
<tr>
<td style="text-align:left">mutex</td>
<td style="text-align:left"><code>true</code></td>
<td style="text-align:left">该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td>
</tr>
<tr>
<td style="text-align:left">listmaxheight</td>
<td style="text-align:left"><code>340px</code></td>
<td style="text-align:left">播放列表的最大长度</td>
</tr>
<tr>
<td style="text-align:left">preload</td>
<td style="text-align:left"><code>auto</code></td>
<td style="text-align:left">音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td>
</tr>
<tr>
<td style="text-align:left">theme</td>
<td style="text-align:left"><code>#ad7a86</code></td>
<td style="text-align:left">播放器风格色彩设置</td>
</tr>
</tbody>
</table>
<p>关于如何设置自建的 Meting API 服务器地址，以及其他 MetingJS 配置，请参考章节<a href="https://www.singlelovely.cn/post/a84d1ef1.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE30-%E6%96%B0%E5%8A%9F%E8%83%BD">自定义配置</a></p>
<h3 id="PJAX-兼容"><a class="header-anchor" href="#PJAX-兼容"></a>PJAX 兼容</h3>
<p>若在 Hexo 中使用了 PJAX，可能需要自己手动清理 APlayer 全局实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">&#x27;pjax:start&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    <span class="keyword">if</span> (<span class="built_in">window</span>.aplayers) &#123;        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">window</span>.aplayers.length; i++) &#123;            <span class="built_in">window</span>.aplayers[i].destroy();        &#125;        <span class="built_in">window</span>.aplayers = [];    &#125;&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="自定义配置"><a class="header-anchor" href="#自定义配置"></a>自定义配置</h2>
<p>在 Hexo 配置文件 <code>_config.yml</code> 中配置：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">aplayer:</span>  script_dir: some/place                        # <span class="meta">Public</span> 目录下脚本目录路径，默认: <span class="string">&#x27;assets/js&#x27;</span>  style_dir: some/place                         # <span class="meta">Public</span> 目录下样式目录路径，默认: <span class="string">&#x27;assets/css&#x27;</span>  cdn: http://xxx/aplayer<span class="number">.</span>min<span class="number">.</span><span class="keyword">js</span>                # 引用 APlayer<span class="number">.</span><span class="keyword">js</span> 外部 CDN 地址 (默认不开启)  style_cdn: http://xxx/aplayer<span class="number">.</span>min<span class="number">.</span>css         # 引用 APlayer<span class="number">.</span>css 外部 CDN 地址 (默认不开启)  meting: true                                  # MetingJS 支持  meting_api: http://xxx/api<span class="number">.</span>php                # 自定义 Meting API 地址  meting_cdn: http://xxx/Meing<span class="number">.</span>min<span class="number">.</span><span class="keyword">js</span>           # 引用 Meting<span class="number">.</span><span class="keyword">js</span> 外部 CDN 地址 (默认不开启)  asset_inject: true                            # 自动插入 Aplayer<span class="number">.</span><span class="keyword">js</span> 与 Meting<span class="number">.</span><span class="keyword">js</span> 资源脚本, 默认开启  externalLink: http://xxx/aplayer<span class="number">.</span>min<span class="number">.</span><span class="keyword">js</span>       # 老版本参数，功能与参数 cdn 相同</span><br></pre></td></tr></table></figure>
<p>如不需要自定义脚本，请不用在<code>_config.yml</code> 中配置这些内容。</p>
<h2 id="故障排除"><a class="header-anchor" href="#故障排除"></a>故障排除</h2>
<h3 id="标签参数空格问题"><a class="header-anchor" href="#标签参数空格问题"></a>标签参数空格问题</h3>
<p>在 Hexo 标签中，用户可能无法直接在标签参数中<a href="https://github.com/hexojs/hexo/issues/1455">加入空格</a></p>
<p>如果遇到这类问题，请直接将参数用双引号括起来使用，如下所示：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">&#123;<span class="meta">%</span> aplayer <span class="string">&quot;Caffeine&quot;</span> <span class="string">&quot;Jeff Williams&quot;</span> <span class="string">&quot;caffeine.mp3&quot;</span> <span class="string">&quot;autoplay&quot;</span> <span class="string">&quot;width:70%&quot;</span> <span class="string">&quot;lrc:caffeine.txt&quot;</span> <span class="meta">%</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="重复载入-Aplayer-js-资源脚本问题"><a class="header-anchor" href="#重复载入-Aplayer-js-资源脚本问题"></a>重复载入 Aplayer.js 资源脚本问题</h3>
<p>(5.10 以上版本的 hexo 不存在此问题)<br>
本插件通过 <code>after_render:html</code>过滤器 , 将 <code>APlayer.js</code> 和 <code>Meting.js</code> 插入到使用了本插件标签 的 HTML 文件中:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  <span class="tag">&lt;<span class="name">head</span>&gt;</span>    ...    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;assets/js/aplayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;assets/js/meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  ...<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是 <code>after_render:html</code> 在一些情形下可能无法被正常触发:</p>
<ul>
<li><a href="https://github.com/hexojs/hexo-inject/issues/1">Does not work with hexo-renderer-jade</a></li>
<li><code>after_render:html</code> 似乎在 Hexo 服务器模式默认配置中无法被调用 (<code>hexo server</code>), 遇到这种情况用户可能需要使用 <code>hexo-server</code> 的静态文件解析模式 ( <code>hexo server -s</code>) .</li>
</ul>
<p>如果在博客生成过程中，插件发现 <code>after_render:html</code> 没有被调用，那么插件将会通过 <code>after_post_render</code>过滤器来植入脚本。但是使用 <code>after_post_render</code> 会有重复载入 <code>APlayer.js</code> 的情况（例如当一个页面中存在多篇博客时），以及一些非文章页面将无法使用本插件。</p>
<p>如果想完全解决这个问题，用户可能需要自己在主题文件中手动加入 <code>Aplayer.js</code> 与 <code>Meting.js</code>，同时关闭插件的自动脚本插入功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span>  </span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>gcc简易用法小结</title>
    <url>/post/54851/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>GCC, the GNU Compiler Collection，顾名思义，这是一个编译器集合。它支持多种语言的编译，比如 <a href="https://gcc.gnu.org/c99status.html">C</a>, <a href="https://gcc.gnu.org/projects/cxx-status.html">C++</a>, Objective-C, <a href="https://gcc.gnu.org/fortran/">Fortran</a>, Go等。</p>
<p>基于我学习计算机系统的目的，那么下面对gcc的简易用法，主要就是围绕C和汇编语言展开。初学gcc和计算机系统，有不完善不正确的地方，以后再慢慢完善改进。</p>
<a id="more"></a>
<h2 id="最简单的用法"><a class="header-anchor" href="#最简单的用法"></a>最简单的用法</h2>
<p>以编译一个最简单的hello world的c程序 <code>hello.c</code>为例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用gcc编译它的最简单命令就是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc hello.c</span><br></pre></td></tr></table></figure>
<p>执行这个命令后，就会生成一个编译好的可执行的二进制文件 <code>a.out</code> ，运行 <code>a.out</code> 就会输出Hello World!</p>
<h2 id="分步解析"><a class="header-anchor" href="#分步解析"></a>分步解析</h2>
<p>其实，这个简单的  <code>gcc hello.c</code>  命令的背后，包括了多个处理步骤：预处理、编译、汇编和链接。我们可以添加更多参数，来看看gcc编译过程中的上述多个处理步骤中每一步的具体作用和效果。</p>
<h3 id="预处理"><a class="header-anchor" href="#预处理"></a>预处理</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">gcc</span> <span class="selector-tag">-E</span> <span class="selector-tag">hello</span><span class="selector-class">.c</span> <span class="selector-tag">-o</span> <span class="selector-tag">hello</span><span class="selector-class">.i</span></span><br></pre></td></tr></table></figure>
<blockquote>
<pre><code>  -E  Stop after the preprocessing stage; do not run the compiler proper.  The output is in
           the form of preprocessed source code, which is sent to the standard output.
</code></pre>
</blockquote>
<blockquote>
<p>-o file<br>
Place output in file file.  This applies to whatever sort of output is being produced,<br>
whether it be an executable file, an object file, an assembler file or preprocessed C<br>
code.</p>
</blockquote>
<blockquote>
<pre><code>  file.c
      C source code that must be preprocessed.

  file.i
      C source code that should not be preprocessed.
</code></pre>
</blockquote>
<p>从上面在gcc手册中摘抄的解释，可以看出，<code>-E</code> 参数表示仅对源码进行预处理，即仅进行源代码检测，并替换我们源程序中的宏定义；<code>-o</code> 参数表示输出文件的存放路径，它是个全局参数；最后输出的 <code>.i</code> 文件表示一种不需进行预处理的代码文本文件，从这里我们也可以看出，gcc一定程度上依赖文件后缀名来判断文件类型。</p>
<h3 id="编译"><a class="header-anchor" href="#编译"></a>编译</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">gcc</span> <span class="selector-tag">-S</span> <span class="selector-tag">hello</span><span class="selector-class">.i</span> <span class="selector-tag">-o</span> <span class="selector-tag">hello</span><span class="selector-class">.s</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>-S  Stop after the stage of compilation proper; do not assemble.  The output is in the<br>
form of an assembler code file for each non-assembler input file specified.<br>
By default, the assembler file name for a source file is made by replacing the suffix<br>
.c, .i, etc., with .s.</p>
</blockquote>
<blockquote>
<pre><code>  file.s
           Assembler code.
</code></pre>
</blockquote>
<p><code>-S</code> 参数表示只编译（这里的编译指的是将高级语言转换成汇编语言的过程），而不进行后续步骤。执行完毕后，产生<code>.s</code> 文件，这个文本文件里的内容是汇编代码。</p>
<h3 id="汇编"><a class="header-anchor" href="#汇编"></a>汇编</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">gcc</span> <span class="selector-tag">-c</span> <span class="selector-tag">hello</span><span class="selector-class">.s</span> <span class="selector-tag">-o</span> <span class="selector-tag">hello</span><span class="selector-class">.o</span></span><br></pre></td></tr></table></figure>
<blockquote>
<pre><code>  -c  Compile or assemble the source files, but do not link.  The linking stage simply is
           not done.  The ultimate output is in the form of an object file for each source file.
</code></pre>
</blockquote>
<blockquote>
<pre><code>      By default, the object file name for a source file is made by replacing the suffix .c,
      .i, .s, etc., with .o.
</code></pre>
</blockquote>
<p><code>-c</code> 参数表示只用汇编器进行汇编，而不进行后续步骤。汇编的过程，就是将汇编指令替换成机器指令（机器码）。之所以说是替换，是因为汇编指令和机器指令一一对应，可以说汇编指令就是机器指令的符号化映射。</p>
<p>执行完毕后，会得到一个可重定位的二进制文件（包含了相对地址，该文件分配到了相对内存地址，从来地址0开始，并非机器运行时的真实内存地址或虚拟地址，但知道了相对位置，后面在对应插入内容是可行的，所以说是可重定位），里面包含一对的机器码和数据。</p>
<blockquote>
<ul>
<li>存放程序的为代码段，存放数据的为数据段</li>
<li>真实的内存单元地址称为物理地址/绝对内存地址，而程序中的地址为逻辑地址<br>
由于程序并不知道自己会被加载到哪，因此访存如果用绝对地址将会出错，在执行程序时就需要<strong>程序重定位</strong>这个操作。</li>
</ul>
</blockquote>
<p>现在得到的虽然是包含了机器码的二进制文件，但是还不能直接运行，因为还没有程序中包含的printf对应的二进制文件包含进来，我们预处理的时候只是在源代码中插入了<code>stdio</code> 的头文件而已。而且还尚未分配可用的内存地址给这个程序，也就是说，要能被正常运行的话，当它被加载到内存中去的时候，cpu要知道它应该被加载到内存的那个地方，它所包含的每条指令或数据在内存中的确切地址。</p>
<h3 id="链接"><a class="header-anchor" href="#链接"></a>链接</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">gcc</span> <span class="selector-tag">hello</span><span class="selector-class">.o</span> <span class="selector-tag">-o</span> <span class="selector-tag">hello</span></span><br></pre></td></tr></table></figure>
<p>最后一步，链接，就是给之前的<code>.o</code>二进制文件链接上要用到的其他的 <code>.o</code> ，比如<code>printf.o</code> ，并给程序分配确切的内存地址（虚拟内存地址），最后生成的才是可执行的二进制文件。</p>
<h2 id="分部运行"><a class="header-anchor" href="#分部运行"></a>分部运行</h2>
<p>gcc它是一个编译器集合套件，编译一个程序的时候包含预处理、编译、汇编和链接这四个步骤，其实每一步骤，它都有不同的组件来执行的，分别对于预处理器、编译器、汇编器、链接器。使用高级语言的时候，我们可以使用gcc一步到位，但当我们用汇编语言的时候，大可不必用gcc再加一堆参数，而是直接单独地使用它的组件，比如汇编器（as）、链接器（ld）等，来完成我们的工作。</p>
<p>汇编器，as，对应gcc汇编那一步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">as asm_code.s -o asm_code.o</span><br></pre></td></tr></table></figure>
<p>链接器，ld，对应gcc链接那一步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ld asm_code.o -o asm_code</span><br></pre></td></tr></table></figure>
<p>其中，<code>-o</code>参数和gcc中的是一样的。</p>
<h2 id="其他常用参数"><a class="header-anchor" href="#其他常用参数"></a>其他常用参数</h2>
<ul>
<li><code>-x language</code>：强制编译器指定的语言编译器来编译某个源程序。</li>
<li><code>-g</code> 指示编译器，在编译的时候，产生调试信息，以便后面用gdb对其进行调试。</li>
<li><code>-std=</code> 指定编译器采取的标准，比如设置<code>-std=c99</code> 让编译器以c99标准来编译c代码。</li>
</ul>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<p><a href="https://markrepo.github.io/tools/2018/06/25/gcc/">gcc常用选项详解</a></p>
<p><a href="https://github.com/guodongxiaren/LinuxTool/blob/master/gcc.md">gcc编译器学习记录</a></p>
<p><a href="https://www.cnblogs.com/ggjucheng/archive/2011/12/14/2287738.html">Linux GCC常用命令</a></p>
<p><a href="https://gcc.gnu.org/">https://gcc.gnu.org/</a></p>
<p><a href="https://junhaow.com/2018/06/10/028%20%7C%20%E5%85%B3%E4%BA%8E%20C%20%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%20PCAL%20%E7%9A%84%E6%80%BB%E7%BB%93/">关于 C 语言编译流程 PCAL 的总结</a></p>
<p><a href="https://chhzh123.github.io/blogs/2019-03-07-x86-asm/">x86架构与汇编语言</a></p>
<p><a href="https://whatsrtos.github.io/blog_archive/%5BC%5D%20C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E9%93%BE%E6%8E%A5/">C语言的编译与链接 - gcc,ld,ar等工具的介绍</a></p>
]]></content>
      <tags>
        <tag>计算机系统</tag>
      </tags>
  </entry>
  <entry>
    <title>html学习笔记</title>
    <url>/post/50736/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>html基础知识扫盲，只是了解层面。</p>
<a id="more"></a>
<h1 id="HTML-速查列表"><a class="header-anchor" href="#HTML-速查列表"></a>HTML 速查列表</h1>
<h2 id="HTML-基本文档"><a class="header-anchor" href="#HTML-基本文档"></a>HTML 基本文档</h2>
<h2 id="code￼0"><a class="header-anchor" href="#code￼0"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> <span class="tag">&lt;<span class="name">html</span>&gt;</span> <span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">title</span>&gt;</span>文档标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">body</span>&gt;</span> 可见文本... <span class="tag">&lt;/<span class="name">body</span>&gt;</span> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></h2>
<h2 id="基本标签（Basic-Tags）"><a class="header-anchor" href="#基本标签（Basic-Tags）"></a>基本标签（Basic Tags）</h2>
<h2 id="code￼1"><a class="header-anchor" href="#code￼1"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>最大的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> . . . <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span> . . . <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span> . . . <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span> . . . <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>最小的标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> （换行）</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span> （水平线）</span><br><span class="line"><span class="comment">&lt;!-- 这是注释 --&gt;</span></span><br></pre></td></tr></table></figure></h2>
<h2 id="文本格式化（Formatting）"><a class="header-anchor" href="#文本格式化（Formatting）"></a>文本格式化（Formatting）</h2>
<h2 id="code￼2"><a class="header-anchor" href="#code￼2"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>计算机代码<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>强调文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>键盘输入<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>预格式化文本<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>更小的文本<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>重要的文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span>&gt;</span> （缩写）</span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span> （联系信息）</span><br><span class="line"><span class="tag">&lt;<span class="name">bdo</span>&gt;</span> （文字方向）</span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> （从另一个源引用的部分）</span><br><span class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span> （工作的名称）</span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span> （删除的文本）</span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span> （插入的文本）</span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span> （下标文本）</span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span> （上标文本）</span><br></pre></td></tr></table></figure></h2>
<h2 id="链接（Links）"><a class="header-anchor" href="#链接（Links）"></a>链接（Links）</h2>
<p>普通的链接：<code>&lt;a href=&quot;http://www.example.com/&quot;&gt;链接文本&lt;/a&gt; </code>图像链接：<code> &lt;a href=&quot;http://www.example.com/&quot;&gt;&lt;img src=&quot;URL&quot; alt=&quot;替换文本&quot;&gt;&lt;/a&gt;</code>邮件链接：<code> &lt;a href=&quot;mailto:webmaster@example.com&quot;&gt;发送e-mail&lt;/a&gt;</code> 书签：<code> &lt;a id=&quot;tips&quot;&gt;提示部分&lt;/a&gt; &lt;a href=&quot;#tips&quot;&gt;跳到提示部分&lt;/a&gt;</code></p>
<hr>
<h2 id="图片（Images）"><a class="header-anchor" href="#图片（Images）"></a>图片（Images）</h2>
<p><code>&lt;img src=&quot;URL&quot; alt=&quot;替换文本&quot; height=&quot;42&quot; width=&quot;42&quot;&gt;</code></p>
<hr>
<h2 id="样式-区块（Styles-Sections）"><a class="header-anchor" href="#样式-区块（Styles-Sections）"></a>样式/区块（Styles/Sections）</h2>
<h2 id="code￼3"><a class="header-anchor" href="#code￼3"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:red;&#125; <span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:blue;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span>文档中的块级元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>文档中的内联元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></h2>
<h2 id="无序列表"><a class="header-anchor" href="#无序列表"></a>无序列表</h2>
<h2 id="code￼4"><a class="header-anchor" href="#code￼4"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>     <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span>     <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></h2>
<h2 id="有序列表"><a class="header-anchor" href="#有序列表"></a>有序列表</h2>
<h2 id="code￼5"><a class="header-anchor" href="#code￼5"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>     <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span>     <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></h2>
<h2 id="定义列表"><a class="header-anchor" href="#定义列表"></a>定义列表</h2>
<h2 id="code￼6"><a class="header-anchor" href="#code￼6"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>项目 1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述项目 1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>项目 2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述项目 2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></h2>
<h2 id="表格（Tables）"><a class="header-anchor" href="#表格（Tables）"></a>表格（Tables）</h2>
<h2 id="code￼7"><a class="header-anchor" href="#code￼7"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>表格数据<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>表格数据<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></h2>
<h2 id="框架（Iframe）"><a class="header-anchor" href="#框架（Iframe）"></a>框架（Iframe）</h2>
<h2 id="code￼8"><a class="header-anchor" href="#code￼8"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;demo_iframe.htm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></h2>
<h2 id="表单（Forms）"><a class="header-anchor" href="#表单（Forms）"></a>表单（Forms）</h2>
<h2 id="code￼9"><a class="header-anchor" href="#code￼9"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo_form.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post/get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">size</span>=<span class="string">&quot;40&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Send&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>樱桃<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;60&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></h2>
<h2 id="实体（Entities）"><a class="header-anchor" href="#实体（Entities）"></a>实体（Entities）</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span> 等同于 <span class="tag">&lt; &amp;<span class="attr">gt</span>; 等同于 &gt;</span> <span class="symbol">&amp;#169;</span> 等同于 ©</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>html5页面嵌入</title>
    <url>/post/40033/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>几个常见的h5嵌入标签的属性及用法介绍，包括iframe标签、embed标签以及script标签。</p>
<a id="more"></a>
<h1 id="iframe标签"><a class="header-anchor" href="#iframe标签"></a>iframe标签</h1>
<p><code>&lt;iframe&gt;</code> 标签规定一个内联框架。一个内联框架被用来在当前 HTML 文档中嵌入另一个文档。所有主流浏览器都支持 <code>&lt;iframe&gt;</code> 标签。</p>
<h2 id="属性"><a class="header-anchor" href="#属性"></a>属性</h2>
<p>一些关于iframe的属性，注意以下仅是Hexo支持的的部分属性。<br>
关于iframe的src属性：</p>
<iframe srcdoc="<p>Hello world!</p>" src="demo_iframe_srcdoc.htm"></iframe>
|          属性          | 描述                                     |                              值                              |
| :--------------------: | :--------------------------------------- | :----------------------------------------------------------: |
|          name          | 规定 iframe 的名称。                     |                             name                             |
|         height         | 规定iframe的高度                         |                            pixels                            |
|         width          | 规定iframe的宽度                         |                            pixels                            |
|          src           | 规定iframe显示的url                      |                             url                              |
|       scrolling        | 规定是否在 iframe 中显示滚动条。         |                     yes<br/>no<br/>auto                      |
|         srcdoc         | 规定页面中的 HTML 内容显示在 iframe 中。 |                          html-code                           |
| seamless<br>(无缝衔接) | 规定 iframe 看起来像是父文档中的一部分。 |                           seamless                           |
|        sandbox         | 对 iframe的内容定义一系列额外的限制。    | allow-forms<br/>allow-same-origin<br/>allow-scripts<br/>allow-top-navigation |
|      marginheight      | 规定 iframe的顶部和底部的边距。          |                            pixels                            |
|      marginwidth       | 规定 iframe的左右侧的边距。              |                            pixels                            |
|      frameborder       | 规定是否显示 iframe>周围的边框。         |                            1<br>0                            |
<h2 id="使用"><a class="header-anchor" href="#使用"></a>使用</h2>
<p>设置参数嵌入‘菜鸟教程相关页面’，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;菜鸟教程&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">height</span>= <span class="string">2055</span></span></span><br><span class="line"><span class="tag"><span class="attr">width</span>= <span class="string">800</span></span></span><br><span class="line"><span class="tag"><span class="attr">seamless</span></span></span><br><span class="line"><span class="tag"><span class="attr">frameborder</span>=<span class="string">0</span></span></span><br><span class="line"><span class="tag"><span class="attr">marginwidth</span>=<span class="string">0</span></span></span><br><span class="line"><span class="tag"><span class="attr">marginheight</span>=<span class="string">0</span></span></span><br><span class="line"><span class="tag"><span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">&quot;https://www.runoob.com/tags/tag-iframe.html&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>嵌入效果如下：</p>
<iframe
name="菜鸟教程"
height= 2055
width= 800
seamless
frameborder=0
marginwidth=0
marginheight=0
scrolling="no"
src="https://www.runoob.com/tags/tag-iframe.html">
</iframe>
<h1 id="embed标签"><a class="header-anchor" href="#embed标签"></a>embed标签</h1>
<p>embed标签定义了一个容器，用来嵌入外部应用或者互动程序（插件）。所有主流浏览器都支持 embed 标签。</p>
<h2 id="属性-v2"><a class="header-anchor" href="#属性-v2"></a>属性</h2>
<p>一些关于embed的属性，注意以下仅是Hexo支持的的部分属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>height</td>
<td>规定嵌入内容的高度。</td>
<td>pixels</td>
</tr>
<tr>
<td>width</td>
<td>规定嵌入内容的宽度。</td>
<td>pixels</td>
</tr>
<tr>
<td>src</td>
<td>规定嵌入内容的url</td>
<td>url</td>
</tr>
<tr>
<td>typy</td>
<td>规定嵌入内容的 MIME 类型。<br/>注：MIME = Multipurpose Internet Mail Extensions。</td>
<td>MIME_type</td>
</tr>
</tbody>
</table>
<h2 id="使用-v2"><a class="header-anchor" href="#使用-v2"></a>使用</h2>
<p>设置参数嵌入‘菜鸟教程相关页面’，代码如下：</p>
<embed width=800 height=1150 src="https://www.runoob.com/tags/tag-embed.html">
<h1 id="Script标签"><a class="header-anchor" href="#Script标签"></a>Script标签</h1>
<p>script标签用于定义客户端脚本，比如 JavaScript。script元素既可包含脚本语句，也可以通过 “src” 属性指向外部脚本文件。JavaScript 通常用于图像操作、表单验证以及动态内容更改。所有主流浏览器都支持 script标签。</p>
<h2 id="属性-v3"><a class="header-anchor" href="#属性-v3"></a>属性</h2>
<p>如果使用 “src” 属性，则 <code>&lt;script&gt; </code>元素必须是空的。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.runoob.com/tags/att-script-async.html">async</a></td>
<td>规定异步执行脚本（仅适用于外部脚本）。</td>
<td>async</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-script-charset.html">charset</a></td>
<td>规定在脚本中使用的字符编码（仅适用于外部脚本）。</td>
<td><em>charset</em></td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-script-defer.html">defer</a></td>
<td>规定当页面已完成解析后，执行脚本（仅适用于外部脚本）。</td>
<td>defer</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-script-src.html">src</a></td>
<td>规定外部脚本的 URL。</td>
<td><em>URL</em></td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-script-type.html">type</a></td>
<td>规定脚本的 MIME 类型。</td>
<td><em>MIME-type</em></td>
</tr>
</tbody>
</table>
<h2 id="使用-v3"><a class="header-anchor" href="#使用-v3"></a>使用</h2>
<p>代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> </span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">&quot;http://www.xiami.com/widget/player-single?uid=32329501&amp;sid=1776238762&amp;mode=js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<script 
type="text/javascript" 
src="http://www.xiami.com/widget/player-single?uid=32329501&sid=1776238762&mode=js"></script>]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>iframe嵌入视频自适应</title>
    <url>/post/62577/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>解决用iframe标签嵌入视频时，视频与页面不协调的问题。</p>
<a id="more"></a>
<ol>
<li>
<p>首先在<code>site\themes\next\source\css\_custom.stl</code>创建一个CSS类</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aspect-ratio&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=24287094&amp;cid=40734416&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;1&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>其次，用一个aspect-ratio类的块内容把iframe包起来,再写到md文件中，如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aspect-ratio&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=24287094&amp;cid=40734416&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;1&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>最后，效果如下</p>
</li>
</ol>
<iframe src="http://pan-yz.chaoxing.com/preview/showpreview_439134309035544576.html"></iframe>]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>intel汇编语言注意事项</title>
    <url>/post/53258/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>学习汇编语言，教材用的王爽的《汇编语言》，也就是intel风格的汇编语言。在此记录汇总一些注意事项。</p>
<a id="more"></a>
<p>程序模板</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    # 你的代码从这里开始</span><br><span class="line">    mov bx,0020h</span><br><span class="line">    mov ds,bx</span><br><span class="line">    mov bx,0000h</span><br><span class="line">    mov cx,003fh</span><br><span class="line">s:  mov [bx],bx</span><br><span class="line">    inc bx</span><br><span class="line">    loop s</span><br><span class="line">    # 你的代码从这里结束</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<ol>
<li>debug模式下，默认16进制，而程序源代码编写则默认10进制。故在编写汇编程序时，要在数字的后面加h以表示16进制。此外，如果如果该数以字母开头，还要在前面加一个0。</li>
<li>各个寄存器有其特定含义，cx作为循环计数器，循环语句每执行一次，cx自减，直到为零；bx作为基本寄存器，可以用[bx]取偏移地址，而ax不行。</li>
</ol>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<p><a href="https://www.cnblogs.com/Base-Of-Practice/articles/6883892.html">实验4  [bx]和loop的使用</a></p>
]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>multipart_fromdata请求方法的python实现</title>
    <url>/post/60046/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>遇见这种请求方式好几次了，都是现查现用，原理啥的都不了解，用了就忘。以前觉得键值对的json/data(application/x-www-form-urlencoded)就够了，现在看来这玩意儿还挺重要的，应用挺广泛，有必要记录学习一下了。</p>
<a id="more"></a>
<p>multipart_fromdata将要传输的内容分为多个部分，各部分内容用一个统一的分隔符标识开始（这个分隔符可以是任意内容，只要能起唯一标识的分隔作用即可），直到遇到下一部分内容的分隔符，而最后一部分内容的分隔符需要加上<code>--</code>以示结束。各部分内容都有许多参数，有的是自动生成，有的是固定用法（规定要这么写），其中最主要的name和value，相当于传统的www-form中的键值对 <code>&#123;name : value &#125;</code></p>
<p>具体形式如下：</p>
<figure class="highlight irpf90"><table><tr><td class="code"><pre><span class="line">-----------------------------Separator-<span class="keyword">character</span></span><br><span class="line">Content-Disposition: <span class="keyword">form</span>-<span class="keyword">data</span>; <span class="keyword">name</span>=<span class="string">&quot;part1&quot;</span></span><br><span class="line"></span><br><span class="line">value1</span><br><span class="line">-----------------------------Separator-<span class="keyword">character</span></span><br><span class="line">Content-Disposition: <span class="keyword">form</span>-<span class="keyword">data</span>; <span class="keyword">name</span>=<span class="string">&quot;part2&quot;</span></span><br><span class="line"></span><br><span class="line">value2</span><br><span class="line">-----------------------------Separator-<span class="keyword">character</span></span><br><span class="line">Content-Disposition: <span class="keyword">form</span>-<span class="keyword">data</span>; <span class="keyword">name</span>=<span class="string">&quot;the-last-part&quot;</span></span><br><span class="line"></span><br><span class="line">value3</span><br><span class="line">-----------------------------Separator-<span class="keyword">character</span>--</span><br></pre></td></tr></table></figure>
<p>基于实用原则，这里只给出最简单的实现方法，具体原理不细揪，multipart_fromdata的格式直接用现成的python第三方库requests_toolbelt来实现。话不多说，直接上两个例子。</p>
<h2 id="案例一：智慧树"><a class="header-anchor" href="#案例一：智慧树"></a>案例一：智慧树</h2>
<p>智慧树个人头像更换时，上传图片就是用的multipart/fromdata。通过浏览器抓包，可以看到其发送的内容。</p>
<p>首先，查看其请求头部分：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ghcdn/img/20210305234017.png" alt=""></p>
<p>从上图可看出，这个请求使用multipart_fromdata编码格式来传输内容，且各部分内容间的分隔符为<code>-----------------------------15883549271175967036310302373</code></p>
<p>其次，查看请求部分的payload数据：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ghcdn/img/20210305233128.png" alt="image-20210305232720034"><br>
<img src="https://cdn.jsdelivr.net/gh/ghcdn/img/20210305233234.png" alt=""></p>
<p>从中可以看出，其payload的内容就只有一个，即imgFile，只包含二进制图片文件。其中，Content-Disposition、Content-Type和filename根据被打开的文件确定，name对应的imgFile则是这个参数的名称。</p>
<p>具体python实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests_toolbelt <span class="keyword">import</span> MultipartEncoder</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>(<span class="params">file</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;https://base1.zhihuishu.com/able-commons/cut/imgupload&#x27;</span></span><br><span class="line">    payload = &#123;<span class="string">&#x27;imgFile&#x27;</span>: (file, open(file, <span class="string">&#x27;rb&#x27;</span>), <span class="string">&#x27;image/png&#x27;</span>)&#125;</span><br><span class="line">    m = MultipartEncoder(payload)</span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: m.content_type&#125;</span><br><span class="line">    r = requests.post(url, headers=headers, data=m)</span><br><span class="line">    print(r.json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    upload(<span class="string">&#x27;xxx.png&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="案例二：超星云盘"><a class="header-anchor" href="#案例二：超星云盘"></a>案例二：超星云盘</h2>
<p>超星云盘网页版上传文件也是用的multipart_fromdata编码格式。</p>
<p>同样地，先看其请求头：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ghcdn/img/20210305235820.png" alt=""></p>
<p>可以看出，其使用multipart_fromdata编码格式来传输内容，且各部分内容间的分隔符为<code>---------------------------1682890927123165149599605516</code></p>
<p>再看其请求部分的payload：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ghcdn/img/20210306000414.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ghcdn/img/20210306000533.png" alt=""></p>
<p>可以看出，其包含多个参数folderId，puid，id，name，type，size等等，最后一个参数是上传的二进制图片。</p>
<p>具体python实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>(<span class="params">filePath, name, folderId</span>):</span></span><br><span class="line">    payload = &#123;<span class="string">&#x27;folderId&#x27;</span>: folderId, <span class="string">&#x27;puid&#x27;</span>: uid, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;WU_FILE_2&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: name, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;image/png&#x27;</span>, <span class="string">&#x27;lastModifiedDate&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;size&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;file&#x27;</span>: (name, open(filePath, <span class="string">&#x27;rb&#x27;</span>), <span class="string">&#x27;image/png&#x27;</span>)&#125;</span><br><span class="line">    cookies = &#123;&#125; <span class="comment"># 需要添加cookies认证</span></span><br><span class="line">    m = MultipartEncoder(payload)</span><br><span class="line">    header = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: m.content_type&#125;</span><br><span class="line">    p = requests.post(<span class="string">&#x27;https://pan-yz.chaoxing.com/opt/upload&#x27;</span>, data=m,</span><br><span class="line">                      cookies=cookies, headers=header)</span><br><span class="line">    print(name, p.json()[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> p.json()[<span class="string">&#x27;msg&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<p><a href="https://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean">https://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean</a></p>
<p><a href="https://stackoverflow.com/questions/8659808/how-does-http-file-upload-work">https://stackoverflow.com/questions/8659808/how-does-http-file-upload-work</a></p>
<p><a href="https://pypi.org/project/requests-toolbelt/">https://pypi.org/project/requests-toolbelt/</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的变量</title>
    <url>/post/13563/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>python中分好多变量，全局变量、局部变量、静态变量（类变量）、实例变量，整得人有点懵，今天就腾出时间给它来一次总结。</p>
<a id="more"></a>
<h2 id="定义"><a class="header-anchor" href="#定义"></a>定义</h2>
<p>1、全局变量：在模块内、在所有函数外面、在class外面</p>
<p>2、局部变量：在函数内、在class的方法内（未加self修饰的)</p>
<p>3、静态变量：在class内的，但不在class的方法内的 （也叫类变量）</p>
<p>4、实例变量：在class的方法内的，用self修饰的变量</p>
<p>python是面向对象编程的语言，在python里一切皆对象，从这个角度来看，上述变量都是不同对象的属性</p>
<p>a、全局变量：属于模块的属性</p>
<p>b、局部变量：属于方法或函数的属性</p>
<p>c、 类变量：属于类的属性</p>
<p>d、 实例变量：属于对象的属性</p>
<h2 id="简介"><a class="header-anchor" href="#简介"></a>简介</h2>
<p>下面开始用实际例子来说明一下全局变量和局部变量、静态变量和实例变量以及关键字global和nonlocal的使用。</p>
<h3 id="全局变量与局部变量"><a class="header-anchor" href="#全局变量与局部变量"></a>全局变量与局部变量</h3>
<p>全局变量与局部变量的作用域不同，全局变量在整个模块（也就是整个py文件）内起作用，而局部变量只在某个具体的函数内起作用。</p>
<p>全局变量与局部变量由于作用域不同，二者并无直接关系，即使是使用相同变量的变量名，这两个变量仍然是属于不同的变量。</p>
<p>在函数内获取并修改全局变量时，要使用global声明，如果仅仅只是获取全局变量，可以不进行global声明，但是规范上是建议大家这么做的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">global</span> x <span class="comment"># 如果不声明global，会报错</span></span><br><span class="line">    x = x + <span class="number">2</span> <span class="comment"># 获取并修改全局变量x</span></span><br><span class="line">    print(id(x),x)</span><br><span class="line">    </span><br><span class="line">print(id(x),x)</span><br><span class="line">foo()</span><br><span class="line">print(id(x),x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#140703138079376 1</span></span><br><span class="line"><span class="comment">#140703138079440 3</span></span><br><span class="line"><span class="comment">#140703138079440 3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    y = x + <span class="number">2</span> <span class="comment">#仅获取全局变量x</span></span><br><span class="line">    print(y)</span><br><span class="line">foo() <span class="comment">#输出为3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(id(x),x) <span class="comment">#仅获取全局变量x</span></span><br><span class="line"></span><br><span class="line">print(id(x),x)</span><br><span class="line">foo()</span><br><span class="line">print(id(x),x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#140703138079376 1</span></span><br><span class="line"><span class="comment">#140703138079376 1</span></span><br><span class="line"><span class="comment">#140703138079376 1</span></span><br></pre></td></tr></table></figure>
<p>如果在未声明global的前提下，在函数内创建一个与全局变量同名的变量，创建的变量默认为局部变量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    print(id(x),x) <span class="comment">#仅获取全局变量x</span></span><br><span class="line"></span><br><span class="line">print(id(x),x)</span><br><span class="line">foo()</span><br><span class="line">print(id(x),x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#140703138079376 1</span></span><br><span class="line"><span class="comment">#140703138079408 2</span></span><br><span class="line"><span class="comment">#140703138079376 1</span></span><br></pre></td></tr></table></figure>
<h3 id="global与nonlocal"><a class="header-anchor" href="#global与nonlocal"></a>global与nonlocal</h3>
<p>global上面已经讲到过了，其作用域是整个模块，这里主要讲一下nonlocal的用法。</p>
<p>nonlocal，顾名思义，就是非局部的意思，它是用在嵌套函数的内层函数里的，否则会报错，它的意义跟global几乎一样，用来声明变量为上一层函数的变量（注意，是上一层），若果要获取并修改上一层的变量，必须要进行nonlocal声明，只是获取上层变量的话，可以不进行nonlocal声明（实际上不声明的话，默认就是获取上一层的变量）。</p>
<p>同样的，由于不同层的变量作用域不同，它们之间并无直接关系，即使是使用相同变量的变量名，这些变量仍然是属于不同的变量。如果在未声明nonlocal的前提下，在函数内创建一个与全局变量同名的变量，创建的变量默认为局部变量。（由于和global用法一样，所以直接抄global部分的说明。。。）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#不进行nonlocal声明情况下，函数内创建的变量默认就是作用域为该函数范围内的新变量</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    x = <span class="string">&quot;outer&quot;</span></span><br><span class="line">    print(id(x),x)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span>     <span class="comment">#如果直接修改x = x + &quot;sometext&quot;,则报错</span></span><br><span class="line">        x = <span class="string">&quot;inner&quot;</span>  <span class="comment">#如果把x=&quot;inner&quot;注释掉，则inner()获取上一层的x=&quot;outer&quot;</span></span><br><span class="line">        print(id(x),x)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">mostinner</span>():</span></span><br><span class="line">            x = <span class="string">&quot;mostinner&quot;</span></span><br><span class="line">            print(id(x),x)</span><br><span class="line">        mostinner()</span><br><span class="line">    inner()</span><br><span class="line"></span><br><span class="line">print(id(x),x)</span><br><span class="line">outer()</span><br><span class="line">print(id(x),x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#140703138079376 1</span></span><br><span class="line"><span class="comment">#1589698876448 outer</span></span><br><span class="line"><span class="comment">#1589690252624 inner</span></span><br><span class="line"><span class="comment">#1589698638192 mostinner</span></span><br><span class="line"><span class="comment">#140703138079376 1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进行nonlocal声明后，可以获取修改上层变量</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    x = <span class="string">&quot;outer&quot;</span></span><br><span class="line">    print(id(x),x)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x = x +<span class="string">&#x27;_inner&#x27;</span></span><br><span class="line">        print(id(x),x)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">mostinner</span>():</span></span><br><span class="line">            x = <span class="string">&quot;mostinner&quot;</span></span><br><span class="line">            print(id(x),x)</span><br><span class="line">        mostinner()</span><br><span class="line">    inner()</span><br><span class="line">    print(id(x),x)</span><br><span class="line"></span><br><span class="line">print(id(x),x)</span><br><span class="line">outer()</span><br><span class="line">print(id(x),x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#140703138079376 1</span></span><br><span class="line"><span class="comment">#2570221048472 outer</span></span><br><span class="line"><span class="comment">#2570220811056 outer_inner</span></span><br><span class="line"><span class="comment">#2570220760688 mostinner</span></span><br><span class="line"><span class="comment">#2570220811056 outer_inner</span></span><br><span class="line"><span class="comment">#140703138079376 1</span></span><br></pre></td></tr></table></figure>
<p>总结一下，global和nonlocal的用法是一样的，global用于声明全局变量，nonlocal用于声明上一层函数的变量；不加声明的话，则默认获取全局或上层变量（如果没有，则创建作用于本函数的局部变量）；不加声明修改则报错。</p>
<h3 id="静态变量与实例变量"><a class="header-anchor" href="#静态变量与实例变量"></a>静态变量与实例变量</h3>
<ul>
<li>
<p>类变量： 类变量就是定义在类中，但是在函数体之外的变量。通常不使用<code>self.变量名</code>赋值的变量。类变量通常不作为类的实例变量的，类变量对于所有实例化的对象中是公用的。</p>
</li>
<li>
<p>实例变量： 实例变量是定义在方法中的变量，使用<code>self</code>绑定到实例上的变量，只是对当前实例起作用。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo</span>:</span></span><br><span class="line">    all = <span class="number">0</span>   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self</span>):</span></span><br><span class="line">        foo.all += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">i1 = foo() <span class="comment">#实例化对象</span></span><br><span class="line">i2 = foo()</span><br><span class="line">print(i1.all,i2.all,foo.all) <span class="comment">#0 0 0</span></span><br><span class="line"></span><br><span class="line">i1.add()</span><br><span class="line">print(i1.all,i2.all,foo.all) <span class="comment">#1 1 1 </span></span><br><span class="line"></span><br><span class="line">i2.add()</span><br><span class="line">print(i1.all,i2.all,foo.all) <span class="comment">#2 2 2 </span></span><br><span class="line"></span><br><span class="line">foo().add()</span><br><span class="line">print(i1.all,i2.all,foo.all) <span class="comment">#3 3 3</span></span><br></pre></td></tr></table></figure>
<p>未完待续。。。</p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/cadi2011/article/details/52457754">https://blog.csdn.net/cadi2011/article/details/52457754</a></p>
<p><a href="https://www.jianshu.com/p/9fefb52ca91b">https://www.jianshu.com/p/9fefb52ca91b</a></p>
<p><a href="https://www.imooc.com/article/14652">https://www.imooc.com/article/14652</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python函数中的参数传递</title>
    <url>/post/15489/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>python函数中传入数值或者字符串等不可变类型时，在函数内修改传入参数的值，传入的参数的在原始值并不会跟着变，但是当你传入的是列表、字典等可变类型的数据时，在函数内修改他们的值，这些变量的原始值会跟着一块变。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">x1,x2</span>):</span></span><br><span class="line">    print(id(x1),id(x2))</span><br><span class="line">    x1 += <span class="number">1</span></span><br><span class="line">    x2.append(<span class="number">4</span>)</span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;id(x1)&#125;</span> <span class="subst">&#123;x1&#125;</span> \n<span class="subst">&#123;id(x1)&#125;</span> <span class="subst">&#123;x2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(id(a),a)</span><br><span class="line">print(id(b),b)</span><br><span class="line">foo(a,b)</span><br><span class="line">print(id(a),a)</span><br><span class="line">print(id(b),b)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">140715638874832 3</span></span><br><span class="line"><span class="string">1566903090312 [1, 2, 3]</span></span><br><span class="line"><span class="string">140715638874832 1566903090312</span></span><br><span class="line"><span class="string">140715638874864 4 </span></span><br><span class="line"><span class="string">140715638874864 [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">140715638874832 3</span></span><br><span class="line"><span class="string">1566903090312 [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>python函数中的参数传入既不是传数值也不是传引用，而是直接传入name，也就是标识符。</p>
<p>参考：</p>
<p><a href="https://www.zhihu.com/question/20591688">https://www.zhihu.com/question/20591688</a></p>
<p><a href="https://www.quora.com/Are-arguments-passed-by-value-or-by-reference-in-Python">https://www.quora.com/Are-arguments-passed-by-value-or-by-reference-in-Python</a></p>
<p><a href="http://effbot.org/zone/python-objects.htm">http://effbot.org/zone/python-objects.htm</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python可哈希对象</title>
    <url>/post/36300/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>一个对象在其生命周期内，如果保持不变，就是hashable（可哈希的），常见的可哈希的数据类型有数值、字符串、列表；而内容可更改的，比如列表、字典、集合等则不是。</p>
<a id="more"></a>
<p>官方解释：</p>
<p>An object is hashable if it has a hash value which never changes during its lifetime (it needs a <strong>hash</strong>() method), and can be compared to other objects (it needs an <strong>eq</strong>() or <strong>cmp</strong>() method). Hashable objects which compare equal must have the same hash value.</p>
<p>Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.</p>
<p>All of Python’s immutable built-in objects are hashable, while no mutable containers (such as lists or dictionaries) are. Objects which are instances of user-defined classes are hashable by default; they all compare unequal, and their hash value is their id().</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>screen简易用法总结</title>
    <url>/post/6948/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>screen是一个非常实用的工具，提供从单个 SSH 会话（或本地会话）中使用多个 shell 窗口（会话）的能力。当会话被分离或网络中断时，screen 各会话中启动的进程仍将运行，而且你可以随时重新连接到 某个指定screen 会话查看情况。</p>
<a id="more"></a>
<h2 id="启动一个screen会话"><a class="header-anchor" href="#启动一个screen会话"></a>启动一个screen会话</h2>
<p>可以简单的在命令行里直接输入<code>screen</code>，这样便启动并进入到一个screen会话了。</p>
<p>如果你想给这个screen会话做个标记，也就是给它一个名称，可以用<code>screen -S ssesion_name</code>替换上述的<code>screen</code>,这样就启动并进入到一个名为session_name的screen会话了。</p>
<h2 id="在screen会话执行命令"><a class="header-anchor" href="#在screen会话执行命令"></a>在screen会话执行命令</h2>
<p>进入screen会话后，便可在这个screen会话中执行一些你想执行的命令了，比如升级系统<code>apt update &amp;&amp; apt upgrade -y</code>。</p>
<h2 id="分离screen会话"><a class="header-anchor" href="#分离screen会话"></a>分离screen会话</h2>
<p>如果你的命令执行时间比较长，比如上述的升级系统操作，而你又不想等待，想干点别的事。</p>
<p>这个时候你可以分离这个会话，让它在后台运行，按<code>Ctrl + a + d</code>即可分离当前会话，回到本地会话。</p>
<h2 id="重返screen会话"><a class="header-anchor" href="#重返screen会话"></a>重返screen会话</h2>
<p>当你觉得时间差不多了，想回到之前升级系统那个会话看看运行结果或运行情况，你可以输入<code>screen -r</code>返回之前的会话，前提是你只创建了一个screen会话，如果有多个，你还得知道会话的pid或者name。</p>
<p>可以输入<code>screen -ls</code>查看当前所有的screen会话，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen -ls</span><br><span class="line"></span><br><span class="line">There are screens on:</span><br><span class="line">7880.session    (Detached)</span><br><span class="line">7934.session2   (Detached)</span><br><span class="line">7907.session1   (Detached)</span><br><span class="line">3 Sockets in /var/run/screen/S-root.</span><br></pre></td></tr></table></figure>
<p>其中7880,7934,7907为各screen会话对应的pid，而session，session1，session2则为它们对应的name。</p>
<p>可以指定pid <code>screen -r 7934</code>或指定name <code>screen -r -S session2</code>回到指定的screen会话中。</p>
<h2 id="结束screen会话"><a class="header-anchor" href="#结束screen会话"></a>结束screen会话</h2>
<p>这个很简单，在screen会话中输入exit或者按<code>Ctrl + d</code>即可结束当前会话。</p>
<p>参考：</p>
<p><a href="https://handerfly.github.io/linux/2019/03/31/Screan%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/">https://handerfly.github.io/linux/2019/03/31/Screan命令的使用/</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>个人发卡站解决方案</title>
    <url>/post/57248/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>打造一款属于自己的发卡站/小卖铺。</p>
<a id="more"></a>
<h2 id="发卡系统"><a class="header-anchor" href="#发卡系统"></a>发卡系统</h2>
<h3 id="环境配置："><a class="header-anchor" href="#环境配置："></a>环境配置：</h3>
<p>web服务器：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> nginx</span><br></pre></td></tr></table></figure>
<p>数据库依赖：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> mariadb-<span class="keyword">server</span> redis-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-debian-10">https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-debian-10</a></p>
<p>php依赖：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">sudo apt install php-<span class="keyword">cli</span> php-redis</span><br></pre></td></tr></table></figure>
<p>fileinfo检查：<a href="https://my.oschina.net/HeAlvin/blog/3075963">https://my.oschina.net/HeAlvin/blog/3075963</a></p>
<p>opcache扩展：<a href="https://learnku.com/articles/18782">https://learnku.com/articles/18782</a></p>
<p>composer安装：<a href="https://www.runoob.com/w3cnote/composer-install-and-usage.html">https://www.runoob.com/w3cnote/composer-install-and-usage.html</a></p>
<h3 id="下载发卡源码"><a class="header-anchor" href="#下载发卡源码"></a>下载发卡源码</h3>
<p>注意点：</p>
<ol>
<li>更改网站拥有者为www-data</li>
<li>要自己先创建好数据库再配置<code>.env</code></li>
</ol>
<h3 id="支付宝当面付对接"><a class="header-anchor" href="#支付宝当面付对接"></a>支付宝当面付对接</h3>
<p>申请当面付</p>
<p><a href="https://openhome.alipay.com/platform/appManage.htm">https://openhome.alipay.com/platform/appManage.htm</a></p>
<p>自研开发</p>
<p>网页&amp;移动应用（会有一个默认的应用2.0）</p>
<p>默认的应用2.0中添加公钥（接口加签）（验证手机号，下载工具，生成密钥对）</p>
<p>在发卡支付网关管理界面，填入</p>
<p>商户id：appid</p>
<p>商户key：支付宝公钥（注意不是自己生成的公钥）</p>
<p>商户密钥：自己生成的密钥</p>
<h3 id="添加进程守护"><a class="header-anchor" href="#添加进程守护"></a>添加进程守护</h3>
<p><a href="https://learnku.com/laravel/t/3592/using-supervisor-to-manage-laravel-queue-processes">https://learnku.com/laravel/t/3592/using-supervisor-to-manage-laravel-queue-processes</a></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:laravel-worker]</span></span><br><span class="line"><span class="attr">process_name</span>=%(program_name)s_%(process_num)<span class="number">02</span>d</span><br><span class="line"><span class="attr">command</span>=php /var/www/faka/artisan queue:work --tries=<span class="number">3</span></span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">user</span>=www-data</span><br><span class="line"><span class="attr">numprocs</span>=<span class="number">8</span></span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/supervisor/laravel-queue.log</span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/var/</span>log<span class="regexp">/supervisor/</span></span><br><span class="line">touch <span class="regexp">/var/</span>log<span class="regexp">/supervisor/</span>laravel-queue.log</span><br><span class="line">chown www-data <span class="regexp">/var/</span>log<span class="regexp">/supervisor/</span>laravel-queue.log</span><br></pre></td></tr></table></figure>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># zsh报错的话，请写成bash脚本</span></span><br><span class="line">supervisorctl <span class="literal">start</span> laravel-worker:*</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line"><span class="attribute">supervisorctl</span> restart <span class="literal">all</span></span><br></pre></td></tr></table></figure>
<p>常见错误：</p>
<p><a href="https://segmentfault.com/a/1190000007232022">https://segmentfault.com/a/1190000007232022</a></p>
]]></content>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>使用jsdom解决用PyExecJS执行含有document、window等对象的js代码时出现的问题</title>
    <url>/post/61392/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="解决dom依赖"><a class="header-anchor" href="#解决dom依赖"></a>解决dom依赖</h2>
<p>首先，全局安装jsdom，并获取安装路径。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i jsdom -g</span><br><span class="line"><span class="built_in">npm</span> root -g</span><br></pre></td></tr></table></figure>
<p>其次，在要执行的js代码的最前面加上如下代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jsdom = <span class="built_in">require</span>(<span class="string">&quot;jsdom&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; JSDOM &#125; = jsdom;</span><br><span class="line"><span class="keyword">const</span> dom = <span class="keyword">new</span> JSDOM(<span class="string">`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`</span>);</span><br><span class="line"><span class="built_in">window</span> = dom.window;</span><br><span class="line"><span class="built_in">document</span> = <span class="built_in">window</span>.document;</span><br><span class="line">XMLHttpRequest = <span class="built_in">window</span>.XMLHttpRequest;</span><br></pre></td></tr></table></figure>
<p>最后，指定jsom路径并执行js代码。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">js = execjs.compile(js_text,cwd=<span class="string">r&#x27;C:\Users\w001\AppData\Roaming\npm\node_modules&#x27;</span>)</span><br><span class="line">result = js.call(function_name,arg_1,arg_2,...,arg_n)</span><br></pre></td></tr></table></figure>
<h2 id="解决atob依赖"><a class="header-anchor" href="#解决atob依赖"></a>解决atob依赖</h2>
<p>首先，安装atob依赖。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i atob -g</span><br></pre></td></tr></table></figure>
<p>其次，在要执行的js代码最前面加上如下代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> atob = <span class="built_in">require</span>(<span class="string">&#x27;atob&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>最后，执行js代码即可</p>
<p>参考：</p>
<p><a href="https://www.cnblogs.com/huchong/p/11044238.html">https://www.cnblogs.com/huchong/p/11044238.html</a></p>
<p><a href="https://segmentfault.com/q/1010000015660773">https://segmentfault.com/q/1010000015660773</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>使用pyinstaller打包py脚本成exe</title>
    <url>/post/53573/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="python相关文件"><a class="header-anchor" href="#python相关文件"></a>python相关文件</h2>
<ol>
<li>py文件 : 源码文件，运行需要使用者安装Python环境并且安装依赖的各种库。</li>
<li>pyc文件：pyc文件是Python解释器可以识别的二进制码，可跨平台的，需要使用者安装相应版本的Python和依赖库。</li>
<li>可执行文件：不需要安装python环境和依赖库,可针对不同平台需要打包不同的可执行文件（Windows,Linux,Mac,…）</li>
</ol>
<a id="more"></a>
<h2 id="pyinstaller原理"><a class="header-anchor" href="#pyinstaller原理"></a>pyinstaller原理</h2>
<ol>
<li>PyInstaller工具可以把python解析器和脚本打包成一个可执行的文件，并不是编译成真正的机器码，打包成一个可执行文件后运行效率可能会降低，好处就是在使用者的机器上可以不用安装python和你的脚本依赖的库。</li>
<li>利用PyInstaller对指定的的脚本打包时，会先分析脚本所依赖的其他脚本，然后根据导包路径去查找，把所有相关的脚本收集起来，包括Python解析器，然后根据你的命令参数可分别生成文件夹，或者打包成一个可执行文件。</li>
<li>无论是生成的文件夹里的可执行文件或者只打包成一个可执行文件都可以直接运行，前者需要把整个文件夹都给别人。</li>
</ol>
<h2 id="pyinstaller安装"><a class="header-anchor" href="#pyinstaller安装"></a>pyinstaller安装</h2>
<p>Windows下，打开命令行，执行pip install PyInstaller命令即可。在windows下，pyinstaller需要PyWin32的支持，当用pip安装PyInstaller时未找到PyWin32，会自动安装pypiwin32。</p>
<h2 id="pyinstaller打包"><a class="header-anchor" href="#pyinstaller打包"></a>pyinstaller打包</h2>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pyinstaller -F <span class="keyword">test</span>.py</span><br></pre></td></tr></table></figure>
<p>-F 指只生成一个exe文件，不生成其他dll文件<br>
-w 不弹出交互窗口,如果你想程序运行的时候，与程序进行交互，则不加该参数<br>
-i 设定程序图标 ，其后面的xxx.ico文件就是程序小图标<br>
-p 添加二进制文件查找目录。比如upx压缩程序所在目录。<br>
–hidden-import=pandas._libs.tslibs.timedeltas 隐藏相关模块的引用</p>
<p>将upx.exe放入pyinstaller.exe所在的同级目录（一般是python安装目录下的script文件夹），可不用-p参数指定upx.exe所在位置。附upx程序下载地址：<a href="https://github.com/upx/upx/releases">https://github.com/upx/upx/releases</a></p>
<p>如果报错，则不要使用upx压缩 pyinstaller --noupx --onedir --onefile</p>
<p>参考：</p>
<p><a href="https://stackoverflow.com/questions/38811966/error-when-creating-executable-file-with-pyinstaller">https://stackoverflow.com/questions/38811966/error-when-creating-executable-file-with-pyinstaller</a></p>
<p><a href="https://pyinstaller.readthedocs.io/en/stable/index.html">https://pyinstaller.readthedocs.io/en/stable/index.html</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>修复破损locales</title>
    <url>/post/22809/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>使用cleanbit清理Linux Mint系统的日志、缓存、多余的本地化语言包，忘记去设置保留中文简体，结果只剩下英文了。</p>
<p>网上查了好久，开始想通过TimeShift备份的文件进行恢复，谁知道它locales文件夹里没有zh_hans这些语言包，和本地系统一样，只有个C.UTF-8和en。</p>
<p>备份系统后，试着复制文件去覆盖，结果没成功。。。</p>
<a id="more"></a>
<p>苦心人天不负，一番苦苦搜寻，我终于找到解决方法了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先完全卸载</span></span><br><span class="line">sudo apt-get purge locales</span><br><span class="line">sudo apt-get purge language-pack-zh-hans</span><br><span class="line">sudo apt-get purge language-pack-gnome-zh-hans</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再重新安装</span></span><br><span class="line">sudo apt-get install locales</span><br><span class="line">sudo apt-get install language-pack-zh-hans</span><br><span class="line">sudo apt-get install language-pack-gnome-zh-hans</span><br></pre></td></tr></table></figure>
<p>还遗留的小问题是，部分应用和系统菜单没有恢复到中文，我估计是缓存没生效，或者这部分得另外配置。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<p><a href="https://unix.stackexchange.com/questions/299536/locale-error-cannot-open-locale-definition-file-fa-ir">https://unix.stackexchange.com/questions/299536/locale-error-cannot-open-locale-definition-file-fa-ir</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>利用PyExecJS在python中执行js函数</title>
    <url>/post/35005/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ol>
<li>
<p>安装：<code>pip install PyExecJS</code></p>
</li>
<li>
<p>运行时，execjs会自动使用当前电脑上的运行时环境（建议用nodejs）</p>
</li>
<li>
<p>简单使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">js = execjs.compile(js_text)</span><br><span class="line">result = js.call(<span class="string">&#x27;function_name&#x27;</span>,arg_1,arg_2,...,arg_n)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>参考：</p>
<p><a href="https://blog.csdn.net/weixin_40539892/article/details/88982716">https://blog.csdn.net/weixin_40539892/article/details/88982716</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>利用bs4获取html中注释文本</title>
    <url>/post/25570/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>方法一：用string代替text</p>
<p>string:输出单一子标签文本内容或注释内容（选其一，标签中包含两种内容则输出为None）</p>
<p>strings: 返回所有子孙标签的文本内容的生成器（不包含注释）</p>
<p>stripped_strings:返回所有子孙标签的文本内容的生成器（不包含注释,并且在去掉了strings中的空行和空格）</p>
<p>text:只输出文本内容，可同时输出多个子标签内容</p>
<p>get_text():只输出文本内容，可同时输出多个子标签内容</p>
<p>方法二：调用bs库中的Comment类</p>
<p>findAll(text=lambda text: isinstance(text, Comment))</p>
<p>参考：</p>
<p><a href="https://www.cnblogs.com/kongzhagen/p/8315204.html">https://www.cnblogs.com/kongzhagen/p/8315204.html</a></p>
<p><a href="https://blog.csdn.net/weixin_41710606/article/details/86089605">https://blog.csdn.net/weixin_41710606/article/details/86089605</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>利用nginx搭建文件服务器</title>
    <url>/post/42784/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>有时候本地网络不是那么方便，需要先在服务器下载文件，然后再从服务器把文件取回来，那么这时候考虑在服务器上搭建个简单的文件服务器来传输文件还是个不错的选择呢。</p>
<a id="more"></a>
<h2 id="添加server"><a class="header-anchor" href="#添加server"></a>添加server</h2>
<p>修改/etc/nginx/conf.d下的conf文件，没有的话，新建一个，在里面加入一个server，内容如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">### 文件服务器</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8090</span>;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">8090</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /root/share; <span class="comment">## 这里是你要分享的文件夹</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改user"><a class="header-anchor" href="#修改user"></a>修改user</h2>
<p>由于上面的索引文件夹是root用户所有，直接访问会403 forbidden的，所以要修改一下用户，打开/etc/nginx/nginx.conf,修改里面的开头部分的user项，把 <code>user www-data;</code> 改为 <code>user root;</code></p>
<h2 id="重启nginx"><a class="header-anchor" href="#重启nginx"></a>重启nginx</h2>
<p>完成配置后，重启nginx使配置生效，<code>service nginx restart</code> ,如果开了防火墙，记得把刚才设置的端口通过一下。</p>
]]></content>
      <tags>
        <tag>奇技淫巧</tag>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title>利用tmux和htop保持GoogleCloudShell会话活跃</title>
    <url>/post/59369/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Goole Cloud Shell真是不错，配置高，性能好，唯一的缺点是会话容易断线。本文讲述一个保持GCS会话活跃的小技巧。</p>
<p>俺发现只要htop在运行，GCS回话就会保持活跃，就不会断线。所以，只要咱们保持htop运行，就可以放心地干其他的事了，那自然就想到多路会话和终端分屏。而tmux是一个比较好用的多路会话软件，下面演示如何操作。</p>
<a id="more"></a>
<p>htop和tmux貌似都是预装在GCS分配的虚拟机上的，如果没有就执行如下命令安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install htop tmux -y</span><br></pre></td></tr></table></figure>
<p>然后利用tmux将终端分屏</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tmux split-window -h</span><br></pre></td></tr></table></figure>
<p>上面的参数 <code>-h</code> 表示垂直分屏，缺省则水平分屏。</p>
<p>接着，运行htop，很简单</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">htop</span><br></pre></td></tr></table></figure>
<p>最后，在窗口间移动光标，按下<code>Ctrl + b +o</code>即可将光标移到另一个窗口，然后就可以开心的干其他事了，而不用担心会话会突然断掉。</p>
]]></content>
      <tags>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title>变量和指针</title>
    <url>/post/59343/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>看了计算机系统课程的&quot;从底层来了解指针&quot;补充视频后，对变量和指针的概念有了一个更清晰的印象。下面，我将用自己的话来说说我对指针和变量的理解。</p>
<a id="more"></a>
<h2 id="变量"><a class="header-anchor" href="#变量"></a>变量</h2>
<p>变量可分为两种，一般变量和指针变量。无论是那种变量，都会包含三个信息，类型、值和内存地址。所谓的内存地址就是我们常说的指针，其实我们常说的指针、地址、内存地址都是表达的同一个东西。</p>
<p>其中，变量类型用来确定变量的大小，也就是用来确定应该给这个变量分配多少个字节的内存。</p>
<p>而变量的内存地址，就是操作系统分配这个变量的内存空间的首字节的虚拟内存地址。是的，内存中的每个直接都有对于的物理地址和虚拟地址，其中物理地址就是地址总线寻址时所传来的编号；而虚拟内存地址，由操作系统以通过进程的概念，给程序分配的看似连续的一片字节编号（我现在对进程和虚拟内存还不是很了解，等以后再做补充完善）。</p>
<p>变量中的值，就是这个变量所分配到的内存空间中的一堆二进制数字，至于它表示什么，取决于你以何种方式去看待它。若以整数 <code>%d</code> 的方式来 <code>printf</code>  它，系统就会从该变量的首地址开始取4个字节（int类型大小与操作系统有关，这里仅仅是举例），然后以规定的整数的表示方式进行解读并将结果展示出来；若以字符串 <code>%s</code> 的方式 <code>printf</code> 它，系统就会从该变量的首地址开始逐个字节地取数据解读出对应的整数，并对照acsii表将字符打印出来，直到遇到0。</p>
<p>指针变量的值，存放的是内存地址。内存地址的大小和操作系统有关，32bit的操作系统一个地址占32个bit，即4个字节。</p>
<h2 id="数组和指针"><a class="header-anchor" href="#数组和指针"></a>数组和指针</h2>
<p>数组是个特殊的变量，它由一些系列类型相同的变量按顺序排列而成，字符串是数组的一个特例。数组名前面的字符定义数组中变量的类型，比如<code>int * array[10]</code> 表示 数组中的变量为指向整型的指针 。</p>
<p>数组名作为变量时，表示的是一个指针，也即数组的首地址。而在数组名加下标的形式，比如 <code>array[0]</code> ，则表示的是将数组首地址作为基本地址（基址）加上数组下标作为偏移量（偏移地址，偏址）所构成的合成地址对应的变量。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">	<span class="comment">// 输入数组即输入数组的首地址</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">array</span>[<span class="number">0</span>]);</span><br><span class="line">	<span class="comment">// 输入array[0]即输入对应地址上的变量，相当于*p</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, <span class="built_in">array</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针变量虽然有类型，但是也能将不同类型的指针（地址）赋值给它，因为都是地址，地址的大小也是一样的。但是试图通过 <code>*p</code>  （假设 <code>p</code> 是一个指针） 给指针对应的变量赋值时，赋的值会被强制转换为指针 <code>p</code> 所声明的类型。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1532</span>;</span><br><span class="line"><span class="keyword">float</span> * fp;</span><br><span class="line">*fp = i;</span><br><span class="line"><span class="comment">// *fp对应的变量将会是浮点型的1532.0</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>计算机系统</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Github Action自动部署Hexo</title>
    <url>/post/873/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>老早就听闻Hexo + Github Action这操作，源文件备份，自动化构建，省时省力，真是羡煞我也，但是一直对Git操作和Github Action的写法不熟悉，弄不来。现在总算有时间学一遍Git的操作了，学完刚好来实践一番,顺便把过程记录一下。</p>
<a id="more"></a>
<h2 id="准备工作"><a class="header-anchor" href="#准备工作"></a>准备工作</h2>
<h3 id="本地Hexo博客正常"><a class="header-anchor" href="#本地Hexo博客正常"></a>本地Hexo博客正常</h3>
<p>首先，确认 <code>_config.yml</code> 文件中有类似如下的 <code>GitHub Pages</code> 配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:YulinChan/YulinChan.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>其次，确保Hexo能在本地正确运行且可以部署到Github Page。</p>
<h3 id="创建所需的仓库"><a class="header-anchor" href="#创建所需的仓库"></a>创建所需的仓库</h3>
<h4 id="远程Github仓库"><a class="header-anchor" href="#远程Github仓库"></a>远程Github仓库</h4>
<ol>
<li>创建 <code>blog</code> 仓库用来存放 Hexo 项目</li>
<li>创建 <code>your.github.io</code> 仓库用来存放静态博客页面</li>
</ol>
<h4 id="本地Git仓库"><a class="header-anchor" href="#本地Git仓库"></a>本地Git仓库</h4>
<p>进入在本地Hexo博客文件夹下，先去除一些不必要的文件和文件夹，如<code>.deploy_git</code>，因为这些文件在部署的时候都会重新生成一遍，所以没必要保留。 以后在本地调试只需要执行<code>hexo s</code>即可，没有必要在本地生成html。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">rm -rf .deploy_git</span><br></pre></td></tr></table></figure>
<p>另外，值得注意的是，如果Hexo的主题是通过<code>git clone</code>获取的（即主题文件夹也是一个git仓库），会出现git仓库嵌套，那么在部署Github Action时就要使用特定actions/checkout来完整签出仓库内容，否则在自动部署时会找不到主题模板。当然了，还有一个比较简单粗暴的方法，删除主题文件下Git仓库相关文件及文件夹，如<code>.git</code> ，我当然是用的删除法啦。</p>
<p>然后，执行如下命令，初始化本地Git仓库并与Github上的远程仓库想关联。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;init git&quot;</span><br><span class="line">git remote add origin git@github.com:YulinChan/blog.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<h3 id="生成部署密钥"><a class="header-anchor" href="#生成部署密钥"></a>生成部署密钥</h3>
<p>执行如下命令来生存ssh密钥对</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;Hexo Deploy Key&quot; -f github-deploy-key -N &quot;&quot;</span><br></pre></td></tr></table></figure>
<p>当前目录下会有 <code>github-deploy-key</code> 私钥 和 <code>github-deploy-key.pub</code>  公钥两个文件。</p>
<h3 id="配置部署密钥"><a class="header-anchor" href="#配置部署密钥"></a>配置部署密钥</h3>
<h4 id="blog仓库上添加私钥"><a class="header-anchor" href="#blog仓库上添加私钥"></a>blog仓库上添加私钥</h4>
<p>复制 <code>github-deploy-key</code> 文件内容，在 <code>blog</code> 仓库 <code>Settings -&gt; Secrets -&gt; Add a new secret</code> 页面上添加。</p>
<ol>
<li>在 <code>Name</code> 输入框填写 <code>HEXO_DEPLOY_KEY</code>。</li>
<li>在 <code>Value</code> 输入框填写 <code>github-deploy-key</code> 文件内容。</li>
</ol>
<h4 id="your-github-io仓库上添加公钥"><a class="header-anchor" href="#your-github-io仓库上添加公钥"></a>your.github.io仓库上添加公钥</h4>
<p>复制 <code>github-deploy-key.pub</code> 文件内容，在 <code>your.github.io</code> 仓库 <code>Settings -&gt; Deploy keys -&gt; Add deploy key</code> 页面上添加。</p>
<ol>
<li>在 <code>Title</code> 输入框填写 <code>HEXO_DEPLOY_PUB</code>。</li>
<li>在 <code>Key</code> 输入框填写 <code>github-deploy-key.pub</code> 文件内容。</li>
<li>勾选 <code>Allow write access</code> 选项。</li>
</ol>
<h2 id="创建Github-Action"><a class="header-anchor" href="#创建Github-Action"></a>创建Github Action</h2>
<p>在 <code>blog</code> 仓库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，目录结构如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">blog (repository)</span><br><span class="line">└── .github</span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure>
<p>在 <code>deploy.yml</code> 文件中填以下内容。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.repository.owner.id</span> <span class="string">==</span> <span class="string">github.event.sender.id</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">source</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$ACTION_DEPLOY_KEY&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">700</span> <span class="string">~/.ssh</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;chenyulin@yandex.com&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;YulinChan&quot;</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>
<p>上面的email和name要根据实际情况修改。</p>
<p>设置好上面的配置文件后，要先将其更新到本地Git仓库，不然会因为冲突而无法push，因为远程仓库添加了新文件。更新只需在本地Hexo博客文件夹执行pull更新即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>
<p>然后，随便生成一篇新文章并push到Github上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new my_new_post</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;new post&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>最后，可以到Github仓库的Actions里查看情况了，如果是绿色的勾则代表成功了。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<p><a href="https://tommy.net.cn/2020/08/06/deploy-hexo-with-github-actions/">https://tommy.net.cn/2020/08/06/deploy-hexo-with-github-actions/</a></p>
<p><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions">https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>基因文库</title>
    <url>/post/50990/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="定义"><a class="header-anchor" href="#定义"></a>定义</h2>
<p>我们通过<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%AD%90%E5%85%8B%E9%9A%86">分子克隆</a>的方法利用微生物群（比如大肠杆菌）来存储并扩增目标DNA片段，该目标DNA集合即称为基因文库。 其中，“文库”可以指生物群（携带有插入了目标DNA的克隆载体的生物），或者指所有克隆的载体分子的集合。</p>
<a id="more"></a>
<h2 id="分类"><a class="header-anchor" href="#分类"></a>分类</h2>
<p>基因文库分为基因组文库和部分基因文库（如cDNA文库）。将含有某种生物不同基因的许多DNA片段，导入受体菌的群体中储存，各个受体菌分别含有这种生物的不同的基因，称为基因文库；如果这个文库包含了某种生物的所有基因，那么，这种基因文库叫做基因组文库。如果这个文库只包含了某种生物的一部分基因，这种基因文库叫做部分基因文库，例如cDNA文库，mRNA反转录得到cDNA，从而形成cDNA文库。cDNA文库与基因组文库中的基因的区别在于cDNA文库在mRNA拼接过程中已经除去了内含子等成分，便于DNA重组时直接使用。</p>
<h3 id="部分基因文库"><a class="header-anchor" href="#部分基因文库"></a>部分基因文库</h3>
<p><strong>部分基因文库</strong>（英语：cDNA library）是以从特定来源（细胞集合，特定组织或整个生物体）纯化的<a href="https://zh.wikipedia.org/wiki/MRNA">mRNA</a>样品为模板，使用<a href="https://zh.wikipedia.org/wiki/%E9%80%86%E8%BD%AC%E5%BD%95%E9%85%B6">逆转录酶</a>形成的互补DNA与适当的载体连接后转化到受体菌形成的重组菌群。因此，它一定程度上反映了来源细胞在纯化mRNA时的生理环境下活跃转录的基因。</p>
<p>cDNA文库可用于反向遗传学，但它们仅代表给定生物体基因组的非常小（小于1％）的一部分。</p>
<p>cDNA文库的应用包括：</p>
<ul>
<li>发现新基因</li>
<li>克隆全长cDNA分子用于体外基因功能研究</li>
<li>研究在不同细胞或组织中表达的mRNA</li>
<li>研究不同细胞或组织中的<a href="https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%80%A7%E5%89%AA%E6%8E%A5">选择性剪接</a></li>
</ul>
<h3 id="基因组文库"><a class="header-anchor" href="#基因组文库"></a>基因组文库</h3>
<p>把某种生物的基因组的全部遗传信息（DNA）切成适当长度的片段，并分别与载体结合，导入微生物细胞，形成<a href="https://zh.wikipedia.org/wiki/%E5%85%8B%E9%9A%86">克隆</a>。包含基因组中所有DNA序列的克隆的集合，称为<strong>基因组文库</strong>（英语：Genomic library）。[<a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E5%9B%A0%E6%96%87%E5%BA%93#cite_note-biopkueducn-1">1]</a></p>
<p>基因组文库的应用包括：</p>
<ul>
<li>确定给定生物的完整基因组序列（参见<a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E5%9B%A0%E7%BB%84%E8%AE%A1%E5%88%92">基因组计划</a>）</li>
<li>作为通过基因工程产生转基因动物的基因组序列的来源</li>
<li>体外调控序列功能的研究</li>
<li>癌组织中基因突变的研究</li>
</ul>
<h2 id="构建"><a class="header-anchor" href="#构建"></a>构建</h2>
<h3 id="克隆载体"><a class="header-anchor" href="#克隆载体"></a>克隆载体</h3>
<p><strong>克隆载体</strong>（英语：Cloning vector）是取自病毒，质粒或高等生物的细胞的一小段DNA，可以在生物体中稳定存在，并可以插入外源DNA片段用于克隆目的。因此，载体有易将DNA片段插入载体或从载体中除去的特征，例如通过用切割DNA的<a href="https://zh.wikipedia.org/wiki/%E9%99%90%E5%88%B6%E9%85%B6">限制酶</a>处理载体和外源DNA。由此产生的DNA片段含有平末端或粘性末端，然后通过分子连接将载体DNA和具有相容末端的外源DNA连接在一起。在将DNA片段克隆到克隆载体中后，可以将其进一步亚克隆到另一种用于更具体用途的载体中。</p>
<p>构建基因文库常常使用的载体有<a href="https://zh.wikipedia.org/wiki/%E5%99%AC%E8%8F%8C%E4%BD%93">λ噬菌体</a>，<a href="https://zh.wikipedia.org/wiki/%E9%BB%8F%E8%B3%AA%E9%AB%94">cosmid载体</a>，<a href="https://zh.wikipedia.org/wiki/%E8%B4%A8%E7%B2%92">质粒</a>和<a href="https://zh.wikipedia.org/w/index.php?title=%E4%BA%BA%E5%B7%A5%E6%9F%93%E8%89%B2%E4%BD%93&amp;action=edit&amp;redlink=1">人工染色体</a>（包括酵母人工染色体YAC、细菌人工染色体BAC、P1派生人工染色体PAC等）。</p>
<p>载体最常在细菌细胞中繁殖，但如果使用YAC（酵母人工染色体）作为载体，则可以在酵母细胞中繁殖。载体也可以在病毒中繁殖，但这可能是耗时且繁琐的。但通过使用病毒（通常是噬菌体）实现的高转化效率使得它们可用于包装载体，然后将其导入细菌（或酵母）细胞中。</p>
<h3 id="基因组文库的构建"><a class="header-anchor" href="#基因组文库的构建"></a>基因组文库的构建</h3>
<ul>
<li>载体DNA片段的制备：使用<a href="https://zh.wikipedia.org/wiki/%E9%99%90%E5%88%B6%E6%80%A7%E6%A0%B8%E9%85%B8%E5%85%A7%E5%88%87%E9%85%B6">限制性核酸内切酶</a>对载体DNA分子进行剪切，使之成为线状DNA。</li>
<li>供体DNA片段的制备：对生物体总DNA分离纯化，并使用机械剪切法或酶切法分离出特定大小的DNA片段。</li>
<li>供体与载体DNA的连接：使用<a href="https://zh.wikipedia.org/wiki/DNA%E9%80%A3%E6%8E%A5%E9%85%B6">DNA连接酶</a>将供体与载体连接成为重组DNA分子。</li>
<li>重组DNA分子的转化：将重组DNA分子<a href="https://zh.wikipedia.org/w/index.php?title=%E8%BD%AC%E5%8C%96%EF%BC%88%E7%94%9F%E7%89%A9%EF%BC%89&amp;action=edit&amp;redlink=1">转化</a>进入受体细胞。</li>
<li>筛选与保存</li>
</ul>
<h3 id="cDNA文库的构建"><a class="header-anchor" href="#cDNA文库的构建"></a>cDNA文库的构建</h3>
<ul>
<li>载体DNA片段的制备</li>
<li>多聚RNA的分离与纯化</li>
<li>双链cDNA的合成
<ul>
<li>第一条cDNA链：<a href="https://zh.wikipedia.org/wiki/%E9%80%86%E8%BD%AC%E5%BD%95">逆转录法</a></li>
<li>第二条cDNA链：碱解或酶解法除去RNA分子</li>
</ul>
</li>
<li>cDNA与载体DNA相连</li>
<li>重组cDNA分子的转移</li>
</ul>
<p>参考：<br>
<a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E5%9B%A0%E6%96%87%E5%BA%93">https://zh.wikipedia.org/wiki/基因文库</a><br>
<a href="https://baike.baidu.com/item/%E5%9F%BA%E5%9B%A0%E6%96%87%E5%BA%93">https://baike.baidu.com/item/基因文库</a></p>
]]></content>
      <tags>
        <tag>生物医学</tag>
      </tags>
  </entry>
  <entry>
    <title>如何刷入纯净的国际版MIUI</title>
    <url>/post/10245/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="刷入TWRP"><a class="header-anchor" href="#刷入TWRP"></a>刷入TWRP</h2>
<h2 id="刷入Masik"><a class="header-anchor" href="#刷入Masik"></a>刷入Masik</h2>
<h2 id="刷入MIUI-EU"><a class="header-anchor" href="#刷入MIUI-EU"></a>刷入MIUI EU</h2>
]]></content>
      <tags>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title>如何阅读期刊文献</title>
    <url>/post/58291/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Structure-of-a-Jounal-Article"><a class="header-anchor" href="#Structure-of-a-Jounal-Article"></a>Structure of a Jounal Article</h2>
<ol>
<li>title</li>
<li>keywords</li>
<li>introduction</li>
<li>experimrntal</li>
<li>results and disscussion</li>
</ol>
<ul>
<li>tables</li>
<li>figures</li>
</ul>
<ol start="6">
<li>summary/conclusion</li>
<li>reference</li>
</ol>
<a id="more"></a>
<h2 id="how-to-“survey”-the-article"><a class="header-anchor" href="#how-to-“survey”-the-article"></a>how to “survey” the article</h2>
<p><strong>feel free to stop reding the article at any point</strong><br>
<strong>write some notes so you don’t have to reread the article again</strong></p>
<ol>
<li>
<p>read the title anf keywoeds (these are probaly what you to look at the apper)</p>
</li>
<li>
<p>read abstract</p>
</li>
<li>
<p>read  conclusion</p>
</li>
<li>
<p>look at the tables &amp; figures(including acptions)<br>
This is really what was done in the work. This does not take much time so it is worth looking at before really getting into the details which will slow down the reading.</p>
</li>
<li>
<p>Read the introduction.<br>
This is the background needed and why the studywas done.</p>
</li>
<li>
<p>Read the results and discussion.<br>
This is the heart of the paper.</p>
</li>
<li>
<p>Read the experimental.<br>
This is how they did the work. You only get to this point ifyou are really interested and need to understand exactlywhat was done to better understand the meaning of the dataand its interpretation.</p>
</li>
</ol>
<p><video src="http://140.210.72.121/video/d6/c6/f3/b47d5c421bfdd496cdefbfc7321bf08c/sd.mp4" poster="https://p2.ananas.chaoxing.com/video/3a/1c/c9/59fd2cb97f0e8996c45e8ffc0a88ba7c/snapshot.jpg" controls="controls" style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;"> your browser does not support the video tag </video></p>
]]></content>
      <tags>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title>小鼠解剖流程</title>
    <url>/post/9755/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>做小动物实验中不仅要会养小动物，小动物长大了到了该收获数据的时候，还得会做实验收获你辛辛苦苦饲养了那么久才获得的小动物的实验数据，做到这一步时往往需要解剖小动物获取脏器进行分析，不同的实验有不同的要求，我做的这个实验室要获取小鼠的心、肝、脾、肾、肺、胃、大小肠以及肿瘤用来来做荧光分析以确定药物代谢情况。</p>
<a id="more"></a>
<h1 id="处死小鼠"><a class="header-anchor" href="#处死小鼠"></a>处死小鼠</h1>
<p>处死小老鼠前我们先用麻药把它麻倒（这里用的是异氟烷），当然啦这不是必要步骤，你也可以直接处死它。处死小老鼠我们一般用的是脊椎脱臼法， 左手拇指与食指向下按住鼠头的同时，右手抓住鼠尾用力向后拉，将其脊髓与脑髓拉断，鼠便立即死亡 。</p>
<p>补充一下，处死青蛙一般用毁髓法，用金属探针经枕骨大孔破坏大脑和脊髓而致死；处死兔子一般用空气注射法，从其耳部静脉注射一定量的空气（一般家兔注射10ml空气即可）；处死鲫鱼， 取活鲫鱼放在40 ℃温水中处死。</p>
<h1 id="解剖小鼠"><a class="header-anchor" href="#解剖小鼠"></a>解剖小鼠</h1>
<p>先沿表皮剪下肿瘤，从小鼠尿道口往上一点剪开表皮，这么做主要是为了防止剪破小鼠膀胱，一直剪到胸腔那里。再拨开表皮，露出脏器。此时可看到小鼠的前列腺（共两个，白色呈西兰花状）、睾丸（两个，有点白）、阴茎，看看就算了，本次实验用不到。</p>
<p>首先，扒开肠子，在脊柱中部可看到两个肾，一左一右，暗红色，红豆状，依次取下。其次，再取下脾，深红色，条带状 。然后，取下肝，没错最大那个器官，胃也在那里，胃连着小肠，胃和小肠也一并取下。最后，从肛门往上剪出一段大肠，大小肠容易搞混，连着肛门的一定是大肠。</p>
<p>往上剪开胸腔，取下小鼠的肺，两片连在一起，红白色，接着是心脏。</p>
<p>将取下的脏器放入盛有PBS缓冲液的表面皿清洗干净后放入另一个干净的表面皿，摆好各自的位置，术语叫摆盘，然后就可以拿去做荧光检测啦。</p>
]]></content>
      <tags>
        <tag>生物医学</tag>
      </tags>
  </entry>
  <entry>
    <title>小鼠饲养教程</title>
    <url>/post/15815/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>做小动物实验的前提是你得有小动物给你做，所以你得学会饲养自己的小动物，一般来说最适合做小动物实验的就是小老鼠啦，有黑鼠、白鼠、以及裸鼠三种，体型有大有小，有胖有瘦，看你的饲养技术啦！黑鼠最为活跃，白鼠次之，裸鼠最胆小。顺带一提，裸鼠是经过人为处理的有免疫缺陷的小老鼠，具体表现为没有毛，如果它开始长毛了说明它的免疫力在恢复，价格比较贵，适合植瘤。</p>
<a id="more"></a>
<p>换上对应的衣服，即换裸鼠、白鼠时分别穿不同的衣服，戴上手套、口罩、头套、脚套，手套喷医用酒精消毒。</p>
<p>取来待用的空笼，用酒精喷一下消毒，再用纸巾擦干，铺上一层木屑。取下待换的笼子，加水加食，再将上层网兜横放在待用笼上，抓住小鼠尾巴，将小鼠转移到新笼，将新笼放回架子上。（待换的笼和待用的笼的标签最好一样，这样就不用贴标签了。将笼子放回架子上时，通风口要和架子的通风管对接好。小鼠有明显伤口或发炎时要喷百多邦）</p>
<p>将木屑倒入垃圾袋，拿笼子去洗，然后放到风干箱或超净台里，打开紫外灯。用酒精擦拭桌面，扫地，倒点84拖地，脱掉衣服、口罩、头套、脚套，带上垃圾，关门关灯，撤离。</p>
]]></content>
      <tags>
        <tag>生物医学</tag>
      </tags>
  </entry>
  <entry>
    <title>当range为空时的for循环</title>
    <url>/post/47430/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我们知道在python中for循环常常和range函数一起用，如<code>for i in range(100):</code> ,其中range函数有由三个参数控制，起始值、终止值、步长，返回的是一个可迭代对象,该对象并非列表，而且是左开右闭的，也就是右边的数是不取的，比如range(2,3),那么能取到的值只能是2。</p>
<p>在素数判断中，我们判断一个数是否是素数，我们需要对这个取余，从2开始一直到这个数的平方根，如果出现余数为零的情况则判断它不是素数。那问题来了, 如果判断的数从2开始，那该从range(2,2)里遍历，注意到没有range(2,2)的左右边界是相等的，那么它会返回结果包含哪些数呢？还是会报错？</p>
<a id="more"></a>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">n = eval(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>,<span class="built_in">int</span>(i**<span class="number">0.5</span>)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i%j==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure>
<p>当range函数的右边边界小于等于左边界时（步长为正的情况下），并不会报错，返回的仍是range对象，用list方法将其转变为列表时，返回的是一个空列表，这种情况下搭配for循环使用，并不会执行for语句下对应的内容，即在上述代码中第二个for语句下的if语句不会被执行；如果for还搭配了else，则直接执行else语句下对应的内容，即上述代码中的<code>print(i)</code> 被执行。</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>循环语句中的break、continue和else</title>
    <url>/post/58629/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>python中循环语句有两大类 ，for循环和while循环。for循环常用于循环次数已知的情况，而且常常和range函数搭配使用；而while循环常用于循环次数未知的情况，利用条件判断来进行循环，只要条件为真则进行下去。</p>
<p>else、break和continue是常常搭配循环语句一起使用的，其中break和continue常常和if语句构成一个判断来改变循环的执行情况；else则是当循环体正常结束（break没有发生）时，提供一个最终的判断执行，通俗地说就是“直到……才”。</p>
<a id="more"></a>
<h2 id="break"><a class="header-anchor" href="#break"></a>break</h2>
<p>用于跳出for循环或while循环。对于多重循环情况，跳出最近的那重循环。</p>
<p>例，判断1~n内的所有素数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = eval(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>,int(i**<span class="number">0.5</span>)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i%j==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure>
<h2 id="continue"><a class="header-anchor" href="#continue"></a>continue</h2>
<p>用于结束本次循环并开始下一次循环。对于多重循环情况，作用于最近的那重循环。</p>
<h2 id="else"><a class="header-anchor" href="#else"></a>else</h2>
<p>在for循环和while循环后面可以跟着else分支，当for循环<mark>已经遍历完列表中所有元素</mark>或while循环的条件为False时，就会执行else分支。</p>
<p>例，输出100以内的素数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">101</span>): <span class="comment">#n在2~100之间取值</span></span><br><span class="line">    m=int(n**<span class="number">0.5</span>) <span class="comment">#m等于根号n取整</span></span><br><span class="line">    i=<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;=m:</span><br><span class="line">        <span class="keyword">if</span> n%i==<span class="number">0</span>: <span class="comment">#如果n能够被i整除</span></span><br><span class="line">            <span class="keyword">break</span> <span class="comment">#跳出while循环</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i&gt;m: <span class="comment">#如果i&gt;m，则说明对于i从2到m上的取值、都不能整除n，所以n是素数</span></span><br><span class="line">        print(n,end=<span class="string">&#x27; &#x27;</span>) <span class="comment">#输出n</span></span><br></pre></td></tr></table></figure>
<p>for循环的例子在break那部分已经给出一个了，实际上，判断素数这个用for循环会更简洁，不用自己在判断一次是否已经遍历了所有元素。</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>无题</title>
    <url>/post/58856/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>武汉不是一个特殊的符号，<br>
它仅仅代表着中国的一部分。<br>
就如同没有谁能像一座孤岛，<br>
在大海里独踞，<br>
每个人都是一块小小的泥土，<br>
连成整个大陆，<br>
如果有一块泥土被海水冲去，<br>
中国就会失去一角。<br>
不幸的日子里，<br>
我们齐声呐喊，<br>
共渡难关。</p>
]]></content>
      <tags>
        <tag>胡言乱语</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器安全加固</title>
    <url>/post/6542/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前的一台小鸡，从早被扫到晚，以至于我ssh时常掉线，自那以后开始了解到ssh爆破这个概念，上网搜集了相关教程，汇总了一下。当然啦，用秘钥登录是最安全的，我这里最求方便，折中一下，介绍的是密码登录的安全加固方法，简单几步，让你的服务器安全系数瞬间提升。</p>
<a id="more"></a>
<h2 id="启用强密码"><a class="header-anchor" href="#启用强密码"></a>启用强密码</h2>
<p>启用强密码可以有效防止密码爆破，就是防止别人用字典轻易套出你的密码，现在ssh爆破，大都有比较好的字典，弱密码的话，分分钟可能就被爆破了，所以强烈建议使用强密码：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">passwd root</span></span><br></pre></td></tr></table></figure>
<h2 id="更换ssh端口"><a class="header-anchor" href="#更换ssh端口"></a>更换ssh端口</h2>
<p>网络上的ssh爆破一般都是扫默认的22端口，如果我们把ssh端口改一下，肯定地说，可以过滤掉一大片低端ssh爆破扫描了，另外，大部分ssh爆破扫描都是扫描1000以下的低端口，所以建议更换ssh端的话，更换到1000以上的高端口。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">nano /etc/ssh/sshd_config</span><br><span class="line">Port = [yourPort]</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>
<h2 id="开启防火墙"><a class="header-anchor" href="#开启防火墙"></a>开启防火墙</h2>
<p>安装防火墙，把不用到的端口关掉，从而把攻击面降到最小。ufw是比较好用的防火墙工具，推荐使用。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">apt</span> install ufw</span><br><span class="line"><span class="attribute">ufw</span> <span class="literal">allow</span> <span class="number">80</span></span><br><span class="line"><span class="attribute">ufw</span> <span class="literal">allow</span> <span class="number">443</span></span><br><span class="line"><span class="attribute">ufw</span> <span class="literal">allow</span><span class="meta"> [yourSSHPort]</span></span><br><span class="line"><span class="attribute">ufw</span> enable</span><br><span class="line"><span class="attribute">ufw</span> delete <span class="literal">allow</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
<h2 id="防止SSH爆破"><a class="header-anchor" href="#防止SSH爆破"></a>防止SSH爆破</h2>
<p>ssh爆破就是不断地用字典中的密码来试探你的真实密码，这时候如果我们限定密码错误次数，如果达到一次的错误次数，就封禁ip，也能很有效的防止密码爆破。fail2ban可以实现我们需要的功能，它能通过分析登录日志，从而根据我们预设的规则做出相应的动作。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt install fail2ban</span><br><span class="line">cd /etc/fail2ban</span><br><span class="line">cp jail.conf jail.local</span><br><span class="line">nano jail.local</span><br><span class="line"><span class="comment"># 排除自身ip，ignoreip处加上自己的ip</span></span><br><span class="line"><span class="comment"># sshd处更改端口为2333，并加上 enabled = true</span></span><br><span class="line"><span class="comment"># 然后启动fail2ban服务，并设置开机自启</span></span><br><span class="line">service fail2ban restart</span><br><span class="line">systemctl <span class="builtin-name">enable</span> fail2ban</span><br></pre></td></tr></table></figure>
<h2 id="定期检查登录日志"><a class="header-anchor" href="#定期检查登录日志"></a>定期检查登录日志</h2>
<p>觉得不太对劲的时候，可以查查登录日志。这里是举例的是Debian系的登录日志，centos的可以上网查。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cat</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/auth.<span class="keyword">log</span> | grep Accepted</span><br><span class="line"><span class="keyword">cat</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/auth.<span class="keyword">log</span> | grep Failed</span><br></pre></td></tr></table></figure>
<h2 id="补充：秘钥登录"><a class="header-anchor" href="#补充：秘钥登录"></a>补充：秘钥登录</h2>
<p>某些大厂商，比如AWS,GCP等，默认要求用户用秘钥登录，以提高安全性。那么这时候，我们用秘钥登录后，可通过添加新用户并授予sudo权限，修改<code>sshd_config</code>设置来进行密码登录，更方便地管理机器。</p>
<p>秘钥登录:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-i</span> <span class="selector-tag">my-key-pair</span><span class="selector-class">.pem</span> <span class="selector-tag">username</span><span class="keyword">@server_address</span></span><br></pre></td></tr></table></figure>
<p>允许密码登录：</p>
<p>（有的机器可能默认允许密码登录，无需修改）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">nano <span class="regexp">/etc/</span>ssh/sshd_config</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure>
<p>添加新用户并添加到sudo组：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">adduser <span class="keyword">new</span><span class="type">user</span></span><br><span class="line"><span class="type">usermod</span> -a -G sudo <span class="keyword">new</span><span class="type">user</span></span><br></pre></td></tr></table></figure>
<h2 id="参考："><a class="header-anchor" href="#参考："></a>参考：</h2>
<p><a href="https://liamlin.me/2018/11/27/security-hardening-guide-on-centos-7">https://liamlin.me/2018/11/27/security-hardening-guide-on-centos-7</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>vps</tag>
        <tag>信息安全</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习笔记（一）</title>
    <url>/post/29409/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>开始入坑机器学习啦，大体的入门学习路线就是看完吴恩达的机器学习、深度学习这两个课程，并完成其课程作业。学习笔记会更新在这里，就相当是一个复习总结的过程吧！</p>
<a id="more"></a>
<h1 id="机器学习简介"><a class="header-anchor" href="#机器学习简介"></a>机器学习简介</h1>
<h2 id="定义"><a class="header-anchor" href="#定义"></a>定义</h2>
<p>A computer program is said to learn from experience E with respect to some task T and some performance measure P,if its performance on T,as measured by P,improves with experience E.</p>
<h2 id="分类"><a class="header-anchor" href="#分类"></a>分类</h2>
<p>机器学习主要分为监督学习和无监督学习两大类</p>
<h3 id="监督学习"><a class="header-anchor" href="#监督学习"></a>监督学习</h3>
<p>监督学习（supervised learning）:监督学习就是给出一组特征，也给出特征所对应的结果。以此来推测另外的特征所对应的结果。</p>
<p>监督学习又可以划分为两种，回归分析和分类。回归分析中比较容易理解的一维的就是线性预测嘛，比如标准曲线法就是典型的线性预测，当然还有维度更高的啦，道理都是一样的。分类就很简单啦，分两类的话就是判断是非对错，分多类也一样。</p>
<h3 id="无监督学习"><a class="header-anchor" href="#无监督学习"></a>无监督学习</h3>
<p>无监督学习（unsupervised learning）:无监督学习就是给出一堆带有某些特征的数据，但是不给出这些特征所对应的结果，以此来判断这些不同的特征之间有什么结构关系。聚类问题就是无监督学习的一个例子，说白了就是给你一堆数据，然后让算法自动给数据分门别类。</p>
<h1 id="单变量线性回归"><a class="header-anchor" href="#单变量线性回归"></a>单变量线性回归</h1>
<p>假设方程中只含有一个特征/输入变量的问题叫作单变量线性回归问题。</p>
<h3 id="符号定义"><a class="header-anchor" href="#符号定义"></a>符号定义</h3>
<p>m：样本数量（ training examples）</p>
<p>x：输入值，又成为特征（input variables/features）</p>
<p>y：输出值，又叫目标值（output variables/target variables）</p>
<p>(x,y)：训练样本（training examples）</p>
<p>第i个训练样本（i<sup>th </sup>training examples）：（x<sup>(i)</sup>,y<sup>(i)</sup>)</p>
<p>h 代表学习算法的解决方案或函数也称为假设（<strong>hypothesis</strong>）</p>
<h3 id="模型表示"><a class="header-anchor" href="#模型表示"></a>模型表示</h3>
<p><img src="../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" alt=""></p>
<h3 id="代价函数"><a class="header-anchor" href="#代价函数"></a>代价函数</h3>
<p>假设方程中有两个参数是需要我们确定的，我们如何选择这两个参数将直接影响到假设方程预测的准确度。</p>
<p>我们将假设方程预测的值与样本真实值之差称为<strong>建模误差</strong>，显然建模误差之和越小，则预测越准确，我们要做的便是确定两个参数的值以使得建模误差之和最小，因此我们建立以上述两参数为变量<strong>代价函数</strong>（平方差函数），这样能使得代价函数取得最小值的点即所求。</p>
<p><img src="../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%BB%BA%E6%A8%A1%E8%AF%AF%E5%B7%AE.png" alt=""></p>
<p><img src="../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BB%A3%E4%BB%B7%E6%96%B9%E7%A8%8B%E4%B8%8E%E5%81%87%E8%AE%BE%E6%96%B9%E7%A8%8B.png" alt=""></p>
<p><img src="../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8B%9F%E5%90%88%E8%AF%AF%E5%B7%AE0.png" alt=""></p>
<p><img src="../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8B%9F%E5%90%88%E8%AF%AF%E5%B7%AE.png" alt=""></p>
<h3 id="梯度下降"><a class="header-anchor" href="#梯度下降"></a>梯度下降</h3>
<p>梯度下降是一个用来求函数最小值的算法，使用梯度下降算法可以求出代价函数 的最小值。<br>
<img src="../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%89%B9%E9%87%8F%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D.png" alt="批量梯度下降"><br>
梯度下降背后的思想是：开始时我们随机选择一个参数的组合，计算代价函数，然后我们寻找下一个能让代价函数值下降最多的参数组合。我们持续这么做直到到到一个局部最小值（<strong>local minimum</strong>），因为我们并没有尝试完所有的参数组合，所以不能确定我们得到的局部最小值是否便是全局最小值（<strong>global minimum</strong>），选择不同的初始参数组合，可能会找到不同的局部最小值。<mark>实际上，在这里只有一个最小值，所以无需考虑它是否是全局最小值</mark></p>
<p><img src="../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%90%8C%E6%AD%A5%E6%94%B9%E5%8F%98.png" alt="同步改变"></p>
<p>批量梯度下降（<strong>batch gradient descent</strong>）算法的公式为： 其中是学习率a（<strong>learning rate</strong>），它决定了我们沿着能让代价函数下降程度最大的方向向下迈出的步子有多大，在批量梯度下降中，我们每一次都同时让所有的参数减去学习速率乘以代价函数的偏导数。学习率a设得过大则会一下子迈过了最小值，设置得过小需要迈的次数则太多，耗费时间。<mark>参数同时变化的，不能先求出一个参数代入到代价方程中去求另外一个参数</mark></p>
<p><img src="../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D.png" alt=""></p>
<h3 id="梯度下降的线性回归"><a class="header-anchor" href="#梯度下降的线性回归"></a>梯度下降的线性回归</h3>
<p><strong>批量梯度下降</strong>指的是在梯度下降的每一步中，我们都用到了所有的训练样本，在梯度下降中，在计算微分求导项时，我们需要进行求和运算，所以，在每一个单独的梯度下降中，我们最终都要计算这样一个东西，这个项需要对所有m个训练样本求和。因此，批量梯度下降法这个名字说明了我们需要考虑所有这一&quot;批&quot;训练样本，而事实上，有时也有其他类型的梯度下降法，不是这种&quot;批量&quot;型的，不考虑整个的训练集，而是每次只关注训练集中的一些小的子集，比如正规方程。</p>
<p>求导后的参数形式：</p>
<p><img src="../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B1%82%E5%AF%BC%E5%90%8E%E7%9A%84%E5%8F%82%E6%95%B0%E5%BD%A2%E5%BC%8F.png" alt="求导后的参数形式"></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习笔记（二）</title>
    <url>/post/58011/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="多变量线性回归"><a class="header-anchor" href="#多变量线性回归"></a>多变量线性回归</h1>
<p>多变量线性回归和单变量线性回归大同小异啦</p>
<h2 id="符号定义"><a class="header-anchor" href="#符号定义"></a>符号定义</h2>
<p>m表示训练集的规模，n表示样品的特征数量，x的上下标分别表示第几个样品的第几个特征</p>
<p><img src="../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A4%9A%E5%8F%98%E9%87%8F%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E8%A1%A8%E7%A4%BA.png" alt="多变量线性回归表示"></p>
<p>假设方程表示如下：</p>
<p><img src="../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A4%9A%E5%8F%98%E9%87%8F%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%96%B9%E7%A8%8B.png" alt="多变量线性回归方程"></p>
<p>注意啦，为了方便计算我们默认x<sub>0</sub> = 1</p>
<p>其向量表示形式如下：</p>
<p><img src="../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A4%9A%E5%8F%98%E9%87%8F%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%96%B9%E7%A8%8B%E7%9A%84%E5%90%91%E9%87%8F%E5%BD%A2%E5%BC%8F.png" alt="多变量线性回归方程的向量形式"></p>
<h2 id="梯度下降"><a class="header-anchor" href="#梯度下降"></a>梯度下降</h2>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派入门</title>
    <url>/post/63228/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>树莓派(Raspberry Pi)是一款基于ARM的微型电脑主板，旨在促进落后地区学生计算机编程教育。虽然树莓派只有一个卡片大小，但是计算机该有的功能它一样具备，加之它能耗小能够长时间待机，而且价格便宜，因此树莓派不少搞机人士的青睐。</p>
<p>本文主要介绍一下，我购买树莓派4b的基本配置及其用途，当然，还会现身说法，讲述一下我踩过的坑。</p>
<a id="more"></a>
<h2 id="树莓派购买及组装"><a class="header-anchor" href="#树莓派购买及组装"></a>树莓派购买及组装</h2>
<p>组装一个树莓派的必备组件有主板、盒子、micro-sd卡、电源，其它配件可选。</p>
<p>树莓派官方售价是2G RAM 35美元, 4G RAM 45美元，可以到淘宝或京东上购买（在淘宝上买，店家一般都会送入门资料），注意，这是裸板的价格，并不含盒子、电源和 micro-sd卡的，还有一点值得注意的是，如果买的是4G内存的板子记得问店家发的是不是1.2升级版主板哦，1.1版的在某些type-c线插入时会有bug，2G内存的没有升级版呢，所以2G内存的板子价格跌得也比较快。</p>
<p>个人建议板子和其他配件分开买，比较划算，买套餐的话会比较坑。micro-sd卡要买c10以上的16g存储以上的，这样系统会比较流畅（c10的含义是指最低读写速度不低于10m/s,同理得c4，c6，关于micro-sd卡规格的详细说明请自个儿Google）。</p>
<p>电源，5v-3a的type-c线即可，电流电压低了，系统会运行不稳定，建议买那种带开关的，就可以不用频繁插拔，频繁插拔对type-c电源接口有磨损的。关于手机type-c充电线可不可以给树莓派供电的问题，答案是可以的，只要电压电流不低于官方要求的就行了，问题手机的充电器一般都比树莓派的贵啊，如果你有闲置的type-c充电线，你也可以不买。</p>
<p>盒子，最好是买带散热片和小风扇的那种，如果你想你的树莓派长时间稳定运行的话，我个人卖的是透明的九层亚克力盒子，带小风扇和散热片。</p>
<p>买完上述这些东西就开始组装吧，组装是有讲究的，特别是那个九层的盒子，保护膜是要撕下来的。。。刚拧上螺丝，结果发现不对，还得拆开，弄了一上午，没搞定。。。后来还是到网上看了教程视频才搞定的，这个告诉我们，办事之前要做好充分准备，不要脑子一热，直接就上，这样真的费时费力，所以盒子的组装还是建议大家对着视频来，有一点要注意的是，小风扇的组装，那个针脚的插法，红线插在第2针，黑线插在第4针，小风扇有字那一面朝向主板cpu，分不清的话，先别装最后一层，直接通电，用手感受一下，那边是出风口那边就朝向cpu就对了。</p>
<h2 id="系统烧录"><a class="header-anchor" href="#系统烧录"></a>系统烧录</h2>
<p>树莓派的系统是烧录在micro-sd卡上的，这也就是为什么建议买c10以上规格的卡的原因啦，如果卡的读写速度慢，那么你的体验自然没有那么好。</p>
<p>关于镜像选择的问题，我还是建议先选官方推荐的基于debian的raspbian（带桌面那款），因为用的人多，教程文档自然也多，很多坑别人已经踩过，甚至已经填好了，再一个就是稳定，虽然它是32bit的系统（可以选择开启64bit内核，但由于文件系统还是32bit的，所以依然还是无法安装64bit的软件，不建议开，开了速度提升并没有感觉到，反而部分32bit的deb包不能正常启动）。等熟悉了以后，有其它需求了，再换其它操作系统。</p>
<p>在官网下载完成系统镜像后，用u盘工具（rufus和官方推荐的Win32DiskImager）都行，一键式傻瓜烧录。</p>
<h2 id="远程控制"><a class="header-anchor" href="#远程控制"></a>远程控制</h2>
<p>主要讲述在无屏幕、无线连接的情况下如何连接远程控制树莓派，买树莓派还单独买一块屏幕的话就很不划算了，毕竟要用到屏幕的地方真的不多，买来用一两次估计也就成了电子垃圾了，所以不建议购买。</p>
<h3 id="ssh"><a class="header-anchor" href="#ssh"></a>ssh</h3>
<p>远程控制前必须要让树莓派连接上网络并且获取到树莓派的ip地址，在刚才烧录完系统的micro-sd卡的boot分区下新建wpa_supplicant.conf文件，并写入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctrl_interface&#x3D;DIR&#x3D;&#x2F;var&#x2F;run&#x2F;wpa_supplicant GROUP&#x3D;netdev</span><br><span class="line">update_config&#x3D;1</span><br><span class="line">country&#x3D;CN</span><br><span class="line"></span><br><span class="line">network&#x3D;&#123;</span><br><span class="line">	ssid&#x3D;&quot;你的wifi1&quot;</span><br><span class="line">	psk&#x3D;&quot;wifi密码&quot;</span><br><span class="line">	key_mgmt&#x3D;WPA-PSK</span><br><span class="line">	priority&#x3D;2 # wifi优先级，数值越大越优先</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">network&#x3D;&#123;</span><br><span class="line">	ssid&#x3D;&quot;无加密的wifi&quot;</span><br><span class="line">	key_mgmt&#x3D;NONE</span><br><span class="line">	priority&#x3D;1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时新建一个ssh文件，因为raspbian默认是不开启ssh的，而第一次登陆我们又要先登陆到ssh才好给树莓派安装或开启其他远程操控软件。</p>
<p>完事保存，插入树莓派，开机即可连接上wifi。可以到路由器上查看连接上的树莓派的ip，如果是笔记本开的热点的话，点开热点详情那里也可以查看到连接设备的ip。</p>
<p>打开windows10的命令行窗口或powershell（有ssh服务的就行），输入<code> ssh pi@树莓派的ip地址</code> 并回车，输入默认密码raspberry并回车，这时你就成功登陆到树莓派了。</p>
<h3 id="xdrp"><a class="header-anchor" href="#xdrp"></a>xdrp</h3>
<p>当你已经成功登陆到树莓派了，这时可以考虑安装图形化的远程桌面控制啦，win10自带的远程桌面就很不错啦，无需安装额外的客户端，而且功能强大哟，可以发送组合键还可以共享剪切板，真香！</p>
<p>可以在命令行中输入<code>sudo apt install xdrp</code> 给树莓派安装，安装完成后，在win10中，crtl+r 运行mstsc，输入ip地址，用户名pi，密码raspberry（如果还没有改的话）就可以成功登陆啦。</p>
<h3 id="vnc"><a class="header-anchor" href="#vnc"></a>vnc</h3>
<p>vnc是已经安装到树莓派中了，但是默认不开启，我们只需要开启vnc服务即可，树莓派命令行中输入<code>sudo raspi-config</code> 选中interfaces并回车，开启vnc服务即可。</p>
<p>开启完成后可在vnc客户端登录监控制树莓派，推荐使用real vnc viewer，登入的账号密码和ssh使用的也一样， 实际上都是linux的一个用户账号。如果登入以后出现了黑屏，无法显示的情况的话，到ssh中输入<code>sudo raspi-config</code> 回车并选中advanced setting，在里面选中video output，再选第二项tv啥的完成后，按右箭头选到finish，重启后问题就解决啦。</p>
<h2 id="系统配置"><a class="header-anchor" href="#系统配置"></a>系统配置</h2>
<h3 id="卸载不需要的软件"><a class="header-anchor" href="#卸载不需要的软件"></a>卸载不需要的软件</h3>
<h3 id="换国内源"><a class="header-anchor" href="#换国内源"></a>换国内源</h3>
<h3 id="配置中文环境"><a class="header-anchor" href="#配置中文环境"></a>配置中文环境</h3>
<h3 id="安装常用软件"><a class="header-anchor" href="#安装常用软件"></a>安装常用软件</h3>
<h3 id="美化终端"><a class="header-anchor" href="#美化终端"></a>美化终端</h3>
<h2 id="系统备份"><a class="header-anchor" href="#系统备份"></a>系统备份</h2>
<h3 id="全盘备份"><a class="header-anchor" href="#全盘备份"></a>全盘备份</h3>
<h3 id="占用备份"><a class="header-anchor" href="#占用备份"></a>占用备份</h3>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>流式细胞术</title>
    <url>/post/43272/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%BC%8F%E7%B4%B0%E8%83%9E%E8%A1%93">流式细胞术</a>是一种生物学技术，用于对悬浮于流体中的微小颗粒进行计数和分选。这种技术可以用来对流过光学或电子检测器的一个个<a href="https://zh.wikipedia.org/wiki/%E7%B4%B0%E8%83%9E">细胞</a>进行连续的多种参数分析。流式细胞术（Flow Cytometry，FC）是对悬液中的单细胞或其他生物粒子,通过检测标记的荧光信号，实现高速、逐一的细胞定量分析和分选的技术。</p>
<p>其实我也不太会流式细胞术，只是看同学做过一次，做个笔记把主要步骤记录下来，以后再慢慢补充吧！</p>
<a id="more"></a>
<h1 id="获取单细胞"><a class="header-anchor" href="#获取单细胞"></a>获取单细胞</h1>
<p>从流式细胞术的定义可以看出，我们要做流式必须要确保细胞是一个一个的，也即单细胞，但是我们知道培养细胞时细胞会贴壁生长、接触抑制，等到培养基长满细胞时它们就会连成一片，非常紧密，所以我们首先要将连成一片的细胞相互分离开来，一般用胰蛋白酶或者EDTA解离细胞，这个过程叫消化。</p>
<p>然后还要根据细胞数目的多少将其按一定数量分装到不同的试管，因为流式细胞仪是单通道分析的一次分析的细胞数目有限制。</p>
<h2 id="消化"><a class="header-anchor" href="#消化"></a>消化</h2>
<p>从细胞培养箱中取出有目标细胞的培养基，倒掉培养基中培养液，用DPBS(2ml)清洗洗两次，加入EDTA（1ml）进行消化（溶解掉细胞间连接的壁），至可用移液枪冲洗出肉眼可见的细胞团（白白的一层），吸掉EDTA，加入WB（wash buffer）（2ml）反复冲洗，将细胞冲落，将所得细胞液转移至离心管中，再次在培养皿上加入WB（2ml）重复上述操作，将所得溶液装入同一离心管中。</p>
<h2 id="计数"><a class="header-anchor" href="#计数"></a>计数</h2>
<p>拿装有细胞的离心管去离心机离心（800rpm 5min，不要超过1000rpm，不然细胞会破碎），吸掉上清液,留下细胞样品，然后加入2ml WB，用移液枪将其吹匀，吸取5微升细胞液加入到含45微升的小尖端样品管中（相当于稀释了十倍，此步骤用于初步确定细胞密度，细胞太多不好计数，四个小方格，每个小方格计数的平均值乘以1万即细胞计数），拿去用显微镜观察细胞密度（计上不计下，计左不计右）（将样品打入载玻片小孔时，记得先把细胞液吹匀，看完一个样之后，用酒精洗净载玻片，擦干，观察另一个样），如果细胞浓度较高则要WB稀释。</p>
<h2 id="分装"><a class="header-anchor" href="#分装"></a>分装</h2>
<p>每个细胞准备好6个或3个尖端的样品管，将细胞液吹匀，每个尖管加入20万到30万个细胞，加入体积根据先前的细胞密度算。放于装有冰块的小箱子里（4摄氏度）存放</p>
<h1 id="获取核酸"><a class="header-anchor" href="#获取核酸"></a>获取核酸</h1>
<p>取5微升核酸样品加入含45微升WB的小样品管中（相当于把核酸稀释10倍）（如果加WB时沾壁，用小离心机离心一下）（有一个是用来做空白对照的不加核酸，但后期要多加入50微升的BB，因为你的核酸样品用WB稀释了，所以要平衡），置于95摄氏度的金属浴中加热10分钟使之变性（核酸样品全程避光，即要关灯，盖上锡箔），然后再置于含冰小箱子上（4摄氏度）10分钟进行复性。拿装有细胞液的管子去离心（1000r/min 3min），吸掉上清液。</p>
<h1 id="混合孵化"><a class="header-anchor" href="#混合孵化"></a>混合孵化</h1>
<p>核酸与细胞混合后加入150微升BB，而对照组加入200微升BB，然后置于装有冰的箱子里（4摄氏度）摇床摇一小时，该过程称为孵化。</p>
<p>离心处理（1000rpm，5min），吸掉上清液，加入300微升wb（wash buffer）,再次离心，吸掉上清液，加入300微升WB。注意离心放置的药品要对称。</p>
<h1 id="流式分析"><a class="header-anchor" href="#流式分析"></a>流式分析</h1>
<p>上样，将试样全部装进流式管中，装样前用枪吹匀试液。将流式管用振荡仪振匀，按到“med”模式，插入流式管，在sample id处标明所测细胞，点击“previous set”重设设置，点击运行，等进度条跑满即可，最后导出数据。</p>
<p>用84洗干净流式管循环使用</p>
]]></content>
      <tags>
        <tag>生物医学</tag>
      </tags>
  </entry>
  <entry>
    <title>视频切片及免费托管</title>
    <url>/post/55602/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>利用Google Cloud Shell，Colab等免费服务（配置好、高性能）或者用自己闲置的VPS将视频切片好后上传Github，可以实现视频存储和在线播放。</p>
<p>使用Google Cloud Shell时，为了防止掉线，可利用Tmux配合Htop，将屏幕分屏，一边运行Htop，一边执行其他任务。</p>
<a id="more"></a>
<h2 id="视频下载"><a class="header-anchor" href="#视频下载"></a>视频下载</h2>
<p>下载器推荐aria2, 因为最常见的http、torrent、magnet下载方式它都支持，而且体积小巧功能强大。使用aria2可以直接在命令行设定下载参数，也可以使用<code>--conf-path</code> 来指定<code>aria2.conf</code>下载参数配置文件，推荐后者，因为方便管理。</p>
<p>下载磁力时，添加一些好的tracker往往能加速你的下载，这里推荐 <a href="https://trackerslist.com/best_aria2.txt">https://trackerslist.com/best_aria2.txt</a> 值得注意的是，aria2添加tracker有特定的格式，<code>bt-tracker=tracker1,tracker2,tracker3...</code> ，而巧的是上面提供的链接提供的就是这种格式，无需转换了。</p>
<p>寻找视频可以去常见的BT/磁力资源站，比如JAVBUS等，也可以利用google搜索<code>index of keyword</code>，比如<code>index of ssni</code>来发现别的小伙伴的个人资源站点，这些资源站点往往都是可以http直链下载，速度超级快。</p>
<h2 id="视频切片"><a class="header-anchor" href="#视频切片"></a>视频切片</h2>
<p>如果视频是h264编码，音频是acc编码，封装格式为mp4的话，可以不转换编码直接切片，速度非常快。如果源视频不是mp4格式，比如mkv或者flv，可以先转换格式，这个过程可能比较漫长，往往转换时间差不多是源视频时长的两倍，也可以和前面一样不转换格式直接采取copy编码的方式切片（但这样可能在网页播放不了，需要用本地播放器播放）。</p>
<h3 id="不转码直接切片"><a class="header-anchor" href="#不转码直接切片"></a>不转码直接切片</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i output.mkv -c copy -f hls -hls_time=5 -hls_list_size 0 -hls_segment_filename hls%4d.ts index.m3u8</span><br></pre></td></tr></table></figure>
<p><code>-c  copy</code>表示保留源视频的音频、视频的编码格式，不做转换。</p>
<p><code>-f hls</code> 表示指定封装格式为hls</p>
<p><code>-hls_time=5</code> 表示指定切片长度（秒），默认为2秒，越小加载就越快。</p>
<p><code>-hls_list_size 0</code> 设置播放列表保存的最多条目，设置为0会保存有所片信息，默认值为5。</p>
<p><code>-hls_segment_filename hls%4d.ts</code> 指定生成的切片的文件名，<code>%4d</code> 表示4位数字。</p>
<h3 id="转为h264-aac编码的mp4后再切片"><a class="header-anchor" href="#转为h264-aac编码的mp4后再切片"></a>转为h264/aac编码的mp4后再切片</h3>
<h4 id="一、将视频转为h264-aac编码的mp4文件"><a class="header-anchor" href="#一、将视频转为h264-aac编码的mp4文件"></a>一、将视频转为h264/aac编码的mp4文件</h4>
<p>可以预先使用ffprobe查看文件编码方式</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">ffprobe <span class="selector-tag">input</span><span class="selector-class">.mkv</span> </span><br></pre></td></tr></table></figure>
<p>如果得到音视频编码为h264/aac则执行</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">ffmpeg -i <span class="keyword">input</span>.mkv -c <span class="keyword">copy</span> <span class="keyword">out</span>.mp4</span><br></pre></td></tr></table></figure>
<p>否则执行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ffmpeg</span> <span class="selector-tag">-i</span> <span class="selector-tag">input</span><span class="selector-class">.mkv</span> <span class="selector-tag">-c</span><span class="selector-pseudo">:v</span> <span class="selector-tag">libx264</span> <span class="selector-tag">-c</span><span class="selector-pseudo">:a</span> <span class="selector-tag">libfaac</span> <span class="selector-tag">out</span><span class="selector-class">.mp4</span></span><br></pre></td></tr></table></figure>
<p>其中，<code>-c:v</code>和<code>-c:a</code>分别表示视频编码、音频编码，其后接对应的编码器；若只写<code>-c</code> 则表示音频和视频采用同样的编码参数，比如<code>-c  copy</code>表示保留源视频的音频、视频的编码格式，不做转换。</p>
<h4 id="二、将mp4文件切片并生成m3u8"><a class="header-anchor" href="#二、将mp4文件切片并生成m3u8"></a>二、将mp4文件切片并生成m3u8</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i output.mp4 -c copy -f hls -bsf:v h264_mp4toannexb -hls_time=5 -hls_list_size 0 -hls_segment_filename hls%4d.ts index.m3u8</span><br></pre></td></tr></table></figure>
<p><code>-bsf:v h264_mp4toannexb</code> 指定h264以字节流AnnexB格式封装。</p>
<p>H264有两种封装方式：字节流AnnexB格式， AVCC格式。AnnexB格式用于实时播放，AVCC格式用于存储。</p>
<p>注意，上述参数中，视频片段后缀可随意发挥，比如将 <code>ts</code> 改为 <code>js</code> 。但还是m3u8后缀名不可更改，否则不会生成对于的m3u8格式文件，等生成完毕m3u8文件后，可随意更改后缀而无影响。</p>
<h3 id="参考"><a class="header-anchor" href="#参考"></a>参考</h3>
<p><a href="https://www.ruanyifeng.com/blog/2020/01/ffmpeg.html">https://www.ruanyifeng.com/blog/2020/01/ffmpeg.html</a></p>
<p><a href="https://blog.cauchyschwarz.com/blog/note/2020/09/05/ffmpeg.html">https://blog.cauchyschwarz.com/blog/note/2020/09/05/ffmpeg.html</a></p>
<p><a href="https://www.cnblogs.com/fieldtianye/p/13427303.html">https://www.cnblogs.com/fieldtianye/p/13427303.html</a></p>
<p><a href="https://www.webzhishi.com/ffmpeg-tt-m3u8/">https://www.webzhishi.com/ffmpeg-tt-m3u8/</a></p>
<p><a href="https://blog.csdn.net/hejjunlin/article/details/71001593">https://blog.csdn.net/hejjunlin/article/details/71001593</a></p>
<p><a href="https://blog.csdn.net/amazing_yangle/article/details/49029687">https://blog.csdn.net/amazing_yangle/article/details/49029687</a></p>
<p><a href="https://www.cnblogs.com/vczf/p/13818609.html">https://www.cnblogs.com/vczf/p/13818609.html</a></p>
<p><a href="https://github.com/aisuhua/ffmpeg-demo">https://github.com/aisuhua/ffmpeg-demo</a></p>
<p><a href="https://www.daguanren.cc/post/FFmpeg.html">https://www.daguanren.cc/post/FFmpeg.html</a></p>
<p><a href="https://docs.peer5.com/guides/production-ready-hls-vod/">https://docs.peer5.com/guides/production-ready-hls-vod/</a></p>
<h2 id="视频发布"><a class="header-anchor" href="#视频发布"></a>视频发布</h2>
<p>切好的视频可以发布到网上方便观看和分享。大多数数网友都是扒免费图床的API，通过将TS视频片段伪装成图片后上传到图床来实现视频托管，不少个人视频站都是这么干的。这里介绍的是上传到Github的方法，因为Github不仅稳定，而且有不少Github加速工具可以用，比如Jsdelivr cdn，此外不少静态托管网站也对接了Github，一键部署，比如vercel，vercel有cdn支持而且每月提供100g流量，自用的话够了。最关键的是，视频的掌控权还在自己手里，想要修改内容可以git clone下来，想要移除视频可以直接删库或改为私有仓库，想要再发布到其他平台可以方便的clone然后上传。</p>
<h3 id="Git设置"><a class="header-anchor" href="#Git设置"></a>Git设置</h3>
<p>设置本地ssh和git环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.ssh/</span><br><span class="line">echo &quot;$SSH_PRI_KEY&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/id_rsa</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">git config --global user.email &quot;github@chan.im&quot;</span><br><span class="line">git config --global user.name &quot;chan&quot;</span><br></pre></td></tr></table></figure>
<h3 id="上传到Github"><a class="header-anchor" href="#上传到Github"></a>上传到Github</h3>
<p>先通过API或其他方式创建一个Github仓库，这里给出API方式创建Github仓库的一个示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl \</span><br><span class="line">-X POST \</span><br><span class="line">-H &quot;Authorization: token $ACCESS_TOKEN&quot; \</span><br><span class="line">-H &quot;Content-Type: application/json&quot; \</span><br><span class="line">https://api.github.com/user/repos \</span><br><span class="line">-d &quot;&#123;\&quot;name\&quot;: \&quot;$repo\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>然后将切好的视频片段连同m3u8文件一起push到Github。值得注意的是，Git push时会把所有文件打包成一个大文件上传，而Git传输对单文件大小有限制，即使使用git-lfs能上传，限制仍然非常多。我们可以通过每次commit push上传一小部分文件，多次push，解决这个问题。使用循环语句解决方案如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in &#123;0..9&#125;;do</span><br><span class="line">  for j in &#123;0..9&#125;;do</span><br><span class="line">    files=(index$i$j??.ts)</span><br><span class="line">    if [ -f $&#123;files[0]&#125; ];then</span><br><span class="line">      git add &quot;$&#123;files[@]&#125;&quot;</span><br><span class="line">      git commit -m &quot;$i$j st commit&quot;</span><br><span class="line">      git push</span><br><span class="line">    else</span><br><span class="line">      git push</span><br><span class="line">      exit 0</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="https://docs.github.com/en/rest/guides/getting-started-with-the-rest-api">https://docs.github.com/en/rest/guides/getting-started-with-the-rest-api</a></p>
<p><a href="https://my.oschina.net/eduOSS/blog/287824">https://my.oschina.net/eduOSS/blog/287824</a></p>
]]></content>
      <tags>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Hexo部署后GithubPage自定义域名失效的问题</title>
    <url>/post/63221/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>每次Hexo部署时，会把本地文件覆盖到Github上，如果是自己直接在Github上给GithubPage绑定域名的话，绑定域名生成的域名文件CNAME会被删除掉，所以会出现每次部署完Hexo后，域名就失效的情况。</p>
<a id="more"></a>
<p>解决方法也很简单，直接在本地博客的source文件夹创建CNAME域名文件，在里面写入自己要绑定的域名就可以啦，这样一来，每次用Hexo生成博客内容时，CNAME都会被放到所生成的博客内容的根目录下，部署的时候，自然就连同它一块传上去啦，这样再也不用担心部署完成后CNAME文件消失，域名捆绑失效的问题啦！</p>
<p><img src="http://p.ananas.chaoxing.com/star3/origin/da97e70dc914c62f23c9d6cc71c6bbb9.png" alt=""></p>
<p><img src="http://p.ananas.chaoxing.com/star3/origin/7c1062730e22098162d4362f343628f7.png" alt=""></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络之时延</title>
    <url>/post/46972/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>计算机网络采用分组交换来传输数据，即分组-存储-转发三部曲，分组交换过程大体如下所述：</p>
<p>首先，主机将所要传输的数据拆分成若干个一定大小的数据块，并给每个数据块加上额外的头部（表头）和尾部（表尾），头部包含有数据块编号、目的地址等信息，而尾部含有差错控制相关的信息（用于校验数据包是否完整，校验数据段和表头），这样就等到了一堆含有表头、数据段和表尾的数据包。每一个一这样的数据包称为一个分组（packet），这个处理过程也叫分组（packeting）。</p>
<a id="more"></a>
<p>接着，主机将每给分组发送到物理链路上，通过物理链路到达路由器。路由器接收到分组后，开始检查表尾（判断数据包是否完整），检查表头（查看其目的地址，并根据路由表决定该将这个分组发送到那个出口），然后将其存储到路由器的发送队列上。这个处理分组所产生的时延就叫处理时延。</p>
<p>如果已经有其他分组在发送队列中了，那么当前分组就要在发送队列中排队，直到前面的分组发送完毕才能轮到它被发送，这个过程产生的时延叫排队时延。</p>
<p>一个分组从路由器发送队列中经发送器作用被发送到传输介质（比如光纤、双绞线等）所需的时间称为发送时延（也叫传输时延，transmission）。</p>
<p>发送过程其实就是将分组编码为信号波（电磁波、光信号等）的过程。信号波的频率越高，单位时间内的信号波所包含的信息也就越多，所以发送速率也就越快，发送时延也就越低。所以要提高传输速率，或者说提高带宽的关键是提高信号频率。发送时延与发送器的功率（要能产生高频信号）、传输介质的性质（要能容纳得下高频信号）相关，主要取决于传输介质。光纤比双绞线更适合传输高频信号，所以网络核心，也就是路由器与路由器之间的通信，都是采用光纤通信的。</p>
<p>最后，发送器产生的信号在传输介质上飞奔到下一台路由器或主机所耗费的时间就是传播时延，也就是两个主机或路由器间的物理距离除以光速。</p>
<p>以上就是计算机网络分组交换的各个过程说产生的时延，而总时延就等于这些时延之和。有一些值得注意的小细节是，我们并不可能准确地计算出总时延，因为其中有一些东西是很难计算或无法计算的，所以结果只能是一个大概的值。比如传播时延我们就用两主机间的物理距离除以光速，它也就只是一个大概的值，因为你第一个比特发送到目的主机后，还有好多比特还在路上，甚至都还没出发，这些时间都没有计算到。</p>
<p>最后的最后，一个小问题，好多人都说发送速率和传播速率毫无关联，不要把它们混淆了。确实，在概念不相同，但是实际上他们是有关联的啦，你想啊，电磁波频率越高传波速率就越快，而前面也说了信号频率越高发送速率也就越快，所以说，在同一传输介质中，发送速率越快，传播速率也就越快，虽然说关系可能不是那么明显。</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>超星网盘的妙用</title>
    <url>/post/50657/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>找到一款好的网盘实在是越来越难了，国内的网盘毫无隐私安全可言（一般也就当个资源网盘用），而且要么存储空间小，要么下载速度慢，就拿百度云盘来说，不仅限速，而且你还得安装客户端才能下载文件；国外的网盘吧，一来空间也小，二来它服务器在海外访问速度还是不是稳定。</p>
<p>找到一个好的图床也越来越难，国内的图床，没有安全隐私可言咱也就不说了，毕竟也没有那个不开眼的企图在国内的网站上储存啥违规图片，关键是没得用，新浪图床开启了防盗链验证，免费图床的大好日子一去不复返啦，国外的图床，一个字，慢！</p>
<p>废话不多说，今天俺发现了超星网盘的上述两大用处，基本可以实现网盘使用、图床使用功能，超星网盘150G大容量，上传下载不限速，单文件限制2GB，经营多年，安全可靠，用它做网盘和图床问题不大！</p>
<a id="more"></a>
<p><img src="https://p.ananas.chaoxing.com/star3/origin/a6090cfd24c85f88d7c6cb9f85eea887.png" alt="网盘界面"></p>
<p>先说一下实现的具体思路，当我们把文件上传超星网盘时，它会先检测一下文件hash值，如果服务器中已经有了这个文件，那它是不会上传你的文件的，然后做做样子，假装在急速秒传，是的，很多文件传输服务都是这么干的，包括QQ文件传输、yandex disk等。如果服务器中没有这个文件，它则会上传这个文件并记录下文件的hash值（标记为object_id），同时生成一个十进制的文件标识码（标记为node）。</p>
<p>分享文件时用node标识码作唯一识别，直链下载文件时用object_id作唯一标识，看到这里大家应该就会发现了，只要我们获得它的node和object_id就可以构造出下载链接并实现云盘直链下载以及图床功能了。我试着用hash检测工具检测文件hash值并和文件的object_id对比，常用的md5、sha1、sha256都对不上，然后我试着在网盘文件界面和分享页面查看查看网页元素，结果发现，node和object_id就在那里，白纸黑字，都不屑于隐藏，嗯，问题解决了。</p>
<h2 id="图床实现"><a class="header-anchor" href="#图床实现"></a>图床实现</h2>
<p>找到目标图片，右键检查，object_id和图片预览链接原形毕露，如图：<img src="https://p.ananas.chaoxing.com/star3/origin/f721f79721fd2fa9abfb038db2a2ea69.png" alt="获取objectid"></p>
<p>网页源码如下，其中<code>?type=img</code> 前面的<code>f721f79721fd2fa9abfb038db2a2ea69</code>即为object_id</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ypImg&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://pan-yz.chaoxing.com/thumbnail/40,40,50/f721f79721fd2fa9abfb038db2a2ea69?type=img&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;javascript:this.src=&#x27;/views/images/filelogo/x_pic.png&#x27;;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;36&quot;</span> <span class="attr">height</span>=<span class="string">&quot;logo_heigth&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>复制上述代码中的src后的链接(预览图链接)到浏览器打开，再从链接中提取出原图链接<code>http://p.ananas.chaoxing.com/star3/origin/1be4e1c714cdb396c9c96331a2741574.png</code></p>
<p>获得的直链可以直接在markdown下显示图片啦！我现在写的这篇文章使用的全部图片都是源于超星云盘上的，效果如你所见。</p>
<p><mark>注意，不要用d0.ananas.chaoxing.com的前缀来构造图片直链，会有refer防盗链验证的</mark></p>
<h2 id="网盘实现"><a class="header-anchor" href="#网盘实现"></a>网盘实现</h2>
<p>网盘直链下载比图床实现稍稍复杂了一点点，不过都是一样的思路。手机端的超星助手可以直接分享文件给别人，别人无需登录即可下载，但网页端的话则不行。</p>
<p>同样的找到目标文件，右键检查，发现node如下：<img src="https://p.ananas.chaoxing.com/star3/origin/ba9689d5d4799000b01672748eb2788f.png" alt="获取node"></p>
<p>图中带有node_name_后接的一串数字即是node，如你所见node为<code>434108759749431296</code>，构造无需登录可下载的链接，特定前缀<code>https://pan-yz.chaoxing.com/external/m/file/</code> 加上node，如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>pan-yz.chaoxing.com<span class="regexp">/external/m</span><span class="regexp">/file/</span><span class="number">439138726555971584</span></span><br></pre></td></tr></table></figure>
<p>浏览器中打开该链接，下载按钮处右键检查，展开<code>&lt;script type=&quot;text/javascript&quot;&gt;</code> 标签，如图:</p>
<p><img src="https://p.ananas.chaoxing.com/star3/origin/0d90b2ff609ee0dc2e82fd46824d4085.png" alt="获取下载直链"></p>
<p>直接获得download对应的下载直链。</p>
<p>当然啦，也可以获取object_id后用如下前缀构造直链：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>p.ananas.chaoxing.com<span class="regexp">/star3/</span>origin/</span><br></pre></td></tr></table></figure>
<h2 id="常见问题"><a class="header-anchor" href="#常见问题"></a>常见问题</h2>
<h3 id="单文件超出2GB-1GB大小"><a class="header-anchor" href="#单文件超出2GB-1GB大小"></a>单文件超出<s>2GB</s> 1GB大小</h3>
<p>可以用压缩软件7-zip或WinRAR进行分卷压缩，将文件分为几部分上传。</p>
<h3 id="管理员能随意查看上传文件"><a class="header-anchor" href="#管理员能随意查看上传文件"></a>管理员能随意查看上传文件</h3>
<p>可以将隐私文件隐藏加密后隐藏在图片中，或者直接压缩加密。话说回来，超星网盘是适合做资源盘的，不适合做同步盘或者备份盘的，所以还要啥自行车!</p>
<h3 id="网速时快时慢"><a class="header-anchor" href="#网速时快时慢"></a>网速时快时慢</h3>
<p><s>是的，我也发现这个问题啦，它应该是限制了多线程下载，大多数时候只能连接到一个线程下载，偶尔能用两个线程，而且每个文件的下载速度不一样，有的单线程下载就特别快能跑满带宽，有的则时快时慢，有的则没有速度，有的还必须待fn参数速度才快，有的带不带都快，总的来说，连接不是特别稳定，可能和这段时间大量视频直播有关吧，再等等看，如果还是只有俺就弃坑啦！</s> 大体确定是因为超星直播流量太大影响到了云盘功能，并没有限制多线程下载，速度还是很快的！即使是单线程下载速度还是快得一批！可能是用的人少吧！</p>
<p><img src="https://p.ananas.chaoxing.com/star3/origin/1be4e1c714cdb396c9c96331a2741574.png" alt=""></p>
<h3 id="不支持https？"><a class="header-anchor" href="#不支持https？"></a>不支持https？</h3>
<p>看起来是的，我们获取到的链接的却是http直链，但是咱可以自己加个s上去，我试过啦，完全没有问题的。超星网盘的主页也是一样的道理，自己加上s即可：<a href="https://pan-yz.chaoxing.com/">https://pan-yz.chaoxing.com/</a></p>
<h3 id="150G还是不能够用？"><a class="header-anchor" href="#150G还是不能够用？"></a>150G还是不能够用？</h3>
<p>注册小号，<a href="https://passport2.chaoxing.com/register2%EF%BC%8C%E6%B3%A8%E6%84%8F%E5%95%A6%EF%BC%8Cregister%E5%90%8E%E9%9D%A2%E4%B8%8D%E5%B8%A6%E6%95%B0%E5%AD%97%E6%88%96%E5%B8%A6%E7%9A%84%E6%95%B0%E5%AD%97%E4%B8%8D%E6%98%AF2%E7%9A%84%E9%83%BD%E6%98%AF%E8%A6%81%E5%88%B0%E6%89%8B%E6%9C%BA%E5%8F%B7%E6%89%8D%E8%83%BD%E6%B3%A8%E5%86%8C%E7%9A%84%EF%BC%8Cregister2%E5%88%99%E5%8F%AF%E4%BB%A5%E7%94%A8%E9%82%AE%E7%AE%B1%E6%B3%A8%E5%86%8C%EF%BC%81">https://passport2.chaoxing.com/register2，注意啦，register后面不带数字或带的数字不是2的都是要到手机号才能注册的，register2则可以用邮箱注册！</a></p>
]]></content>
      <tags>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title>转载成都七中老师的开学致辞</title>
    <url>/post/64259/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>林荫校区的同学们，高新校区的同学们，网校的同学们:</p>
<p>你们好!</p>
<p>在这个非常时期，我很荣幸能代表我们语文备课组，和大家重聚在这个特殊的课堂里。今天，我们以连线代替了会面、屏幕代替了黑板，虽然形式简陋，但是我们为高三同学助力的热情不变。</p>
<p>已经立春了，但今年的冬天却似乎长得没有尽头。新冠肺炎还在肆虐，不知还有多少人正面临着生离死别，还有多少家庭从此没有明天。</p>
<p>“时代的一粒灰，落在个人头上，就是一座山。” 对现在还挣扎在痛苦中的人们，谈生活太奢侈了，有些时候，光是活着，就已经拼尽全力。</p>
<p>所以我们需要对眼前的苦难哀悼，感同身受地深深地哀悼。现在是未来的过去，我们对眼前的苦难哀悼是为了铭记。多年以后，春天来了又去，当阳光铺洒在草地，当我们自由地呼吸空气，当我们开心的欢聚，我们必须记得起若干年前，雪曾落在这片土地。死亡，是一个人的悲剧，遗忘是一个民族的悲剧。</p>
<a id="more"></a>
<p>我们还需要忏悔，因为真正的哀悼开始于忏悔。我们应当忏悔，明明索尔仁尼琴的警告振聋发聩，我们却装聋作哑、却随波逐流，甚至推波助澜。最终，没有人能够置身事外。</p>
<p>鲁迅先生曾经说过，墨写的谎言掩盖不住血写的事实。“有的人，为了守住不会带到棺材里去的利益与权柄，在他们还活着的时候，就因为贪婪而吞食了自己的心肝。当他们开始习惯性撒谎的时候，也在将自己的亲友与同胞推向深渊”。</p>
<p>历史不会因为无视而消失，责任也不能因为回避而逃脱。加缪在《鼠疫》中写道:“这一切里面并不存在英雄主义，这只是诚实的问题。与鼠疫斗争的唯一方式， 只能是诚实。</p>
<p>李文亮医生走了，“ 我们愤怒于你的预警被当成谣言，我们伤恸于你的死亡竟不是谣言”。说真话的人，我们应该为他们竖碑，要有名有姓，拒绝一切匿名的纪念。</p>
<p>苦难必将过去，但我们不能把丧事当成喜事，不能把质疑换成赞歌，不能把追责偷换为免职。不能把冬天唱成春的开始，有些人已经埋在了冬天。 苦难必将过去，但仅止于哀悼和忏悔是不够的，我们必须反省。</p>
<p>灾难面前，最容易看清人性;一场瘟疫，撕下了谁出将入相的遮羞布?又有哪些媚骨在哗众取宠中捡拾着人血馒头?</p>
<p>如何让我们的孩子不成为这样的人?如何能在下次灾难来临的时候，有更多的口罩，有更少的恐慌，有更多的担当，有更少的推诿。</p>
<p>灾难面前，也最容易看到人类内心深处的光芒。</p>
<p>哪些骨头在风中挺立成了傲岸?哪些天使逆行走向了疫情最前线?哪些普通人的善良让我们热泪盈眶?哪些陌生人的温暖让我们重燃希望?</p>
<p>这些无惧无畏，这些不屈不挠，这些点点滴滴，让我们看到了支撑这个民族历尽沧桑，饱受磨难，依然屹立不倒的那根脊梁。</p>
<p>我们避免不了灾难，我们却能做好自己，我们预知不了未来，我们却清晰的知道，未来在孩子们的手里。</p>
<p>今天的这些数字，这些故事，这些人物，这些精神，这些教训，这些反思，不能只出现在多年以后的课本里，成为僵硬的答题要点。</p>
<p>这些真实的一切，应该让孩子们知道。一张安静的书桌来之不易，不能只安放没有思想的大脑。</p>
<p>我们不是局外人，现在不是，未来更不是。因为，“无穷的远方，无数的人们，都和我有关。“</p>
<p>​</p>
<p>​</p>
]]></content>
  </entry>
  <entry>
    <title>通过chroot拯救损坏的Linux</title>
    <url>/post/34289/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>初次接触Linux的时候，安装的是Manjaro（Deepin Desktop），一款基于Arch的桌面发行版，Arch采取的是滚动更新。后来滚动更新完后，时不时出现问题，有时开不了机。大部分都是依赖关系或者包冲突导致，我当时的做法是，先用一个U盘启动Manjaro LiveCD，然后执行chroot切换有问题的Manjaro系统分区作为<code>/</code>，最后升级/更新一次系统或利用timeshift进行系统还原。</p>
<a id="more"></a>
<h3 id="进入LiveCD"><a class="header-anchor" href="#进入LiveCD"></a>进入LiveCD</h3>
<p>将同样的发行版linux系统刻录到u盘，插入计算机，开机，按f12或其他，选择进入livecd</p>
<h3 id="挂载Linux分区"><a class="header-anchor" href="#挂载Linux分区"></a>挂载Linux分区</h3>
<p>切换到root</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo -i</span></span><br></pre></td></tr></table></figure>
<p>查看Linux分区位置</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">fdisk -l</span></span><br></pre></td></tr></table></figure>
<p>挂载Linux分区到/mnt目录</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># 假设linux分区为<span class="regexp">/dev/</span>sda</span><br><span class="line">mount <span class="regexp">/dev/</span>sda /mnt</span><br></pre></td></tr></table></figure>
<p>挂载其它必要环境或设备</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="regexp">/dev /</span>dev<span class="regexp">/pts /</span>proc <span class="regexp">/sys /</span>run;<span class="keyword">do</span> mount -B <span class="variable">$i</span> /mnt<span class="variable">$i</span>;done</span><br></pre></td></tr></table></figure>
<h3 id="chroot并修复"><a class="header-anchor" href="#chroot并修复"></a>chroot并修复</h3>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">chroot <span class="string">/mnt</span></span><br></pre></td></tr></table></figure>
<p>开始修复工作</p>
<h3 id="参考"><a class="header-anchor" href="#参考"></a>参考</h3>
<p><a href="https://ziqiangxu.github.io/blog/accumulation/%E7%94%A8chroot%E4%BF%AE%E5%A4%8DLinux%E7%B3%BB%E7%BB%9F.html">https://ziqiangxu.github.io/blog/accumulation/用chroot修复Linux系统.html</a></p>
<p><a href="https://www.cnblogs.com/tsreaper/p/chroot-fix-boot.html">https://www.cnblogs.com/tsreaper/p/chroot-fix-boot.html</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
